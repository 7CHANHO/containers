<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE tutorialLesson PUBLIC "-//IBM//DTD DITA Tutorial Lesson//EN"
 "tutorialLesson.dtd">
<tutorialLesson id="cs_apps_tutorial_lesson3" xml:lang="ja-jp" class="- topic/topic task/task tutorialLesson/tutorialLesson ">
<title>レッスン 3: Watson Tone Analyzer アプリをデプロイして更新する</title>
<titlealts>
<navtitle>レッスン 3: Watson Tone Analyzer アプリをデプロイして更新する</navtitle>
<searchtitle>チュートリアルのレッスン 3: <keyword conref="cloudoeconrefs.dita#cloudoeconrefs/containerlong"></keyword> で Watson Tone Analyzer アプリを Kubernetes クラスターにデプロイして更新する</searchtitle></titlealts>
<shortdesc>前の各レッスンでは、アプリを複数の単一コンポーネントとして 1 つのワーカー・ノードにデプロイしました。
このレッスンでは、前のチュートリアルでクラスターに追加した Watson Tone Analyzer サービスを利用するアプリの 2 つのコンポーネントをクラスターにデプロイします。
各コンポーネントを異なるコンテナーに分離しておけば、1 つのコンポーネントの更新時に他のコンポーネントに影響が及ぶことを防止できます。
また、アプリを更新し、レプリカの追加でスケールを大きくして可用性をさらに高めるようにします。
</shortdesc>
<prolog>
<metadata>
<keywords><indexterm>コンテナー</indexterm><indexterm>チュートリアル</indexterm></keywords></metadata></prolog>
<taskbody>
<context><xref href="../api/content/containers/images/cs_app_tutorial_components3.png" format="png" scope="external">
<desc>レッスン 3: デプロイメントのセットアップ</desc><image href="images/cs_app_tutorial_components3.png" alt="デプロイメントのセットアップ" align="left" placement="break"></image></xref></context></taskbody>
<task id="task_qsb_szy_fz">
<title><b>レッスン 3a: Watson Tone Analyzer アプリをデプロイする</b></title>
<taskbody>
<steps>
<step>
<cmd>CLI で 3 つ目のアプリ・ディレクトリー <filepath>Stage3</filepath> に移動します。
</cmd>
<info conref="cs_apps_tutorial_lesson2.dita#cs_apps_tutorial_lesson2/quickstart"></info>
<info>
<codeblock>cd <varname>&lt;username_home_directory&gt;</varname>/container-service-getting-started-wt/Stage3</codeblock></info></step>
<step>
<cmd>最初の Watson イメージをビルドします。</cmd><substeps>
<substep>
<cmd><filepath>watson</filepath> ディレクトリーに移動します。</cmd>
<info>
<codeblock>cd watson</codeblock></info></substep>
<substep>
<cmd>ローカル環境でアプリの最初の部分をイメージとしてビルドしてタグを付けます。
</cmd>
<info>この場合も、コマンドの末尾にピリオド (<codeph>.</codeph>) を付けることを忘れないようにしてください。
</info>
<info>
<codeblock>docker build -t registry.<keyword conref="cloudoeconrefs.dita#cloudoeconrefs/domainname"></keyword>/<varname>&lt;namespace&gt;</varname>/watson .</codeblock>
正常終了のメッセージを確認します。
<screen>Successfully built <varname>&lt;image_id&gt;</varname></screen></info></substep>
<substep>
<cmd>アプリの最初の部分をイメージとしてプライベート・レジストリー名前空間にプッシュします。</cmd>
<info>イメージがプッシュされるのを待ってから、次の手順に進みます。
</info>
<info>
<codeblock>docker push registry.<keyword conref="cloudoeconrefs.dita#cloudoeconrefs/domainname"></keyword>/<varname>&lt;namespace&gt;</varname>/watson</codeblock></info></substep></substeps></step>
<step>
<cmd>2 つ目の Watson-talk イメージをビルドします。</cmd><substeps>
<substep>
<cmd><filepath>watson-talk</filepath> ディレクトリーに移動します。</cmd>
<info>
<codeblock>cd <varname>&lt;username_home_directory&gt;</varname>/container-service-getting-started-wt/Stage3/watson-talk</codeblock></info></substep>
<substep>
<cmd>ローカル環境でアプリの 2 つ目の部分をイメージとしてビルドしてタグを付けます。
</cmd>
<info>この場合も、コマンドの末尾にピリオド (<codeph>.</codeph>) を付けることを忘れないようにしてください。
</info>
<info>
<codeblock>docker build -t registry.<keyword conref="cloudoeconrefs.dita#cloudoeconrefs/domainname"></keyword>/<varname>&lt;namespace&gt;</varname>/watson-talk .</codeblock>正常終了のメッセージを確認します。
<screen>Successfully built <varname>&lt;image_id&gt;</varname></screen></info></substep>
<substep>
<cmd>アプリの 2 つ目の部分をプライベート・レジストリー名前空間にプッシュします。</cmd>
<info>イメージがプッシュされるのを待ってから、次の手順に進みます。
</info>
<info>
<codeblock>docker push registry.<keyword conref="cloudoeconrefs.dita#cloudoeconrefs/domainname"></keyword>/<varname>&lt;namespace&gt;</varname>/watson-talk</codeblock></info></substep></substeps></step>
<step>
<cmd conref="cs_apps_tutorial_lesson1.dita#cs_apps_tutorial_lesson1/quickstart_switch">If you are
using the Docker Quickstart Terminal, switch back to the command-line utility that you used to set
the <codeph>KUBECONFIG</codeph> session variable.</cmd></step>
<step>
<cmd>それぞれのイメージがレジストリー名前空間に正常に追加されたことを確認します。</cmd>
<info>
<codeblock>bx cr images</codeblock>出力:
<screen>Listing images...

REPOSITORY                                  NAMESPACE  TAG            DIGEST         CREATED         SIZE     VULNERABILITY STATUS
registry.<keyword conref="cloudoeconrefs.dita#cloudoeconrefs/domainname"></keyword>/<varname>namespace</varname>/hello-world   <varname>namespace</varname>  1              0d90cb732881   40 minutes ago  264 MB   OK
registry.<keyword conref="cloudoeconrefs.dita#cloudoeconrefs/domainname"></keyword>/<varname>namespace</varname>/hello-world   <varname>namespace</varname>  2              c3b506bdf33e   20 minutes ago  264 MB   OK
registry.<keyword conref="cloudoeconrefs.dita#cloudoeconrefs/domainname"></keyword>/<varname>namespace</varname>/watson        <varname>namespace</varname>  latest         fedbe587e174   3 minutes ago   274 MB   OK
registry.<keyword conref="cloudoeconrefs.dita#cloudoeconrefs/domainname"></keyword>/<varname>namespace</varname>/watson-talk   <varname>namespace</varname>  latest         fedbe587e174   2 minutes ago   274 MB   OK</screen></info></step>
<step>
<cmd>テキスト・エディターで <filepath><varname>&lt;username_home_directory&gt;</varname>/container-service-getting-started-wt/Stage3/watson-deployment.yml</filepath> ファイルを開きます。
この構成スクリプトには、アプリの watson のコンポーネントと watson-talk のコンポーネントの両方のデプロイメントとサービスが含まれています。
</cmd><substeps>
<substep>
<cmd>レジストリー名前空間にある両方のデプロイメントのイメージの詳細情報を更新します。</cmd>
<info>
<p>watson:
</p>
<codeblock>image: "registry.<keyword conref="cloudoeconrefs.dita#cloudoeconrefs/domainname"></keyword>/<varname>namespace</varname>/watson"</codeblock>

<p>watson-talk:
</p>
<codeblock>image: "registry.<keyword conref="cloudoeconrefs.dita#cloudoeconrefs/domainname"></keyword>/<varname>namespace</varname>/watson-talk"</codeblock></info></substep>
<substep>
<cmd>watson デプロイメントの volumes セクションで、前のチュートリアルで作成した Watson Tone Analyzer のシークレットの名前を更新します。
</cmd>
<info>Kubernetes シークレットをボリュームとしてデプロイメントにマウントすると、<keyword conref="cloudoeconrefs.dita#cloudoeconrefs/bluemix_short"></keyword> サービスの資格情報を、ポッドで実行されるコンテナーから使用できるようになります。
このチュートリアルの Watson アプリ・コンポーネントは、ボリューム・マウント・パスを使用してサービス資格情報を検索するように構成されています。
</info>
<info>
<codeblock>volumes:
        - name: service-bind-volume
          secret:
            defaultMode: 420
            secretName: binding-<varname>mytoneanalyzer</varname></codeblock>
シークレットの名前を忘れた場合は、以下のコマンドを実行します。
<codeblock>kubectl get secrets --namespace=default</codeblock></info></substep>
<substep>
<cmd>watson-talk の service セクションで、<codeph>NodePort</codeph> の設定値に注目します。
</cmd>
<info>この例では <varname>30080</varname> を使用しています。
</info></substep></substeps></step>
<step>
<cmd>構成スクリプトを実行します。</cmd>
<info>
<codeblock>kubectl create -f <varname>&lt;username_home_directory&gt;</varname>/container-service-getting-started-wt/Stage3/watson-deployment.yml</codeblock></info></step>
<step importance="optional">
<cmd>Watson Tone Analyzer のシークレットがポッドに対してボリュームとしてマウントされたことを確認します。
</cmd><substeps>
<substep>
<cmd>watson ポッドの名前を取得するには、以下のコマンドを実行します。
</cmd>
<info>
<codeblock>kubectl get pods</codeblock>出力:
<screen>NAME                                 READY     STATUS    RESTARTS  AGE
watson-pod-4255222204-rdl2f          1/1       Running   0         13h
watson-talk-pod-956939399-zlx5t      1/1       Running   0         13h</screen></info></substep>
<substep>
<cmd>ポッドの詳細情報を取得して、シークレットの名前を探します。
</cmd>
<info>
<codeblock>kubectl describe pod <varname>&lt;pod_name&gt;</varname></codeblock>出力:
<screen>Volumes:
  service-bind-volume:
    Type:       Secret (a volume populated by a Secret)
    SecretName: binding-mytoneanalyzer
  default-token-j9mgd:
    Type:       Secret (a volume populated by a Secret)
    SecretName: default-token-j9mgd</screen></info></substep></substeps></step>
<step>
<cmd>ブラウザーを開いて、何かのテキストを分析します。</cmd>
<info>この例の IP アドレスの場合は、<filepath>http://<varname>&lt;worker_node_IP_address&gt;</varname>:<varname>&lt;watson-talk-nodeport&gt;</varname>/analyze/"&lt;text_to_analyze&gt;"</filepath> という形式の URL になります。
例:
<codeblock>http://<varname>169.47.227.138</varname>:<varname>30080</varname>/analyze/"Today is a beautiful day"</codeblock>入力したテキストに関する JSON 応答がブラウザーに表示されます。
</info></step>
<step conref="cs_apps_dashboard.dita#cs_cli_dashboard/kube_dashboard">
<cmd></cmd></step>
<step>
<cmd><uicontrol>「ワークロード」</uicontrol>タブで、作成したリソースを表示します。
</cmd>
<info>Kubernetes ダッシュボードでの検討作業が完了したら、<userinput>CTRL+C</userinput> を使用して <codeph>proxy</codeph> コマンドを終了します。
</info></step></steps></taskbody></task>
<task id="lesson3b">
<title>レッスン 3b: 稼働中の Watson Tone Analyzer デプロイメントを更新する</title>
<shortdesc>デプロイメントの稼働中に、デプロイメントを編集してポッド・テンプレートの値を変更することができます。
このレッスンには、使用されるイメージの更新が含まれています。</shortdesc>
<taskbody>
<steps>
<step>
<cmd>イメージの名前を変更します。</cmd>
<info>PR 会社は、同じデプロイメントで異なるアプリを試してみて、その新しいアプリに問題が見つかった場合はロールバックしたいと考えています。
</info><substeps>
<substep>
<cmd>稼働中のデプロイメントの構成スクリプトを開きます。
</cmd>
<info>
<codeblock>kubectl edit deployment/watson-talk-pod</codeblock>オペレーティング・システムの種類によって、vi エディターかテキスト・エディターのいずれかが開きます。
</info></substep>
<substep>
<cmd>イメージの名前を ibmliberty イメージに変更します。</cmd>
<info>
<codeblock>spec:
      containers:
      - image: registry.<keyword conref="cloudoeconrefs.dita#cloudoeconrefs/domainname"></keyword>/ibmliberty:latest</codeblock></info></substep>
<substep>
<cmd>変更内容を保存し、エディターを終了します。
</cmd></substep>
<substep>
<cmd>構成スクリプトの変更内容を稼働中のデプロイメントに適用します。
</cmd>
<info>
<codeblock>kubectl rollout status deployment/watson-talk-pod</codeblock>ロールアウトの完了を知らせる確認メッセージが表示されるのを待ちます。
<screen>deployment "watson-talk-pod" successfully rolled out</screen>変更をロールアウトすると、Kubernetes によって別のポッドが作成されてテストされます。テストが正常に完了すると、元のポッドは削除されます。
</info></substep>
<substep importance="optional">
<cmd>変更内容に不備があった場合は、ロールバックできます。
</cmd>
<info>この PR 会社の担当者がアプリの変更時でミスを犯したらしく、前のデプロイメントに戻さなければならなくなりました。
<ol id="ol_n41_2q4_mz">
<li>リビジョンのバージョン番号を調べて、前のデプロイメントの番号を特定します。バージョン番号が最も大きいのが最新リビジョンです。
この例では、リビジョン 1 が元のデプロイメントで、リビジョン 2 が前のステップで行ったイメージ変更です。
<codeblock>kubectl rollout history deployment/watson-talk-pod</codeblock>出力:
<screen>deployments "watson-talk-pod"
REVISION	CHANGE-CAUSE
1		&lt;none&gt;
2 	        &lt;none&gt;</screen></li>
<li>次のコマンドを実行して、デプロイメントを前のリビジョンに戻します。Kubernetes によって再び別のポッドが作成されてテストされます。テストが正常に完了すると、元のポッドは削除されます。
<codeblock>kubectl rollout undo deployment/watson-talk-pod --to-revision=1</codeblock>出力:
<screen>deployment "watson-talk-pod" rolled back</screen></li>
<li>次のステップで使用するポッドの名前を取得します。
<codeblock>kubectl get pods</codeblock>出力:
<screen>NAME                              READY     STATUS    RESTARTS   AGE
watson-talk-pod-2511517105-6tckg  1/1       Running   0          2m</screen></li>
<li>ポッドの詳細を調べて、イメージがロールバックされたことを確認します。
<codeblock>kubectl describe pod <varname>&lt;pod_name&gt;</varname></codeblock>出力:
<screen>Image: registry.<keyword conref="cloudoeconrefs.dita#cloudoeconrefs/domainname"></keyword>/<varname>namespace</varname>/watson-talk</screen></li></ol></info></substep></substeps></step>
<step importance="optional">
<cmd>watson-pod のデプロイメントについても変更作業を繰り返します。
</cmd></step></steps>
<result id="quiz"><p><xref href="https://bluemix-quizzes.mybluemix.net/containers/apps_tutorial/quiz.php" format="html" scope="external">クイズに答えて知識を試してみましょう!</xref></p></result>
<postreq><p>
Watson Tone Analyzer アプリをデプロイできました。
この PR 会社は、このアプリのデプロイメントを使用してプレス・リリースの分析作業を開始できる状況になりました。
</p>
<p>これまで作成したリソースを削除してもかまいません。
構成スクリプトを使用して、作成したリソースを削除できます。
<codeblock>kubectl delete -f <varname>&lt;username_home_directory&gt;</varname>/container-service-getting-started-wt/Stage3/watson-deployment.yml</codeblock>出力:
<screen>deployment "watson-pod" deleted
deployment "watson-talk-pod" deleted
service "watson-service" deleted
service "watson-talk-service" deleted</screen>クラスターを保持する必要がない場合は、クラスターも削除できます。
<codeblock>bx cs cluster-rm <varname>pr_firm_cluster</varname></codeblock></p>
<p> 次の作業
<ph><xref href="cs_apps_scaling.dita" format="dita" scope="local" audience="blue"></xref></ph>を試すか、<xref href="https://developer.ibm.com/code/journey/category/container-orchestration/" format="html" scope="external">developerWorks</xref> でコンテナーのオーケストレーション・ジャーニーを探索します。</p></postreq></taskbody></task></tutorialLesson>

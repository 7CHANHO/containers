<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE task PUBLIC "-//IBM//DTD DITA IBM Task//EN" "ibm-task.dtd">
<task id="cs_classic_migrating">
<title>Kubernetes クラスターへの<ph conref="cs_conref.dita#links/classic"></ph>のマイグレーション</title>
<shortdesc>Kubernetes クラスターに<ph conref="cs_conref.dita#links/classic"></ph>を再作成できます。
</shortdesc>
<taskbody>
<context id="context_iy5_jgr_mz"><p>このページでは、次の事柄について説明します。
<lines>    • <xref href="cs_classic_migrating.dita#migrating_containers" format="dita" scope="local"></xref>
    • <xref href="cs_classic_migrating.dita#migrating_autoscaling" format="dita" scope="local" audience="blue">自動スケーリングのマイグレーション</xref>
    • <xref href="cs_classic_migrating.dita#migrating_compose" format="dita" scope="local"></xref>
    • <xref href="cs_classic.html#container_single_remove" format="html" scope="peer">単一コンテナーの削除</xref>
    • <xref href="cs_classic.html#container_group_remove" format="html" scope="peer">コンテナー・グループの削除</xref></lines></p></context></taskbody>
<task id="migrating_containers">
<title>クラスターへの<ph conref="cs_conref.dita#links/classic"></ph>の再作成</title>
<shortdesc><ph conref="cs_conref.dita#links/classic"></ph>作成コマンドからプロパティーを取り込んで、Kubernetes クラスター内に同様のコンテナー・ポッドをデプロイするための構成スクリプトを作成できます。
</shortdesc>
<taskbody>
<context id="context_r35_hpq_mz"></context></taskbody>
<task id="migrate_groups">
<title>コンテナー・グループの例</title><abstract>
<shortdesc>過去にコンテナー・グループを使用した場合は、クラスター内に同様のセットアップを作成できます。
</shortdesc> コンテナー・グループに VPN サービスを以前使用していて、有料アカウントを現在使用している場合は、<xref href="https://knowledgelayer.softlayer.com/procedure/how-order-vyatta" format="html" scope="external">クラスターの VLAN 用に Vyatta も注文する必要があります</xref>。</abstract>
<taskbody>
<context id="context_mdr_dhq_rz"><p>ここでは、次のコマンドを使用してコンテナー・グループが作成されていることを想定しています。同様の機能をクラスターに実装する方法を知るには、コマンド・オプションをクリックしてください。
</p>
<p><codeph><ph conref="container_conref.dita#links/command_prefix"></ph> group-create <xref href="cs_classic_migrating.dita#migrate_groups/group_anti" format="dita" scope="local">--anti</xref>
<xref href="cs_classic_migrating.dita#migrate_groups/group_auto" format="dita" scope="local">--auto</xref>
<xref href="cs_classic_migrating.dita#migrate_groups/group_domain" format="dita" scope="local">-d
<keyword conref="cloudoeconrefs.dita#cloudoeconrefs/Appdomainname"></keyword></xref>
<xref href="cs_classic_migrating.dita#migrate_groups/group_host" format="dita" scope="local">-n
<varname>mycontainerhost</varname></xref>
<xref href="cs_classic_migrating.dita#migrate_groups/group_desired" format="dita" scope="local">--desired 3</xref>
<xref href="cs_classic_migrating.dita#migrate_groups/group_service_bind" format="dita" scope="local">-e CCS_BIND_SRV=<varname>my_service_instance</varname></xref>
<xref href="cs_classic_migrating.dita#migrate_groups/group_memory" format="dita" scope="local">-m
1024</xref>
<xref href="cs_classic_migrating.dita#migrate_groups/group_max" format="dita" scope="local">--max
5</xref>
<xref href="cs_classic_migrating.dita#migrate_groups/group_min" scope="local">--min 2</xref>
<xref href="cs_classic_migrating.dita#migrate_groups/group_name" format="dita" scope="local">--name
<varname>my_container_group</varname></xref>
<xref href="cs_classic_migrating.dita#migrate_groups/group_port" format="dita" scope="local">-p
<varname>9080</varname></xref>
<xref href="cs_classic_migrating.dita#migrate_groups/group_volume" format="dita" scope="local">--volume <varname>my_volume</varname>:/<varname>directory_path</varname></xref>
<xref href="cs_classic_migrating.dita#migrate_groups/group_image" format="dita" scope="local">registry.<keyword conref="cloudoeconrefs.dita#cloudoeconrefs/domainname"></keyword>/<varname>ibmliberty</varname></xref></codeph><note><codeph>--ip</codeph> オプションを指定して <codeph>cf ic group create</codeph> コマンドを使用した場合、既存の浮動 IP アドレスは Kubernetes クラスターにマイグレーションできないということに注意してください。パブリック IP アドレスでサービスを公開するには、NodePort または LoadBalancer サービス・タイプをデプロイするための構成スクリプトを作成します。
このセットアップにより、Kubernetes クラスターのパブリック IP アドレスでサービスが公開されます。<xref href="cs_planning.dita#cs_planning_public_network" format="dita" scope="local">パブリック・デプロイメント・セットアップ・オプションについて詳しくは、こちらをご覧ください。</xref></note></p>
<p><dl>
<dlentry>
<dt id="group_anti">--anti</dt>
<dd>可用性を高めるために、異なるワーカー・ノード間にコンテナー・ポッドを分散させます。
<codeblock>annotations:
        scheduler.alpha.kubernetes.io/affinity: &gt;
            {
              "podAntiAffinity": {
                "requiredDuringSchedulingIgnoredDuringExecution": [
                  {
                    "labelSelector": {
                      "matchExpressions": [
                        {
                          "key": "app",
                          "operator": "In",
                          "values": ["ibmliberty"]
                        }
                      ]
                    },
                    "topologyKey": "kubernetes.io/hostname"
                 }
                ]
               }
             }</codeblock></dd></dlentry>
<dlentry>
<dt id="group_auto">--auto</dt>
<dd>標準クラスターでは、ロード・バランサーまたは Ingress を使用してコンテナーの自動リカバリーを可能にします。
<xref href="cs_planning_public_network.dita" format="dita" scope="local">パブリック・デプロイメント・セットアップ・オプションについて詳しくは、こちらをご覧ください。</xref><codeblock>type: LoadBalancer</codeblock></dd></dlentry>
<dlentry>
<dt id="group_domain">-d <keyword conref="cloudoeconrefs.dita#cloudoeconrefs/Appdomainname"></keyword></dt>
<dd>標準クラスターでは、ロード・バランサーまたは Ingress を使用してドメインを定義します。<xref href="cs_planning_public_network.dita" format="dita" scope="local">パブリック・デプロイメント・セットアップ・オプションについて詳しくは、こちらをご覧ください。</xref><codeblock>type: LoadBalancer</codeblock></dd></dlentry>
<dlentry>
<dt id="group_host">-n <varname>mycontainerhost</varname></dt>
<dd>標準クラスターでは、ロード・バランサーまたは Ingress を使用してホストを定義します。<xref href="cs_planning_public_network.dita" format="dita" scope="local">パブリック・デプロイメント・セットアップ・オプションについて詳しくは、こちらをご覧ください。</xref><codeblock>type: LoadBalancer</codeblock></dd></dlentry>
<dlentry>
<dt id="group_desired">--desired 3</dt>
<dd>必要なアプリ・インスタンス数を定義するために、レプリカの数を入力します。
<codeblock>spec:
  replicas: 3</codeblock></dd></dlentry>
<dlentry>
<dt id="group_service_bind">--e CCS_BIND_SRV=<varname>my_service_instance</varname></dt>
<dd id="service_bind_dl">まず、シークレットを作成して<xref href="cs_cluster_service.dita" format="dita" scope="local">クラスターにサービスを追加</xref>します。このタスクは、サービス用のシークレットをクラスター内のアプリで使用できるようにする一回限りのタスクです。
次に、デプロイメント用構成スクリプト内に、<xref href="cs_apps_volume_claim.dita" format="dita" scope="local">そのシークレットとそのシークレットへのマウント・パスを追加</xref>します。<p>サービス・キーをサポートする <keyword conref="cloudoeconrefs.dita#cloudoeconrefs/bluemix_short"></keyword> サービスはすべて、Kubernetes 機能とともに使用することに関してサポートされます。言い換えると、<ph conref="cs_conref.dita#links/classic"></ph>にサービスを接続するために Cloud Foundry アプリ・ブリッジ・メソッド (CCS_BIND_APP) を使用する必要があった場合、そのサービスを Kubernetes クラスターで使用することはサポートされません。直接サービス・バインディング・メソッド (CCS_BIND_SRV) を使用していた場合、そのサービスは Kubernetes で使用することに関してサポートされます。</p><codeblock>      containers:
        - name: ibmliberty
          image: "registry.ng.bluemix.net/ibmliberty:latest
          volumeMounts:
            - mountPath: /opt/service-bind
              name: service-bind
      volumes:
        - name: service-bind
          secret:
            defaultMode: 420
            secretName: service-bind-secret</codeblock></dd></dlentry>
<dlentry>
<dt id="group_memory">-m 1024</dt>
<dd id="memory_dl">サイズの代わりに、コンテナー・ポッドの CPU とメモリーの要求と制限を定義します。
<xref href="https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/" format="html" scope="external">CPU とメモリーの値を決定する方法について詳しくは、こちらをご覧ください。</xref><codeblock>        resources:
          limits:
            cpu: 250m
            memory: 2000Mi
          requests:
            cpu: 125m
            memory: 1000Mi</codeblock></dd></dlentry>
<dlentry>
<dt id="group_max">--max 5</dt>
<dd>この例で使用されているデプロイメント・タイプの代わりに、HorizontalPodAutoscaler タイプの構成スクリプトを使用します。水平自動スケーリングでは、ポッドの最大数を設定できます。<xref href="https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/" format="html" scope="external">水平自動スケーリングの詳細は、こちらをご覧ください。</xref><codeblock>maxReplicas: 5</codeblock></dd></dlentry>
<dlentry>
<dt id="group_min">--min 2</dt>
<dd>この例で使用されているデプロイメント・タイプの代わりに、HorizontalPodAutoscaler タイプの構成スクリプトを使用します。水平自動スケーリングでは、ポッドの最小数を設定できます。<xref href="https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/" format="html" scope="external">水平自動スケーリングの詳細は、こちらをご覧ください。</xref><codeblock>minReplicas: 2</codeblock></dd></dlentry>
<dlentry>
<dt id="group_name">--name <varname>my_container_group</varname></dt>
<dd id="name_dl">リソースの名前。リソースのラベルを割り当てることもできます。<image href="sout.gif" alt="外部リンク" id="image_jzl_b3y_rz"></image>
<xref href="https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/" format="html" scope="external">Kubernetes ラベルの詳細は、こちらをご覧ください。</xref><codeblock>metadata:
 name: ibmliberty</codeblock></dd></dlentry>
<dlentry>
<dt id="group_port">-p <varname>9080</varname></dt>
<dd id="port_dl">外部トラフィックに公開するポート。<codeblock>ports:
        - containerPort: 9080</codeblock></dd></dlentry>
<dlentry>
<dt id="group_volume">--volume <varname>volume</varname>:/<varname>directory_path</varname></dt>
<dd id="volume_dl">まず、<xref href="cs_apps_volume_claim.dita" format="dita" scope="local">永続ボリューム請求を作成</xref>します。そうすると、要求したストレージ・サイズとストレージ・クラスの永続ボリュームが動的に作成されます。
次に、構成スクリプトに<xref href="cs_apps_volume_claim.dita" format="dita" scope="local">請求名とマウント・パスを追加</xref>します。
<codeblock>      containers:
        - name: ibmliberty
          image: "registry.ng.bluemix.net/ibmliberty:latest
          volumeMounts:
            - mountPath: /opt/volumemount
              name: myvol
      volumes:
        - name: myvol
          persistentVolumeClaim:
            claimName: mypvc</codeblock></dd></dlentry>
<dlentry>
<dt id="group_image">registry.<keyword conref="cloudoeconrefs.dita#cloudoeconrefs/domainname"></keyword>/<varname>ibmliberty</varname></dt>
<dd id="image_dl">コンテナーの作成に使用するイメージ。
<keyword conref="cloudoeconrefs.dita#cloudoeconrefs/bluemix_short"></keyword> イメージ・レジストリー、Docker Hub、または独自のレジストリーに含まれるイメージを引き続き使用できます。
<xref href="cs_planning_images.dita" format="dita" scope="local">レジストリー・セットアップ・オプションについて詳しくは、こちらをご覧ください。</xref><codeblock>    spec:
      containers:
      - name: ibmliberty
        image: registry.ng.bluemix.net/ibmliberty:latest</codeblock></dd></dlentry></dl></p></context>
<postreq id="postreq_rm5_hcx_rz"><p>コンテナー・グループの例のコマンドの値を使用し、次の構成スクリプトで、同様のコンテナー・ポッドをクラスターにデプロイします。
<codeblock>apiVersion: extensions/v1beta1
kind: Deployment
metadata:
 name: ibmliberty
spec:
  replicas: 3
  template:
    metadata:
      labels:
        app: ibmliberty
      annotations:
        scheduler.alpha.kubernetes.io/affinity: &gt;
            {
              "podAntiAffinity": {
                "requiredDuringSchedulingIgnoredDuringExecution": [
                  {
                    "labelSelector": {
                      "matchExpressions": [
                        {
                          "key": "app",
                          "operator": "In",
                          "values": ["ibmliberty"]
                        }
                      ]
                    },
                    "topologyKey": "kubernetes.io/hostname"
                 }
                ]
               }
             }
    spec:
      containers:
      - name: ibmliberty
        image: registry.ng.bluemix.net/ibmliberty:latest
        ports:
        - containerPort: 9080
        resources:
          limits:
            cpu: 250m
            memory: 2000Mi
          requests:
            cpu: 125m
            memory: 1000Mi
        volumeMounts:
        - mountPath: /opt/service-bind
          name: service-bind
        - mountPath: /opt/volumemount
          name: myvol
      volumes:
        - name: service-bind
          secret:
            defaultMode: 420
            secretName: service-bind-secret
        - name: myvol
          persistentVolumeClaim:
            claimName: mypvc
---
apiVersion: v1
kind: Service
metadata:
  name: my-loadbalancer-service
  labels:
    run: ibmliberty
spec:
  selector:
    run: ibmliberty
  type: LoadBalancer
  ports:
   - protocol: TCP
     port: 9080</codeblock></p></postreq></taskbody></task>
<task id="migrate_single">
<title>単一のコンテナーの例</title>
<taskbody>
<context id="context_kck_5mq_wz"><p>ここでは、次のコマンドを使用して単一のコンテナーが作成されていることを想定しています。同様の機能をクラスターに実装する方法を知るには、コマンド・オプションをクリックしてください。
<draft-comment>-it -P --link --env-file
not included</draft-comment></p>
<p><codeph><ph conref="container_conref.dita#links/command_prefix"></ph> run <xref href="cs_classic_migrating.dita#migrate_single/single_port" format="dita" scope="local">-p
<varname>9080</varname></xref>
<xref href="cs_classic_migrating.dita#migrate_single/single_service_bind" format="dita" scope="local">-e CCS_BIND_SRV=<varname>my_service_instance</varname></xref>
<xref href="cs_classic_migrating.dita#migrate_single/single_memory" format="dita" scope="local">-m
1024</xref>
<xref href="cs_classic_migrating.dita#migrate_single/single_name" format="dita" scope="local">--name
<varname>my_container</varname></xref>
<xref href="cs_classic_migrating.dita#migrate_single/single_volumes" format="dita" scope="local">--volume <varname>my_volume</varname>:/<varname>directory_path</varname></xref>
<xref href="cs_classic_migrating.dita#migrate_single/single_image" format="dita" scope="local">registry.<keyword conref="cloudoeconrefs.dita#cloudoeconrefs/domainname"></keyword>/<varname>ibmliberty</varname></xref></codeph></p>
<p><dl>
<dlentry>
<dt id="single_service_bind">--e CCS_BIND_SRV=<varname>my_service_instance</varname></dt>
<dd conref="cs_classic_migrating.dita#migrate_groups/service_bind_dl"></dd></dlentry>
<dlentry>
<dt id="single_memory">-m 1024</dt>
<dd conref="cs_classic_migrating.dita#migrate_groups/memory_dl">Instead of size, define CPU and
memory limits for the container pod.
<codeblock>        resources:
          limits:
            cpu: 300m
            memory: 200Mi
          requests:
            cpu: 200m
            memory: 100Mi</codeblock><draft-comment>These
values are not equivalents to the 1024 example listed. How might the user convert their old size
into CPU and memory values?</draft-comment></dd></dlentry>
<dlentry>
<dt id="single_name">--name <varname>my_container_group</varname></dt>
<dd conref="cs_classic_migrating.dita#migrate_groups/name_dl">The name of the resource. You can also
assign labels on resources. <image href="sout.gif" alt="External link" id="image_lck_5mq_wz"></image>
<xref href="https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/" format="html" scope="external">Learn more about Kubernetes
labels</xref>.<codeblock>metadata:
 name: ibmliberty</codeblock></dd></dlentry>
<dlentry>
<dt id="single_port">-p <varname>9080</varname></dt>
<dd conref="cs_classic_migrating.dita#migrate_groups/port_dl">The port to expose to external
traffic.<codeblock>ports:
        - containerPort: 9080</codeblock></dd></dlentry>
<dlentry>
<dt id="single_volumes">--volume <varname>volume</varname>:/<varname>directory_path</varname></dt>
<dd conref="cs_classic_migrating.dita#migrate_groups/volume_dl">First, <xref href="cs_apps_volume_claim.dita" format="dita" scope="local">create persistent volume claim</xref>,
and a persistent volume with the requested storage size and storage class is created dynamically for
you. Then, <xref href="cs_apps_volume_mount.dita">add the claim name and a mount path</xref> to the
configuration
script.<codeblock>      containers:
        - name: ibmliberty
          image: "registry.ng.bluemix.net/ibmliberty:latest
          volumeMounts:
            - mountPath: /opt/volumemount
              name: myvol
      volumes:
        - name: myvol
          persistentVolumeClaim:
            claimName: mypvc</codeblock></dd></dlentry>
<dlentry>
<dt id="single_image">registry.<keyword conref="cloudoeconrefs.dita#cloudoeconrefs/domainname"></keyword>/<varname>ibmliberty</varname></dt>
<dd conref="cs_classic_migrating.dita#migrate_groups/image_dl">The image to build the container
from. You can continue to use the images in your <keyword conref="cloudoeconrefs.dita#cloudoeconrefs/bluemix_short"></keyword> image registry, Docker Hub, or your own
registry. <xref href="cs_planning_images.dita" format="dita" scope="local">Learn more about the
registry setup
options</xref><codeblock>    spec:
      containers:
      - name: ibmliberty
        image: registry.ng.bluemix.net/ibmliberty:latest</codeblock></dd></dlentry></dl></p></context>
<postreq id="postreq_wvj_vmq_wz"><p>単一のコンテナーの例のコマンドの値を使用し、次の構成スクリプトで、同様のコンテナー・ポッドをクラスターにデプロイします。
<codeblock>apiVersion: extensions/v1beta1
kind: Deployment
metadata:
 name: ibmliberty
spec:
  template:
    metadata:
      labels:
        app: ibmliberty
    spec:
      containers:
      - name: ibmliberty
        image: registry.ng.bluemix.net/ibmliberty:latest
        ports:
        - containerPort: 9080
        resources:
          limits:
            cpu: 300m
            memory: 200Mi
          requests:
            cpu: 200m
            memory: 100Mi
        volumeMounts:
        - mountPath: /opt/service-bind
          name: service-bind
        - mountPath: /opt/volumemount
          name: myvol
      volumes:
        - name: service-bind
          secret:
            defaultMode: 420
            secretName: service-bind-secret
        - name: myvol
          persistentVolumeClaim:
            claimName: mypvc
---
apiVersion: v1
kind: Service
metadata:
  name: my-loadbalancer-service
  labels:
    run: ibmliberty
spec:
  selector:
    run: ibmliberty
  type: LoadBalancer
  ports:
   - protocol: TCP
     port: 9080</codeblock></p></postreq></taskbody></task></task>
<task id="migrating_autoscaling" conref="container_group_ui_as.dita#container_group_ui_as/migrating_autoscaling" audience="blue">
<title>Migrating auto-scaling</title></task>
<task id="migrating_compose">
<title>クラスターへの Docker Compose 構成のマイグレーション</title>
<shortdesc></shortdesc>
<taskbody>
<context><ph>Docker Compose を使用してコンテナーをデプロイした場合は、<xref href="https://kubernetes.io/docs/tools/kompose/user-guide/" format="html" scope="external">Kubernetes の Kompose ツールを使用</xref>して、Kubernetes クラスターにコンテナーをデプロイするための構成スクリプトに Docker Compose 構成スクリプトをマイグレーションできます。</ph></context>
<postreq id="postreq_sdm_kmd_5z">クラスター内の Kubernetes リソースにコンテナーをマイグレーションしたので、<xref href="cs_apps_dashboard.dita" format="dita" scope="local"></xref>を参照して、それらのリソースの実行状況を確認します。
</postreq></taskbody></task></task>

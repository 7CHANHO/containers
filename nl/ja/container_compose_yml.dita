<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//IBM//DTD DITA IBM Concept//EN" "ibm-concept.dtd">
<concept id="container_compose_yml" xml:lang="ja-jp">
<title><filepath>docker-compose.yml</filepath> ファイルでサポートされるオプション</title>
<titlealts>
<searchtitle><keyword conref="cloudoeconrefs.dita#cloudoeconrefs/containerlong"></keyword> の <filepath>docker-compose.yml</filepath> ファイルでサポートされるオプション</searchtitle></titlealts>
<shortdesc></shortdesc>
<prolog>
<metadata>
<keywords><indexterm>コンテナー</indexterm><indexterm>yml</indexterm><indexterm>docker-compose.yml</indexterm><indexterm>Docker Compose</indexterm><indexterm>サポートされるオプション</indexterm><indexterm>IBM Containers</indexterm></keywords></metadata></prolog>
<conbody>
<section><keyword conref="cloudoeconrefs.dita#cloudoeconrefs/containerlong"></keyword> でサポートされる <filepath>docker-compose.yml</filepath> ファイルのオプションを示します。
<ul>
<li><xref href="container_compose_yml.dita#container_compose_yml/environment" format="dita">environment</xref></li>
<li><xref href="container_compose_yml.dita#container_compose_yml/expose" format="dita">expose</xref></li>
<li><xref href="container_compose_yml.dita#container_compose_yml/image" format="dita">image</xref></li>
<li><xref href="container_compose_yml.dita#container_compose_yml/links" format="dita">links</xref></li>
<li><xref href="container_compose_yml.dita#container_compose_yml/mem" format="dita">mem_limit</xref></li>
<li><xref href="container_compose_yml.dita#container_compose_yml/ports" format="dita">ports</xref></li>
<li><xref href="container_compose_yml.dita#container_compose_yml/volumes" format="dita">volumes</xref></li></ul></section>
<section id="environment"><title><ph><codeph>environment</codeph></ph></title><uicontrol>environment</uicontrol> パラメーターは、環境変数を設定したり、<keyword conref="cloudoeconrefs.dita#cloudoeconrefs/bluemix_short"></keyword> サービスまたはアプリを Docker Compose サービスにバインドしたりする場合に使用します。
<note> <keyword conref="cloudoeconrefs.dita#cloudoeconrefs/bluemix_short"></keyword> サービスをマルチコンテナー・デプロイメントに追加する場合は、このサービスのインスタンスをスペースに作成する必要があります。詳細については、<xref href="container_integrations_binding.dita" format="dita" scope="local"></xref>を参照してください。<p>一部のサービスは、サービスを直接コンテナーにバインドすることをサポートしていません。その場合は、Cloud Foundry アプリを作成する必要があります。
詳細については、<xref href="troubleshoot/ts_bridge_app.dita" format="dita" scope="local"></xref>を参照してください。</p></note><ul>
<li><option>Bluemix サービスのバインド</option><p>サービスをバインドするには、<uicontrol>CCS_BIND_SRV</uicontrol> キーを使用します。<varname>&lt;service_instance_name&gt;</varname> を、プライベート <keyword conref="cloudoeconrefs.dita#cloudoeconrefs/bluemix_short"></keyword> イメージ・レジストリーに作成したサービス・インスタンスの名前に置き換えてください。</p><codeblock>environment: 
  - "CCS_BIND_SRV=<varname>&lt;service_instance_name&gt;</varname>"</codeblock></li>
<li><option>Cloud Foundry アプリのバインド</option><p>アプリをバインドするには、<uicontrol>CCS_BIND_APP</uicontrol> キーを使用します。<varname>&lt;app_name&gt;</varname> を、プライベート <keyword conref="cloudoeconrefs.dita#cloudoeconrefs/bluemix_short"></keyword> イメージ・レジストリーに作成した Cloud Foundry アプリの名前に置き換えてください。</p><codeblock>environment:
  - "CCS_BIND_APP=<varname>&lt;app_name&gt;</varname>"</codeblock></li></ul><dl>
<dlentry>
<dt>例</dt>
<dd>次の <filepath>docker-compose.yml</filepath> サンプル・ファイルは、lets-chat サービスに対して <varname>containerbridge</varname> という名前の Cloud Foundry アプリをバインドし、<varname>tmp_folder</varname> という環境変数を追加する例を示しています。
<codeblock>#Name of your service
lets-chat:
  #Container image that is used to run the lets-chat service. Replace <varname>&lt;my_namespace&gt;</varname> with the name of your namespace.
  image: registry.<keyword conref="cloudoeconrefs.dita#cloudoeconrefs/domainname"></keyword>/<varname>&lt;my_namespace&gt;</varname>/lets-chat
  #Use <uicontrol>CCS_BIND_SRV</uicontrol> to bind a <keyword conref="cloudoeconrefs.dita#cloudoeconrefs/bluemix_short"></keyword> service or <uicontrol>CCS_BIND_APP</uicontrol> to bind a Cloud Foundry app to your Docker Compose service. 
  environment:
   - "CCS_BIND_APP=containerbridge"
   - "tmp_folder=/tmp"</codeblock></dd></dlentry></dl></section>
<section id="expose"><title><ph><codeph>expose</codeph></ph></title>プライベート・ネットワークのみにポートを公開します。
このポートには、リンクされたすべてのサービスがアクセスできます。
<dl>
<dlentry>
<dt>例</dt>
<dd>次の <filepath>docker-compose.yml</filepath> サンプル・ファイルは、社内ネットワークのみにポート 8080 を公開する例を示しています。
リンクされた mongo コンテナーは、このポートを使用して lets-chat コンテナーに要求を送信します。
<codeblock>lets-chat:
  #Container image that is used to run the lets-chat service. Replace <varname>&lt;my_namespace&gt;</varname> with the name of your namespace.
  image: registry.<keyword conref="cloudoeconrefs.dita#cloudoeconrefs/domainname"></keyword>/<varname>&lt;my_namespace&gt;</varname>/lets-chat
  #Make a port available to the private network only. 
  expose:
   - "8080"
  links:
    - mongo
mongo:
  image: registry.<keyword conref="cloudoeconrefs.dita#cloudoeconrefs/domainname"></keyword>/<varname>&lt;my_namespace&gt;</varname>/mongo</codeblock></dd></dlentry></dl></section>
<section id="image"><title><ph><codeph>image</codeph></ph></title>Docker Compose サービスを実行するために使用するベース・イメージを定義します。
<filepath>docker-compose.yml</filepath> ファイルでこのイメージを使用するためには、その前にプライベート <keyword conref="cloudoeconrefs.dita#cloudoeconrefs/bluemix_short"></keyword> レジストリーでそのイメージが使用できなければなりません。
<p>イメージを定義するには、次の形式のプライベート <keyword conref="cloudoeconrefs.dita#cloudoeconrefs/bluemix_short"></keyword> レジストリーへの絶対パスを使用します: registry.<keyword conref="cloudoeconrefs.dita#cloudoeconrefs/domainname"></keyword>/<varname>&lt;my_namespace&gt;</varname>/<varname>&lt;image&gt;</varname>:<varname>&lt;tag&gt;</varname>。
</p><dl>
<dlentry>
<dt>例</dt>
<dd>次の <filepath>docker-compose.yml</filepath> サンプル・ファイルは、lets-chat サービスのベースとして lets-chat イメージを定義する例を示しています。
<codeblock>#Name of your service
lets-chat:
  #Container image that is used to run the lets-chat service. Replace <varname>&lt;my_namespace&gt;</varname> with the name of your namespace.
  image: registry.<keyword conref="cloudoeconrefs.dita#cloudoeconrefs/domainname"></keyword>/<varname>&lt;my_namespace&gt;</varname>/lets-chat
  </codeblock></dd></dlentry></dl></section>
<section id="links"><title><ph><codeph>links</codeph></ph></title>別のサービスのために開始されるすべてのコンテナーに、コンテナーをリンクします。
リンクを使用すると、サービス間の依存関係が決まるので、<codeph>docker-compose up</codeph> コマンド実行時に各コンテナーが開始される順序が決まります。
サービスをリンクするには、サービス名を入力します。<dl>
<dlentry>
<dt>例</dt>
<dd>次の <filepath>docker-compose.yml</filepath> サンプル・ファイルは、lets-chat サービスのために開始されるすべてのコンテナーに nginx コンテナーをリンクする例を示しています。
<codeblock>#Name of your service
nginx:
  #Container image that is used to run the nginx service. Replace <varname>&lt;my_namespace&gt;</varname> with the name of your namespace.
  image: registry.<keyword conref="cloudoeconrefs.dita#cloudoeconrefs/domainname"></keyword>/<varname>&lt;my_namespace&gt;</varname>/nginx
  #Enter the name of the service that you want to link. 
  links:
    - lets-chat
lets-chat:
  image: registry.<keyword conref="cloudoeconrefs.dita#cloudoeconrefs/domainname"></keyword>/<varname>&lt;my_namespace</varname>/lets-chat</codeblock></dd></dlentry></dl></section>
<section id="mem"><title><ph><codeph>mem_limit</codeph></ph></title>コンテナー・インスタンスのサイズを設定します。
このコンテナー・サイズによって、コンテナーが実行時に計算ホスト上で取得するメモリーとディスク・スペースの最大量が決まります。コンテナー・サイズが割り当てられた後、その値を変更することはできません。<p><keyword conref="cloudoeconrefs.dita#cloudoeconrefs/containerlong"></keyword> では、以下のサイズから選択します。
</p><ul audience="yellow">
<li>ピコ (64 MB メモリー、4 GB ディスク・スペース)</li>
<li>ナノ (128 MB メモリー、8 GB ディスク・スペース)</li>
<li>マイクロ (256 MB メモリー、16 GB ディスク・スペース)</li>
<li>タイニー (512 MB メモリー、32 GB ディスク・スペース)</li>
<li>スモール (1024 MB メモリー、64 GB ディスク・スペース)</li>
<li>ミディアム (2048 MB メモリー、128 GB ディスク・スペース)</li>
<li>ラージ (4096 MB メモリー、256 GB ディスク・スペース)</li>
<li>X ラージ (8192 MB メモリー、512 GB ディスク・スペース)</li>
<li>2X ラージ (16384 MB メモリー、1 TB ディスク・スペース)</li></ul><ul audience="blue">
<li><draft-comment author="Nadine">The number of vCPU that you get with each container t-shirt size is
staging only. The CPU capping is not enforced in prod for our customer. </draft-comment></li>
<li>ピコ (64 MB メモリー、4 GB ディスク・スペース、¼ vCPU)</li>
<li>ナノ (128 MB メモリー、8 GB ディスク・スペース、¼ vCPU)</li>
<li>マイクロ (256 MB メモリー、16 GB ディスク・スペース、¼ vCPU)</li>
<li>タイニー (512 MB メモリー、32 GB ディスク・スペース、¼ vCPU)</li>
<li>スモール (1024 MB メモリー、64 GB ディスク・スペース、¼ vCPU)</li>
<li>ミディアム (2048 MB メモリー、128 GB ディスク・スペース、½ vCPU)</li>
<li>ラージ (4096 MB メモリー、256 GB ディスク・スペース、1 vCPU)</li>
<li>X ラージ (8192 MB メモリー、512 GB ディスク・スペース、2 vCPU)</li>
<li>2X ラージ (16384 MB メモリー、1 TB ディスク・スペース、4 vCPU)</li></ul>必要なサイズ (MB) を、<codeph>'M'</codeph> 単位ラベルを付けずに入力します。サイズを指定しない場合、コンテナーはすべて、デフォルトで<uicontrol>「マイクロ」</uicontrol>サイズで作成されます。
<dl>
<dlentry>
<dt>例</dt>
<dd>次の例は、lets-chat サービスのコンテナー・サイズを 512 MB に設定する <filepath>docker-compose.yml</filepath> ファイルの例を示しています。<codeblock>#Name of your service
lets-chat:
  #Container image that is used to run the lets-chat service. Replace <varname>&lt;my_namespace&gt;</varname> with the name of your namespace.
  image: registry.<keyword conref="cloudoeconrefs.dita#cloudoeconrefs/domainname"></keyword>/<varname>&lt;my_namespace&gt;</varname>/lets-chat
  #Enter the size you want in megabytes
  mem_limit: 512</codeblock></dd></dlentry></dl></section>
<section id="ports"><title><ph><codeph>ports</codeph></ph></title><uicontrol>ports</uicontrol> オプションは、サービスのために開始される各コンテナー用にパブリック・ポートを公開する場合に使用します。
以下の構成のいずれかを選択します。<ul>
<li><option>パブリック IP アドレスの要求</option><p>この構成では、スペースのための新しいパブリック IP アドレスを要求し、ポート 8080 をパブリックに公開し、要求した IP アドレスをコンテナーにバインドします。
<note>新しい IP アドレスをスペースに割り振ることができるだけのパブリック IP アドレス割り当て範囲が必要です。
</note></p><codeblock>ports:
  - "request:8080:8080"</codeblock></li>
<li><option>パブリック・ポートの公開</option><p>この構成の場合は、ポート 8080 がパブリックに公開されます。
IP アドレスはコンテナーにバインドされません。
インターネットからアプリにアクセスできるようにするには、コンテナーの作成後、<xref href="container_cli_ips.dita" format="dita">パブリック IP アドレスをバインド</xref>します。
</p><codeblock>ports:
  - "8080"</codeblock></li>
<li><option>既存のパブリック IP アドレスのバインド</option><p>この構成の場合は、ポート 8080 がパブリックに公開され、作成されたコンテナーに既存のパブリック IP アドレスが自動的にバインドされます。
<note>使用する IP アドレスは、スペースに割り振る必要があり、使用できなければなりません。
この IP アドレスが既にコンテナーにバインドされている場合は、まず<xref href="container_cli_ips_unbind.dita" format="dita">それをアンバインドする</xref>必要があります。
</note></p><codeblock>ports:
  - "<varname>IP_ADDRESS</varname>:8080:8080"</codeblock></li></ul></section>
<section id="volumes"><title><ph><codeph>volumes</codeph></ph></title><uicontrol>volumes</uicontrol> パラメーターは、既存のボリュームをサービスに追加する場合に使用します。
<note><filepath>docker-compose.yml</filepath> ファイルのサービス定義にボリュームを追加する前に、そのボリュームを作成しておく必要があります。詳しくは、<xref href="container_volumes_cli.dita" format="dita"></xref> のトピックを参照してください。ボリュームをコンテナーにマウントする前にボリュームにデータを設定しておく方法については、<xref href="container_volumes_mount.dita" format="dita"></xref>を参照してください。
</note><dl>
<dlentry>
<dt>例</dt>
<dd>次の例は、<varname>my_volume</varname> という名前の外部ボリュームを lets-chat サービスに追加する <filepath>docker-compose.yml</filepath> ファイルの例を示しています。このボリュームは、<filepath>/tmp/data</filepath> フォルダーにマウントされていて、読み取り権限と書き込み権限が設定されています。
<codeblock>version: '2'
#Name of your service
lets-chat:
  #container image that is used to run the lets-chat service. Replace &lt;my_namespace&gt; with the name of your namespace.
  image: registry.<keyword conref="cloudoeconrefs.dita#cloudoeconrefs/domainname"></keyword>/<varname>&lt;my_namespace&gt;</varname>/lets-chat
  #You need to first create your volume before you can add it
  volumes:
   - <varname>my_volume</varname>:<filepath>/tmp/data</filepath>:rw

#declare volume as external
volumes:
  my_volume:
    external: true</codeblock></dd></dlentry></dl></section></conbody></concept>

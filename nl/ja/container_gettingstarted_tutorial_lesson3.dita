<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE tutorialLesson PUBLIC "-//IBM//DTD DITA Tutorial Lesson//EN"
 "tutorialLesson.dtd">
<tutorialLesson id="container_gettingstarted_tutorial_lesson_3" xml:lang="ja-jp" class="- topic/topic task/task tutorialLesson/tutorialLesson ">
<title>レッスン 3: コンテナーのビルドとデプロイ</title>
<titlealts>
<searchtitle>チュートリアル・レッスン 3: <keyword conref="cloudoeconrefs.dita#cloudoeconrefs/containerlong"></keyword> でコンテナーをビルドしてデプロイする</searchtitle></titlealts>
<shortdesc>Lets-Chat メッセージング Web アプリをデプロイするために必要なイメージが、<keyword conref="cloudoeconrefs.dita#cloudoeconrefs/bluemix_short"></keyword> イメージ・レジストリー内に作成されています。このレッスンでは、コンテナーをビルドし、それらをリンクし、アプリにパブリック IP アドレスを割り当てます。
</shortdesc>
<prolog>
<metadata>
<keywords><indexterm>コンテナー</indexterm><indexterm>チュートリアル</indexterm><indexterm>単一コンテナー</indexterm><indexterm>cli</indexterm><indexterm>デプロイ</indexterm><indexterm>IBM Containers</indexterm></keywords></metadata></prolog>
<taskbody>
<steps>
<step>
<cmd>mongo イメージからコンテナーを実行します。
</cmd>
<info>
<codeblock><ph conref="container_conref.dita#links/command_prefix"></ph> run --name <varname>lc-mongo</varname> -p <varname>27017</varname> -m <varname>128</varname> registry.<varname props="keyref(DomainName)">domain_name</varname>/<varname>$your_namespace</varname>/mongo</codeblock></info>
<info>
<table frame="all" colsep="1" rowsep="1" id="table_lqp_hkm_2v">
<tgroup cols="2"><colspec colnum="1" colname="c1" colwidth="0.5*"></colspec><colspec colnum="2" colname="c2" colwidth="1.75*"></colspec>
<thead>
<row>
<entry namest="c1" nameend="c2"><ph conref="container_conref.dita#images/more_info"></ph> このコマンドの構成要素について</entry></row></thead>
<tbody>
<row>
<entry>run</entry>
<entry><p> 指定されたイメージからコンテナーを作成する run コマンド。
</p></entry></row>
<row>
<entry>--name</entry>
<entry>コンテナーの名前を定義します。
ここでは、コンテナーの名前を <varname>lc-mongo</varname> としました。
</entry></row>
<row>
<entry>-p</entry>
<entry><ph conref="container_cli_reference_cfic.dita#container_cli_reference_cfic/port_desc"></ph> ここでは、Dockerfile の中でポート 27017 が指定されているため、ポート 27017 を公開します。
</entry></row>
<row>
<entry>-m</entry>
<entry><ph conref="container_cli_reference_cfic.dita#container_cli_reference_cfic/memory_desc"></ph></entry></row></tbody></tgroup></table></info></step>
<step>
<cmd>コンテナーが実行中であることを確認します。
</cmd>
<info>次のステップに進む前に、ステータスが実行中に更新されるまで待ちます。
必要なら、コンテナーのステータスが実行中になるまで、<codeph><ph conref="container_conref.dita#links/command_prefix"></ph> ps</codeph> を実行することができます。</info>
<info>
<codeblock><ph conref="container_conref.dita#links/command_prefix"></ph> ps</codeblock>

<screen>$<ph conref="container_conref.dita#links/command_prefix"></ph> ps
CONTAINER ID        IMAGE                                           COMMAND             CREATED             STATUS                PORTS               NAMES
9f73abc2-9a1        registry.<varname props="keyref(DomainName)">domain_name</varname>/<varname>$your_namespace</varname>/<varname>mongo</varname>:latest       <q></q>                  40 seconds ago          Running 5 seconds ago    27017/tcp           lc-mongo</screen></info></step>
<step>
<cmd><varname>mongo</varname> コンテナーが実行中の状態になってから、<varname>lets-chat</varname> コンテナーを実行します。</cmd>
<info>
<codeblock><ph conref="container_conref.dita#links/command_prefix"></ph> run --name <varname>lets-chat</varname> --link lc-mongo:mongo -p <varname>8080</varname> -m <varname>128</varname> registry.<varname props="keyref(DomainName)">domain_name</varname>/<varname>$your_namespace</varname>/<varname>lets-chat</varname></codeblock></info>
<info>
<table frame="all" colsep="1" rowsep="1" id="table_o22_ttv_4x">
<tgroup cols="2"><colspec colnum="1" colname="c1" colwidth="0.5*"></colspec><colspec colnum="2" colname="c2" colwidth="1.75*"></colspec>
<thead>
<row>
<entry namest="c1" nameend="c2"><ph conref="container_conref.dita#images/more_info"></ph> このコマンドの構成要素について</entry></row></thead>
<tbody>
<row>
<entry>--link</entry>
<entry><p><codeph>lc-mongo</codeph> などのデータベース・コンテナーを別のコンテナーにリンクすることは、<codeph>--link</codeph> の一般的な用途の 1 つです。
<codeph>--link</codeph> フラグにより、<varname>lets-chat</varname> コンテナー上に <varname>lc-mongo</varname> コンテナーのためのホスト・エントリーが作成され、それによりコンテナー相互の通信が可能になります。
</p></entry></row></tbody></tgroup></table></info></step>
<step>
<cmd>コンテナーを表示します。
</cmd>
<info>
<codeblock><ph conref="container_conref.dita#links/command_prefix"></ph> ps</codeblock>

<screen>$<ph conref="container_conref.dita#links/command_prefix"></ph> ps
CONTAINER ID        IMAGE                                           COMMAND             CREATED             STATUS                  PORTS                         NAMES
68f6536a-82f        registry.<varname props="keyref(DomainName)">domain_name</varname>/<varname>$your_namespace</varname>/<varname>lets-chat</varname>:latest   <q></q>                  3 days ago          Running 6 seconds ago   8080/tcp                      <varname>lets-chat</varname>
9f73abc2-9a1        registry.<varname props="keyref(DomainName)">domain_name</varname>/<varname>$your_namespace</varname>/<varname>mongo</varname>:latest       <q></q>                  3 days ago          Running 3 days ago      27017/tcp                     <varname>lc-mongo</varname></screen></info></step>
<step>
<cmd>使用可能な IP アドレスのリストを表示します。
</cmd>
<info>IP アドレスをバインドすることにより、単一コンテナー Web アプリがインターネット経由でアクセス可能になります。
</info>
<info>
<codeblock><ph conref="container_conref.dita#links/command_prefix"></ph> ips</codeblock></info></step>
<step importance="optional">
<cmd>IP アドレスがリストされない場合は、IP アドレスを要求します。
</cmd>
<info>
<codeblock><ph conref="container_conref.dita#links/command_prefix"></ph> ip-request</codeblock></info></step>
<step>
<cmd>使用可能な IP アドレスを選択し、それを <varname>lets-chat</varname> コンテナーにバインドします。
</cmd>
<info>IP アドレスのすべてが既にバインド済みの場合、まず <xref href="container_cli_reference_cfic.dita#container_cli_reference_cfic/ip_unbind" format="dita" scope="local">unbind an IP address</xref> を実行する必要があります。
このサンプル IP アドレスを、ご使用の Bluemix 組織で利用可能な IP アドレスに置き換えてください。</info>
<info>
<codeblock><ph conref="container_conref.dita#links/command_prefix"></ph> ip-bind <varname>192.0.2.100</varname> lets-chat</codeblock></info></step>
<step>
<cmd>IP アドレスをバインドする処理が終了するのを待ちます。</cmd>
<info>
<codeblock><ph conref="container_conref.dita#links/command_prefix"></ph> inspect lets-chat</codeblock>IP アドレスがコンテナーにバインドされると、その IP アドレスは CLI 出力の <uicontrol>Networks</uicontrol> セクションに <uicontrol>PublicIpAdress</uicontrol> としてリストされるようになります。
<screen><ph conref="container_conref.dita#links/command_prefix"></ph> inspect lets-chat
...
<q>PortMapping</q>: null,
<q>Ports</q>: {
    <q>8080/tcp</q>: [
      {
         <q>HostIp</q>: <q>192.0.2.100</q>,
         <q>HostPort</q>: <q>8080</q>
      }
    ]
 },
 <q>PublicIpAddress</q>: <q>192.0.2.100</q>
...</screen></info></step>
<step>
<cmd>稼働中の Web アプリを確認します。
バインド済みのパブリック IP アドレス (ポートを含む) を、Web ブラウザーに貼り付けます。
</cmd>
<info>
<codeblock>http://<varname>192.0.2.100</varname>:8080</codeblock></info>
<info>
<p><image href="images/lets-chat_screenshot.jpg" alt="Lets-Chat Web アプリにサインインします。"></image></p></info></step>
<step>
<cmd importance="optional">Lets-Chat でアカウントを作成し、ログインして、IBM Containers 内で Web アプリが実行されることを確認します。
</cmd>
<info>
<p><image href="images/lets-chat-room.png" alt="lets-chat room"></image></p></info></step>
<step>
<cmd importance="optional">コンテナーを停止します。</cmd>
<info>コンテナーによってリソースが消費されないようにするには、それらを停止して削除します。
</info>
<info>
<codeblock><ph conref="container_conref.dita#links/command_prefix"></ph> stop <varname>lets-chat</varname> <varname>lc-mongo</varname></codeblock>

<codeblock><ph conref="container_conref.dita#links/command_prefix"></ph> rm <varname>lets-chat</varname> <varname>lc-mongo</varname></codeblock></info></step></steps>
<result id="quiz">知識を試してみましょう!
チュートリアルを完了したので、<xref href="http://bluemix-quizzes.mybluemix.net/containers/single_containers_gettingstarted_tutorial/quiz.php" format="html" scope="external">学習結果を確認するためのクイズをしてみましょう</xref>。
</result>
<postreq><p> 次に何をしますか?
他にもまだ多くの <keyword conref="cloudoeconrefs.dita#cloudoeconrefs/containerlong"></keyword> 機能をこのチュートリアルに適用することができます。
<ul>
<li>単一コンテナーを<xref href="container_group_ui.dita" format="dita" scope="local">高可用性コンテナー・グループ</xref>に置き換えて、自動リカバリー (使用不可のコンテナーを自動で置換する) を有効にすることができます。</li>
<li><xref href="container_volumes_ui.dita" format="dita" scope="local">ストレージ・ボリューム</xref> を作成して、mongo コンテナーと lets-chat コンテナーにマウントすることで、コンテナーが再始動してもコンテナー・データが永続するように、またプライベート・ネットワーク内の複数のコンテナーからアクセスできるようにします。</li>
<li><xref href="va/va_index.html#va_reviewing" format="html" scope="peer">Vulnerability Advisor</xref> (レジストリー中のイメージをスキャンして潜在的脆弱性を検出することにより、組織の安全性を保ちます) で、イメージを確認します。
</li></ul>これら以外にも、さまざまな機能があります。
今すぐ試してみてください。
</p></postreq></taskbody></tutorialLesson>

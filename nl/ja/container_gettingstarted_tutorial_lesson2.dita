<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE tutorialLesson PUBLIC "-//IBM//DTD DITA Tutorial Lesson//EN"
 "tutorialLesson.dtd">
<tutorialLesson id="container_gettingstarted_tutorial_lesson_2" xml:lang="ja-jp" class="- topic/topic task/task tutorialLesson/tutorialLesson ">
<title>レッスン 2: プライベート <keyword conref="cloudoeconrefs.dita#cloudoeconrefs/bluemix_short"></keyword> イメージ・レジストリーへのイメージの追加</title>
<titlealts>
<searchtitle>チュートリアル・レッスン 2: <keyword conref="cloudoeconrefs.dita#cloudoeconrefs/containerlong"></keyword> のイメージ・レジストリーにイメージを追加する</searchtitle></titlealts>
<shortdesc>このレッスンでは、プライベート・イメージ・レジストリーにイメージを追加します。Docker Hub からイメージをコピーする方法と、Dockerfile を作成する方法の 2 種類の方法で追加します。独自の Dockerfile を作成する場合は、イメージに独自のコマンドを追加することができます。
その場合は、そのイメージから立ち上げられるすべてのコンテナーにそれらのコマンドが含まれることになります。
コンテナーのメリットの 1 つは、イメージによってソースが制御された状態が保たれることにより、組織内のだれもが、一貫した操作環境でコンテナーをビルドできるようになることです。
</shortdesc>
<prolog>
<metadata>
<keywords><indexterm>コンテナー</indexterm><indexterm>チュートリアル</indexterm><indexterm>単一コンテナー</indexterm><indexterm>cli</indexterm><indexterm>イメージ</indexterm><indexterm>IBM Containers</indexterm></keywords></metadata></prolog>
<taskbody>
<context>以下のイメージがこのレッスンで使用されます。
イメージや Docker Hub のその他の情報は Dockerfile で確認できます。
<ul>
<li><xref href="https://hub.docker.com/_/mongo/" format="html" scope="external">MongoDB</xref></li>
<li><xref href="https://hub.docker.com/r/sdelements/lets-chat/" format="html" scope="external">Let's Chat</xref></li></ul></context>
<steps>
<step>
<cmd>MongoDB イメージを Docker Hub からプライベート <keyword conref="cloudoeconrefs.dita#cloudoeconrefs/bluemix_short"></keyword> イメージ・レジストリーにコピーします。</cmd>
<info>MongoDB イメージは、データを保管するために使用されます。MongoDB コンテナーをデータ保管に使用できるとはいえ、このコンテナーに書き込まれたデータは、コンテナーが削除されたときにすべて失われます。コンテナーに書き込まれたデータを永続化するには、コンテナーを実行するときにボリュームをマウントする必要があります。</info>
<info>
<p>変数置換を設定していない場合、<codeph><varname>$your_namespace</varname></codeph> は、レッスン 1 で作成した名前空間に置き換えてください。
名前空間を確認する必要がある場合は、<codeph><ph conref="container_conref.dita#links/command_prefix"></ph> namespace get</codeph> を実行します。</p></info>
<info>
<codeblock><ph conref="container_conref.dita#links/command_prefix"></ph> cpi <varname>mongo</varname> registry.<varname props="keyref(DomainName)">domain_name</varname>/<varname>$your_namespace</varname>/<varname>mongo</varname></codeblock></info>
<info>初期出力コードは、以下の例のようになります。
<screen>$ <ph conref="container_conref.dita#links/command_prefix"></ph> cpi mongo registry.<varname props="keyref(DomainName)">domain_name</varname>/<varname>$your_namespace</varname>/<varname>mongo</varname>
Sending build context to Docker daemon 2.048 kB
Step 1 : FROM mongo
 ---&gt; 32427ae49eff
Successfully built 32427ae49eff
The push refers to a repository [registry.<varname props="keyref(DomainName)">domain_name</varname>/<varname>$your_namespace</varname>/<varname>mongo</varname>] (len: 1)</screen></info>
<info>バックグラウンドで、mongo イメージが Docker Hub から Bluemix イメージ・レジストリーにコピーされます。<codeph>cpi</codeph> コマンドの実行には数分かかることがあります。
完了時の出力の全体は、以下の例のようになります。
<screen>$ <ph conref="container_conref.dita#links/command_prefix"></ph> cpi mongo registry.<varname props="keyref(DomainName)">domain_name</varname>/<varname>$your_namespace</varname>/<varname>mongo</varname>
Sending build context to Docker daemon 2.048 kB
Step 1 : FROM mongo
 ---&gt; 32427ae49eff
Successfully built 32427ae49eff
The push refers to a repository [registry.<varname props="keyref(DomainName)">domain_name</varname>/<varname>$your_namespace</varname>/<varname>mongo</varname>] (len: 1)
32427ae49eff: Pushed
424ec4bd7fc4: Pushed
9e3490ec0722: Pushed
166aa7bca9c1: Pushed
c79deeebd6f0: Pushed
c181e50c0e8b: Pushed
438e27bd44bf: Pushed
af6f43fa45bb: Pushed
605e5767a4ac: Pushed
33e8076f6b28: Pushed
e63969171eec: Pushed
latest: digest: sha256:ab092d78d331337cf6cf0ceeda28489f5e154b1403ca1220e9de6b417
b7cfb95 size: 32158</screen></info>
<info>
<table frame="all" colsep="1" rowsep="1" id="table_sdf_nkm_2v">
<tgroup cols="2"><colspec colnum="1" colname="c1" colwidth="100pt"></colspec><colspec colnum="2" colname="c2"></colspec>
<thead>
<row>
<entry namest="c1" nameend="c2"><ph conref="container_conref.dita#images/more_info"></ph> このコマンドの構成要素について</entry></row></thead>
<tbody>
<row>
<entry><codeph>cpi</codeph></entry>
<entry>コピー・コマンド。
</entry></row>
<row>
<entry><codeph>mongo</codeph></entry>
<entry>ソース・リポジトリーと名前。
この例では、イメージの名前は <varname>mongo</varname> であり、このイメージは Docker Hub 内にあるため、これ以上のリポジトリー定義は不要です。
</entry></row>
<row>
<entry><codeph>registry.<varname props="keyref(DomainName)">domain_name</varname>/<varname>$your_namespace</varname>/<varname>mongo</varname></codeph></entry>
<entry>宛先レジストリー・パス。固有の名前空間と宛先イメージの名前が含まれます。この例においてイメージの名前は <varname>mongo</varname> としていますが、プライベート・レジストリー内の任意のイメージ名を選択できます。CLI でこのイメージの処理を実行する際には、次のように、フルパスでイメージを指定します。 <codeph>registry.<varname props="keyref(DomainName)">domain_name</varname>/<varname>$your_namespace</varname>/<varname>mongo</varname></codeph></entry></row></tbody></tgroup></table></info></step>
<step>
<cmd>Dockerfile 用の新しいローカル・フォルダーを作成し、そこに移動します。
</cmd>
<info>これで、<codeph>cpi</codeph> コマンドによりイメージをレジストリーに追加することができました。次は、Dockerfile から別のイメージを作成してみましょう。Dockerfile を使用すると、ローカルにイメージをビルドして、Web アプリに必要な付加的なコマンドや変数を追加することができます。
それらのコマンドのいくつかはコンテナーのビルド時に追加できますが、その場合は、同じイメージの複数バージョンのフラグメントが発生することがあります。
Dockerfile にコマンドを追加すると、このイメージからビルドされるすべてのコンテナーにそれらのコマンドが含まれるようになります。
</info>
<info>
<codeblock>mkdir wrapper &amp;&amp; cd wrapper</codeblock></info></step>
<step>
<cmd><filepath>wrapper</filepath> フォルダー内に Dockerfile を作成します。
</cmd>
<info>このコマンドにより Dockerfile が作成され、指定された <varname>FROM</varname> コマンド (これはすべての Dockerfile に必要となります) が追加されます。
<varname>FROM</varname> は、親イメージが何かを示すものです。
ここでは、<varname>lets-chat</varname> イメージを親として使用しています。
</info>
<info>
<codeblock>echo <q>FROM sdelements/lets-chat:latest</q> &gt; Dockerfile</codeblock></info></step>
<step>
<cmd>現行ディレクトリー内のファイルのリストを表示することにより、Dockerfile が作成されていることを確認します。
</cmd>
<info>
<codeblock>ls</codeblock></info></step>
<step>
<cmd>Dockerfile に、ネットワーク遅延コマンドを追加します。
</cmd>
<info>lets-chat コンテナーが開始されると、<keyword conref="cloudoeconrefs.dita#cloudoeconrefs/containerlong"></keyword> はプライベート・コンテナー・ネットワークをセットアップし、コンテナーにプライベート IP アドレスを割り当てます。
lets-chat アプリは、その開始時にアクティブなネットワーク接続を必要とします。
ネットワーク遅延を加えると、<keyword conref="cloudoeconrefs.dita#cloudoeconrefs/containerlong"></keyword> ネットワーキングはアプリが開始される前に余裕をもって完了するようになります。
</info>
<info>
<codeblock>echo <q>CMD (sleep 60; npm start)</q> &gt;&gt; Dockerfile</codeblock></info></step>
<step>
<cmd>イメージをビルドし、タグ付けします。
</cmd>
<info>コマンドの末尾に <codeph>.</codeph> をつけることを忘れないようにしてください。
このピリオドは、現行のローカル・フォルダーから必要な Dockerfile を検索するよう Docker に指示するものです。
</info>
<info>
<codeblock><ph conref="container_conref.dita#links/command_prefix"></ph> build -t registry.<varname props="keyref(DomainName)">domain_name</varname>/<varname>$your_namespace</varname>/lets-chat .</codeblock></info></step>
<step>
<cmd><varname>mongo</varname> イメージと <varname>lets-chat</varname> イメージが <keyword conref="cloudoeconrefs.dita#cloudoeconrefs/bluemix_short"></keyword> イメージ・レジストリー内にあることを確認します。</cmd>
<info>
<codeblock><ph conref="container_conref.dita#links/command_prefix"></ph> images</codeblock>

<screen>$ <ph conref="container_conref.dita#links/command_prefix"></ph> images
REPOSITORY                                                  TAG                 IMAGE ID            CREATED             SIZE
registry.<varname props="keyref(DomainName)">domain_name</varname>/<varname>$your_namespace</varname>/<varname>mongo</varname>                          latest              8de059ee71fc        2 minutes ago         317.4 MB
registry.<varname props="keyref(DomainName)">domain_name</varname>/<varname>$your_namespace</varname>/<varname>lets-chat </varname>                      latest              d4de00f58363        5 minutes ago          0 B
registry.<varname props="keyref(DomainName)">domain_name</varname>/ibm-node-strong-pm                  latest              322b9ca7b2dc        2 weeks ago         616.4 MB
registry.<varname props="keyref(DomainName)">domain_name</varname>/ibmliberty                          latest              6595ea483bf5        2 weeks ago         552.8 MB
registry.<varname props="keyref(DomainName)">domain_name</varname>/ibmnode                             latest              b2c351248227        2 weeks ago         472.4 MB
registry.<varname props="keyref(DomainName)">domain_name</varname>/ibmnode                             v4                  b2c351248227        2 weeks ago         472.4 MB
registry.<varname props="keyref(DomainName)">domain_name</varname>/ibmnode                             v1.1                7d11220193d6        2 weeks ago         449.2 MB
registry.<varname props="keyref(DomainName)">domain_name</varname>/ibmnode                             v1.2                84efce0c747b        2 weeks ago         465.2 MB</screen></info></step></steps>
<result><p>これで、必要なイメージがプライベート <keyword conref="cloudoeconrefs.dita#cloudoeconrefs/bluemix_short"></keyword> イメージ・レジストリー内に作成されました。Docker Hub イメージが正常にコピーされ、Dockerfile が作成され、新しいイメージがビルドされ、そのイメージが <keyword conref="cloudoeconrefs.dita#cloudoeconrefs/bluemix_short"></keyword> イメージ・レジストリーにプッシュされました。</p>
<p>次のレッスンでは、コンテナーを作成し、それらをリンクし、Web アプリをデプロイします。
</p></result></taskbody></tutorialLesson>

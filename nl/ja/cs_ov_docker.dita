<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//IBM//DTD DITA IBM Concept//EN" "ibm-concept.dtd">
<concept id="cs_ov_docker" xml:lang="ja-jp">
<title>Docker コンテナー</title>
<titlealts>
<navtitle>Docker コンテナー</navtitle></titlealts>
<shortdesc>Docker は 2013 年に dotCloud によってリリースされたオープン・ソース・プロジェクトです。既存の Linux コンテナー (LXC) 技術のフィーチャーに基づき構築された Docker は、アプリを素早く作成、テスト、デプロイ、拡張するために使用できるソフトウェア・プラットフォームとなっています。
Docker は、アプリの実行に必要なすべてのエレメントを含んだコンテナーと呼ばれる標準化されたユニットに、ソフトウェアをパッケージ化します。
</shortdesc>
<conbody>
<p>ここでは、次の概念について解説して、Docker の基本的な概念を紹介します。</p>
<dl>
<dlentry>
<dt>コンテナー</dt>
<dd>コンテナーとは、アプリとそのすべての従属物をパッケージ化して、アプリを変更せずに環境間で移動して実行できるようにするための標準的な手段です。仮想マシンとは異なり、コンテナーはデバイス、そのオペレーティング・システム、およびその基礎となるハードウェアを仮想化しません。
アプリのコード、ランタイム、システム・ツール、ライブラリー、設定値のみがコンテナー内にパッケージ化されます。
コンテナーは、デプロイ先のコンピュート・ホスト上で分離したプロセスとして実行され、ホストのオペレーティング・システムとそのハードウェア・リソースを共用します。
このため、コンテナーは仮想マシンより軽量で移植しやすく、効率的です。
</dd></dlentry>
<dlentry>
<dt>イメージ </dt>
<dd>各コンテナーは Docker イメージに基づいており、イメージのインスタンスと見なされます。イメージは Dockerfile (イメージをビルドするための指示が入ったファイル) と、ビルド成果物 (アプリ、アプリの構成、およびその従属関係) から構築されます。
</dd></dlentry>
<dlentry>
<dt>レジストリー</dt>
<dd>イメージ・レジストリーは Docker イメージを格納、取得、共有する場所です。レジストリーに格納されたイメージは、だれでもアクセスできるものもありますし (パブリック・レジストリー)、小さなグループのユーザーだけにアクセスを限定したものもあります (プライベート・レジストリー)。
<keyword conref="cloudoeconrefs.dita#cloudoeconrefs/containerlong"></keyword> では、Docker や Kubernetes を使用する手始めに、最初のコンテナー化アプリをクラスター内に作成するのに使用できる
<varname>ibmliberty</varname> などのパブリック・イメージを提供しています。
エンタープライズ・アプリケーションを作成する場合は、無許可ユーザーが勝手にイメージを使用したり変更したりすることがないように、Bluemix で提供されているものなどのプライベート・レジストリーを使用してください。
<p>イメージからコンテナーをデプロイする場合は、そのイメージがパブリックまたはプライベートのイメージ・レジストリーに格納されていることを確認する必要があります。
</p></dd></dlentry></dl></conbody>
<concept id="concept_jcd_4dz_rz">
<title>コンテナーを使用する主な利点</title>
<conbody>
<dl>
<dlentry>
<dt>コンテナーは迅速</dt>
<dd>コンテナーは、開発チームおよび実動チームのための、標準化された環境を提供することにより、システム管理を簡素化します。エンジンの軽量ランタイムにより、需要の変化に応じて、素早いスケールアップおよびスケールダウンが可能です。コンテナーは、さまざまなオペレーティング・システム・プラットフォームおよび基礎となるインフラストラクチャーを管理する複雑さをなくすのに役立ちます。コンテナーは、どのインフラストラクチャーでもすべてのアプリを素早く確実にデプロイして実行するのに役立ちます。</dd></dlentry>
<dlentry>
<dt>コンテナーは小さい</dt>
<dd>1 つの仮想マシンで必要とされる量のスペースに、複数のコンテナーを入れることができます。
</dd></dlentry>
<dlentry>
<dt>コンテナーはポータブル</dt>
<dd>別のイメージをベースとして使用して、別のコンテナー用のイメージをビルドします。イメージの処理の大部分の作業は他の人にまかせ、そのイメージを自分の用途に合わせて微調整します。ステージング環境から実稼働環境に素早くアプリのコードをマイグレーションすることもできます。マイグレーション・プロセスは、Delivery Pipeline または UrbanCode Deploy などのツールで自動化できます。</dd></dlentry></dl></conbody></concept></concept>

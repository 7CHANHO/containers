<?xml version="1.0" encoding="UTF-8"?>
<!--Arbortext, Inc., 1988-2011, v.4002-->
<!DOCTYPE task PUBLIC "-//IBM//DTD DITA IBM Task//EN"
 "ibm-task.dtd">
<task id="container_single_pipeline_build" xml:lang="ja-jp">
<title><keyword conref="cloudoeconrefs.dita#cloudoeconrefs/deliverypipeline"></keyword> を使用したコンテナーのビルド・ステージの作成</title>
<titlealts>
<navtitle>ビルド・ステージの作成</navtitle>
<searchtitle><keyword conref="cloudoeconrefs.dita#cloudoeconrefs/deliverypipeline"></keyword> と <keyword conref="cloudoeconrefs.dita#cloudoeconrefs/containerlong"></keyword> を使用したコンテナーのビルド・ステージの作成</searchtitle></titlealts>
<shortdesc id="shortdesc"><keyword conref="cloudoeconrefs.dita#cloudoeconrefs/containerlong"></keyword> には、ビルド・サービスが組み込まれています。ビルド・サービスは、ソース・コードを取り込み、Docker イメージをビルドして、これをコンテナー・レジストリーに公開します。<keyword conref="cloudoeconrefs.dita#cloudoeconrefs/contdelivery_full"></keyword> の一部である <keyword conref="cloudoeconrefs.dita#cloudoeconrefs/deliverypipeline"></keyword> は、コンテナー・ビルド・サービスを使用するビルド・ジョブを備えています。このビルド・ジョブは、リポジトリー内のソース・コードを取得し、このコードから Docker イメージをビルドして、ビルド番号と一致するようにこのイメージをバージョニング (タグ付け) し、結果として得られたイメージを <keyword conref="cloudoeconrefs.dita#cloudoeconrefs/bluemix_short"></keyword> 上にある組織の <keyword conref="cloudoeconrefs.dita#cloudoeconrefs/containerlong"></keyword> レジストリーにプッシュします。
これにより組織のメンバーは、結果として得られたイメージを組織内のスペースにデプロイできます。</shortdesc>
<prolog>
<metadata>
<keywords><indexterm>単一コンテナー</indexterm><indexterm>デリバリー・パイプライン</indexterm><indexterm>継続的なデリバリー</indexterm><indexterm>イメージ</indexterm><indexterm>build</indexterm><indexterm>IBM Containers</indexterm><indexterm>コンテナー</indexterm></keywords></metadata></prolog>
<taskbody>
<prereq id="prereq"> <p>始める前に、以下の情報を考慮してください。<ul>
<li><keyword conref="cloudoeconrefs.dita#cloudoeconrefs/contdelivery_short"></keyword> 資料で <xref href="../services/ContinuousDelivery/pipeline_about.html" format="html" scope="peer"><keyword conref="cloudoeconrefs.dita#cloudoeconrefs/deliverypipeline"></keyword>について</xref>のトピックを参照して、ビルド、ステージ、基本的なパイプライン機能についてよく理解します。</li>
<li><keyword conref="cloudoeconrefs.dita#cloudoeconrefs/bluemix_short"></keyword> <wintitle>カタログ</wintitle>をチェックすることによって、組織のプライベート・イメージ・レジストリー内にある、コンテナーで使用する既存のイメージを特定します。</li>
<li>サービスをコンテナーにバインドすることが分かっている場合は、ブリッジとして使用するアプリを作成します。詳しくは、<xref href="container_pipeline_binding.dita" type="task" format="dita" scope="local"><keyword conref="cloudoeconrefs.dita#cloudoeconrefs/deliverypipeline"></keyword> を使用したサービスとコンテナーのバインド</xref>を参照してください。</li></ul></p> </prereq>
<steps id="steps">
<stepsection><keyword conref="cloudoeconrefs.dita#cloudoeconrefs/deliverypipeline"></keyword> から Docker イメージをビルドします。</stepsection>
<step>
<cmd>ツールチェーンに関連付けられている Git リポジトリーのルート・ディレクトリー内に Dockerfile を作成して、リポジトリーにコミットします。</cmd></step>
<step>
<cmd>ツールチェーンの「概要」ページから、<uicontrol>「<keyword conref="cloudoeconrefs.dita#cloudoeconrefs/deliverypipeline"></keyword>」</uicontrol>をクリックします。</cmd></step>
<step>
<cmd>ビルド・ステージを作成します。</cmd><substeps>
<substep>
<cmd><uicontrol>「ステージの追加」</uicontrol>をクリックします。</cmd></substep>
<substep>
<cmd>ステージに名前を付けます。</cmd>
<stepxmp>例えば、<codeph><varname>Build</varname></codeph> と指定します。</stepxmp></substep>
<substep>
<cmd><uicontrol>「入力タイプ」</uicontrol>で<uicontrol>「Git リポジトリー」</uicontrol> を選択します。</cmd></substep>
<substep>
<cmd>その他のフィールドについて、値を確認して、必要に応じて更新します。</cmd></substep>
<substep>
<cmd><uicontrol>「ジョブ」</uicontrol>タブをクリックします。</cmd></substep></substeps></step>
<step>
<cmd>ビルド・ステージでビルド・ジョブを作成します。</cmd><substeps>
<substep>
<cmd><uicontrol>「ジョブ」</uicontrol>タブで、<uicontrol>「ジョブの追加」</uicontrol>をクリックします。</cmd></substep>
<substep>
<cmd><uicontrol>「ビルド」</uicontrol>ジョブ・タイプを選択します。</cmd></substep>
<substep>
<cmd><uicontrol>「ビルダー・タイプ」</uicontrol>には、<uicontrol>「<keyword conref="cloudoeconrefs.dita#cloudoeconrefs/bluemix_short"></keyword> 上の IBM Containers (IBM Containers on Bluemix)」</uicontrol>を選択します。</cmd></substep>
<substep>
<cmd>必要な場合、<keyword conref="cloudoeconrefs.dita#cloudoeconrefs/bluemix_short"></keyword> のターゲット、組織、およびスペースを更新します。
</cmd></substep>
<substep>
<cmd><uicontrol>「キャッシュに入れられたレイヤーの使用 (Use cached layers)」</uicontrol>では、他のソースからコンテンツを動的にプルするレイヤーのリフレッシュを強制する必要がある場合、このフィールドをクリアします。</cmd>
<stepxmp>
<p>例えば、<codeph>Dockerfile</codeph> に <codeph>apt-get install</codeph> または <codeph>wget</codeph> コマンドが含まれている場合は、<uicontrol>「キャッシュに入れられたレイヤーの使用 (Use cached layers)」</uicontrol>チェック・ボックスをクリアして、これらの動的依存関係がビルドごとに収集されるようにします。</p></stepxmp>
<info>
<note><uicontrol>「キャッシュに入れられたレイヤーの使用 (Use cached layers)」</uicontrol>フィールドをクリアした場合、
キャッシュに入れられたレイヤーがイメージのビルド時に使用されないため、ビルド時間が長くなります。
</note></info></substep>
<substep>
<cmd><uicontrol>「イメージ名」</uicontrol>フィールドに、ビルドするイメージの名前を入力します。Docker 命名規則に従うために、小文字、数字、およびハイフン (-) のみを使用してください。</cmd>
<info>イメージは、ビルドされるときに、イメージ名とビルド番号でタグ付けされます。</info>
<stepxmp>例えば、イメージ名として <codeph>myappimage</codeph> を入力した場合、ビルド番号 4 の結果のイメージの名前は、<codeph>myappimage:4</codeph> となります。</stepxmp></substep>
<substep>
<cmd>Dockerfile がプロジェクトのルート・ディレクトリー内にない場合、Build Script セクションで、Dockerfile へのパスを以下の個所に追加します。</cmd>
<info>
<ol>
<li>Run unit tests セクションの前に、ディレクトリー変更コマンドと共にフォルダー名を追加します。<p><codeblock>cd <varname>&lt;folder&gt;</varname></codeblock></p></li>
<li><varname>${WORKSPACE}</varname> 変数が表示されているすべての個所に、フォルダー名を付加します。<varname>${WORKSPACE}</varname> 変数は自動的にプロジェクトのルート・ディレクトリーを検出します。<p>例<codeblock>BUILD_COMMAND="build --pull --tag ${FULL_REPOSITORY_NAME} ${WORKSPACE}/<varname>&lt;folder&gt;</varname>"</codeblock></p></li></ol></info></substep></substeps></step>
<step>
<cmd><uicontrol>「保存」</uicontrol>をクリックします。</cmd></step>
<step>
<cmd><uicontrol>「ステージの実行」</uicontrol>アイコンをクリックして、ステージでエラーを出さずにビルドが行われることを確認します。</cmd>
<info>ビルドが失敗した場合、ログを確認してエラーを訂正します。ステージが失敗せずに完了した場合、組織のイメージ・レジストリーを調べて、イメージがビルドされたことを確認します。</info></step></steps></taskbody><?tm 1435623327 0?></task>

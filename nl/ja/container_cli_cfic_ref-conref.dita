<?xml version="1.0" encoding="UTF-8"?>
<!--Arbortext, Inc., 1988-2011, v.4002-->
<!DOCTYPE reference PUBLIC "-//IBM//DTD DITA IBM Reference//EN"
 "ibm-reference.dtd">
<reference id="container_cli_reference_cfic" xml:lang="ja-jp">
<title><ph conref="container_cli_reference_cfic.dita#container_cli_reference_cfic/title"><keyword conref="cloudoeconrefs.dita#cloudoeconrefs/containerlong"></keyword> plug-in (<ph conref="container_conref.dita#links/command_prefix"></ph>) commands for managing containers</ph></title>
<titlealts conref="container_cli_reference_cfic.dita#container_cli_reference/titlealts">
<navtitle>CLI reference</navtitle>
<searchtitle><keyword conref="cloudoeconrefs.dita#cloudoeconrefs/containerlong"></keyword> plug-in (<ph conref="container_conref.dita#links/command_prefix"></ph>) command reference for managing
containers</searchtitle></titlealts><abstract>
<shortdesc><ph conref="container_cli_reference_cfic.dita#container_cli_reference_cfic/shortdesc">ith
the <keyword conref="cloudoeconrefs.dita#cloudoeconrefs/containerlong"></keyword> Cloud Foundry plug-in,
refer to these commands to create and manage containers. </ph></shortdesc></abstract>
<refbody conref="container_cli_reference_cfic.dita#container_cli_reference_cfic/refbody">
<section><p>You can use the following commands to manage your containers:</p>
<p><ul>
<li><xref href="#container_cli_reference_cfic/attach"></xref></li>
<li><xref href="#container_cli_reference_cfic/bind-service"></xref></li>
<li><xref href="#container_cli_reference_cfic/build"></xref></li>
<li><xref href="#container_cli_reference_cfic/cp"></xref></li>
<li><xref href="#container_cli_reference_cfic/cpi"></xref></li>
<li><xref href="#container_cli_reference_cfic/exec"></xref></li>
<li><xref href="#container_cli_reference_cfic/group_create"></xref></li>
<li><xref href="#container_cli_reference_cfic/group_inspect"></xref></li>
<li><xref href="#container_cli_reference_cfic/group_instances"></xref></li>
<li><xref href="#container_cli_reference_cfic/group_list"></xref></li>
<li><xref href="#container_cli_reference_cfic/group_rm"></xref></li>
<li><xref href="#container_cli_reference_cfic/group_update"></xref></li>
<li><xref href="#container_cli_reference_cfic/images"></xref></li>
<li><xref href="#container_cli_reference_cfic/info"></xref></li>
<li><xref href="#container_cli_reference_cfic/init"></xref></li>
<li><xref href="#container_cli_reference_cfic/inspect"></xref></li>
<li><xref href="#container_cli_reference_cfic/ip_bind"></xref></li>
<li><xref href="#container_cli_reference_cfic/ip_list"></xref></li>
<li><xref href="#container_cli_reference_cfic/ip_release"></xref></li>
<li><xref href="#container_cli_reference_cfic/ip_request"></xref></li>
<li><xref href="#container_cli_reference_cfic/ip_unbind"></xref></li>
<li><xref href="#container_cli_reference_cfic/kill"></xref></li>
<li><xref href="#container_cli_reference_cfic/login"></xref></li>
<li><xref href="#container_cli_reference_cfic/logs"></xref></li>
<li><xref href="#container_cli_reference_cfic/namespace"></xref></li>
<li><xref href="#container_cli_reference_cfic/network_create"></xref></li>
<li><xref href="#container_cli_reference_cfic/network_inspect"></xref></li>
<li audience="blue"><xref href="#container_cli_reference_cfic/network_ls"></xref></li>
<li audience="blue"><xref href="#container_cli_reference_cfic/network_rm"></xref></li>
<li><xref href="#container_cli_reference_cfic/pause"></xref></li>
<li><xref href="#container_cli_reference_cfic/port"></xref></li>
<li><xref href="#container_cli_reference_cfic/ps"></xref></li>
<li><xref href="#container_cli_reference_cfic/rename"></xref></li>
<li><xref href="#container_cli_reference_cfic/reprovision"></xref></li>
<li><xref href="#container_cli_reference_cfic/restart"></xref></li>
<li><xref href="#container_cli_reference_cfic/rm"></xref></li>
<li><xref href="#container_cli_reference_cfic/rmi"></xref></li>
<li><xref href="#container_cli_reference_cfic/route_map"></xref></li>
<li><xref href="#container_cli_reference_cfic/route_unmap"></xref></li>
<li><xref href="#container_cli_reference_cfic/run"></xref></li>
<li><xref href="#container_cli_reference_cfic/start"></xref></li>
<li><xref href="#container_cli_reference_cfic/stats"></xref></li>
<li><xref href="#container_cli_reference_cfic/stop"></xref></li>
<li><xref href="#container_cli_reference_cfic/top"></xref></li>
<li><xref href="#container_cli_reference_cfic/unbind-service"></xref></li>
<li><xref href="#container_cli_reference_cfic/unpause"></xref></li>
<li><xref href="#container_cli_reference_cfic/unprovision"></xref></li>
<li><xref href="#container_cli_reference_cfic/upgrade"></xref></li>
<li><xref href="#container_cli_reference_cfic/version"></xref></li>
<li><xref href="#container_cli_reference_cfic/volume_create"></xref></li>
<li><xref href="#container_cli_reference_cfic/volume_fscreate"></xref></li>
<li><xref href="#container_cli_reference_cfic/volume_fsflavorlist"></xref></li>
<li><xref href="#container_cli_reference_cfic/volume_fsinspect"></xref></li>
<li><xref href="#container_cli_reference_cfic/volume_fslist"></xref></li>
<li><xref href="#container_cli_reference_cfic/volume_fsrm"></xref></li>
<li><xref href="#container_cli_reference_cfic/volume_inspect"></xref></li>
<li><xref href="#container_cli_reference_cfic/volume_list"></xref></li>
<li><xref href="#container_cli_reference_cfic/volume_rm"></xref></li>
<li audience="blue"><xref href="#container_cli_reference_cfic/volume_space-add"></xref></li>
<li audience="blue"><xref href="#container_cli_reference_cfic/volume_space-rm"></xref></li>
<li><xref href="#container_cli_reference_cfic/wait"></xref></li>
<li><xref href="#container_cli_reference_cfic/wait-status"></xref></li></ul></p>
<p>You can run any of these commands without any options to review help information. You can also
run <codeph><ph conref="container_conref.dita#links/command_prefix"></ph> --help</codeph> to view a list
of these commands.</p></section>
<section id="attach"><title><codeph><ph conref="container_conref.dita#links/command_prefix"></ph> attach [--no-stdin] [--sig-proxy]</codeph> CONTAINER </title>
<dl>
<dlentry>
<dt>Purpose</dt>
<dd>Control a running container or view its output. Use CTRL+C to exit and stop the container. For
more information, see the <xref conref="container_cli_reference_native-docker.dita#container_cli_reference_native-docker/docker_attach"></xref> command in the Docker help.<draft-comment>CTRL+p CTRL+q to exit and keep the container running is
supported in Docker 1.9, which we don't support yet.</draft-comment></dd></dlentry>
<dlentry>
<dt>Parameters</dt>
<dd><parml>
<plentry>
<pt>--no-stdin</pt>
<pd>(Optional) Do not include the standard input. </pd></plentry>
<plentry>
<pt>--sig-proxy</pt>
<pd>(Optional) The default is <option>true</option>.<draft-comment>You can also use this to exit and
keep the container running?</draft-comment></pd></plentry>
<plentry>
<pt><varname>CONTAINER</varname></pt>
<pd>(Required) A container name or ID.</pd></plentry></parml></dd></dlentry>
<dlentry>
<dt>Example</dt>
<dd>The following example is a request to attach to the container
<varname>my_container</varname>.<codeblock><ph conref="container_conref.dita#links/command_prefix"></ph> attach <varname>my_container</varname></codeblock></dd></dlentry></dl></section>
<section id="bind-service"><title><codeph><ph conref="container_conref.dita#links/command_prefix"></ph> bind-service</codeph> GROUP SERVICE_INSTANCE </title>
<dl>
<dlentry>
<dt>Purpose</dt>
<dd>Add a service to a running container group. This command is only available to container groups.
Single containers must bind a service as part of the <ph conref="container_conref.dita#links/command_prefix_nocodeph"></ph> run command. To unbind a service, see
the <xref href="#container_cli_reference_cfic/unbind-service" format="dita">unbind-service</xref>
command.</dd></dlentry>
<dlentry>
<dt>Parameters</dt>
<dd><parml>
<plentry>
<pt><varname>GROUP</varname></pt>
<pd>(Required) The group ID or name.</pd></plentry>
<plentry>
<pt><varname>SERVICE_INSTANCE</varname></pt>
<pd>(Required) The name of the service instance to be added to the container group.</pd></plentry></parml></dd></dlentry>
<dlentry>
<dt>Example</dt>
<dd>The following example is a request to bind an instance of the Data Cache service named
MyDataCache to the container
<varname>my_container_group</varname>.<codeblock><ph conref="container_conref.dita#links/command_prefix"></ph> bind-service <varname>my_container_group</varname> <varname>MyDataCache</varname></codeblock></dd></dlentry></dl></section>
<section id="build"><title><ph conref="container_conref.dita#links/command_prefix"></ph> build -t
TAG [--no-cache] [--pull] [-q] DOCKERFILE_LOCATION </title>
<dl>
<dlentry>
<dt>Purpose</dt>
<dd><ph id="build_purpose">Build a Docker image locally or in the private <keyword conref="cloudoeconrefs.dita#cloudoeconrefs/bluemix_short"></keyword> images registry.</ph> For more
information, see the <xref conref="container_cli_reference_native-docker.dita#container_cli_reference_native-docker/docker_build"></xref> command in the Docker help.</dd></dlentry>
<dlentry>
<dt>Parameters</dt>
<dd><parml>
<plentry id="build_dockerfile">
<pt><varname>DOCKERFILE_LOCATION</varname></pt>
<pd>(Required) The path to the <filepath>Dockerfile</filepath> and context on the local host.</pd></plentry>
<plentry id="build_nocache">
<pt>--no-cache</pt>
<pd>(Optional) When an image is built for the first time, the layers for the image are cached for an
entire organization. When you build subsequent versions of the image, these cached versions of the
image are used to speed up the build process. By including the <codeph>--no-cache</codeph> option
when you build a new version of the image, you can ensure that each layer of the image is re-built
too.</pd></plentry>
<plentry id="build_pull">
<pt>--pull</pt>
<pd>(Optional) By default, the base image is only pulled from the registry if it isn't already in
your organization's image cache. By including this option, you can ensure that latest version of the
base image is used to build the new image.</pd></plentry>
<plentry id="build_quiet">
<pt>-q, --quiet</pt>
<pd>(Optional) Suppress the verbose output that is generated by the containers. The default is
<option>false</option>.</pd></plentry>
<plentry id="build_tag">
<pt>-t <varname>TAG</varname>, --tag <varname>TAG</varname></pt>
<pd>(Required) The path to your private images registry to apply to the image that is created.</pd></plentry></parml></dd></dlentry>
<dlentry>
<dt>Example</dt>
<dd><ph id="build_example">The following example is a request to build an image that is named
<codeph>myimage</codeph>. The <filepath>Dockerfile</filepath> and other artifacts to use in the
build are in the same directory that the command is run from. Because the registry and namespace are
included with the image name, the image is built in your organization's private <keyword conref="cloudoeconrefs.dita#cloudoeconrefs/bluemix_short"></keyword> images registry.</ph>
<note type="tip"><ph conref="container_conref.dita#terms/namespace_get"></ph></note><codeblock><ph conref="container_conref.dita#links/command_prefix"></ph> build -t registry.<keyword conref="cloudoeconrefs.dita#cloudoeconrefs/domainname"></keyword>/<varname>&lt;my_namespace&gt;</varname>/<varname>myimage</varname> .</codeblock></dd></dlentry></dl></section>
<section id="cp"><title><ph conref="container_conref.dita#links/command_prefix"></ph> cp SRC_PATH CONTAINER:DEST_PATH | <ph conref="container_conref.dita#links/command_prefix"></ph> cp CONTAINER:SRC_PATH DEST_PATH </title>
<dl>
<dlentry>
<dt>Purpose</dt>
<dd><ph>Copy a file or folder from a running or stopped single container to your local machine and
vice versa. For more information, see the <xref conref="container_cli_reference_native-docker.dita#container_cli_reference_native-docker/docker_cp"></xref> command in the Docker help.</ph><note>This command is supported to be used with single containers
only. When you want to copy files from or to a container group, you must copy the files from or to
each container instance of the group. </note></dd></dlentry>
<dlentry>
<dt>Parameters</dt>
<dd><parml>
<plentry>
<pt>DEST_PATH</pt>
<pd>(Required) The path to the file or folder on your local machine or container where you want to
copy the information from the source path. The file or folder must exist on your local machine or
the container before you can start copying. If you want to copy to your local machine, you can use
the absolute or relative path. If you want to copy to your single container, <ph id="cp_container_path">you must include the name of the container, the delimiter <q>:</q>, and the
path to the destination file or folder. The path must be relative to the root directory of the
container. </ph></pd></plentry></parml>
<parml>
<plentry>
<pt>SRC_PATH</pt>
<pd>(Required) The path to the file or folder that you want to copy. If the file or folder is on
your local machine, you can use the absolute or relative path. If the file or folder is in your
single container, you must include the name of the container, the delimiter <q>:</q>, and the path
to the file or folder that you want to copy. The path must be relative to the root directory of the
container. <note>You cannot copy certain system files that are stored under the
<filepath>/dev</filepath>, <filepath>/etc</filepath>, <filepath>/proc</filepath> and
<filepath>/sys</filepath> folder of your container.</note></pd></plentry></parml></dd></dlentry>
<dlentry>
<dt>Example</dt>
<dd>This example command copies a file that is named <filepath>config.txt</filepath> from the
current directory of your local machine to the <filepath>config</filepath> directory of a single
container that is named <varname>my_container</varname>.</dd>
<dd><codeblock><ph conref="container_conref.dita#links/command_prefix"></ph> cp <filepath>./config.txt</filepath> <filepath>my_container:/config</filepath></codeblock></dd></dlentry></dl></section>
<section id="cpi"><title><ph conref="container_conref.dita#links/command_prefix"></ph> cpi SRC DST </title>
<dl>
<dlentry>
<dt>Purpose</dt>
<dd><ph id="cpi_purpose">Access a Docker Hub image or an image from your local registry and copy it
to your private <keyword conref="cloudoeconrefs.dita#cloudoeconrefs/bluemix_short"></keyword> images
registry.</ph><note> This command is an alternative to using <codeph>docker pull</codeph> and
<codeph>docker push</codeph> together to add an image to your <keyword conref="cloudoeconrefs.dita#cloudoeconrefs/bluemix_short"></keyword> images registry. If you prefer to use
<codeph>docker pull</codeph> and <codeph>docker push</codeph>, see <xref href="container_images_pulling.dita" format="dita" scope="local"></xref>.</note></dd></dlentry>
<dlentry>
<dt>Parameters</dt>
<dd id="cpi_parameters"><parml>
<plentry>
<pt>DST</pt>
<pd>(Required) The private <keyword conref="cloudoeconrefs.dita#cloudoeconrefs/bluemix_short"></keyword>
images registry URL, which includes the namespace, and the destination image name. A tag for the
image is optional.</pd></plentry></parml>
<parml>
<plentry>
<pt>SRC</pt>
<pd>(Required) The source repository and image name.</pd></plentry></parml></dd></dlentry>
<dlentry>
<dt>Example</dt>
<dd><codeblock><ph conref="container_conref.dita#links/command_prefix"></ph> cpi <varname>source_repository</varname>/<varname>source_image_name</varname> <varname>private_registry_URL</varname>/<varname>destination_image_name</varname>:<varname>tag</varname></codeblock>
<note type="tip"><ph conref="container_conref.dita#terms/namespace_get"></ph></note>
<codeblock><ph conref="container_conref.dita#links/command_prefix"></ph> cpi <varname>training/sinatra</varname> registry.<keyword conref="cloudoeconrefs.dita#cloudoeconrefs/domainname"></keyword>/<varname>&lt;my_namespace&gt;</varname>/<varname>mysinatra</varname>:<varname>v1</varname></codeblock></dd></dlentry></dl></section>
<section id="exec"><title><ph id="exec_cmd"><ph conref="container_conref.dita#links/command_prefix"></ph> exec [-d] [-it] [-u USER] CONTAINER CMD </ph></title>
<dl>
<dlentry>
<dt>Purpose</dt>
<dd>Execute a command within a container. For more information, see the <xref conref="container_cli_reference_native-docker.dita#container_cli_reference_native-docker/docker_exec"></xref> command in the Docker help.</dd></dlentry>
<dlentry>
<dt>Parameters</dt>
<dd><parml>
<plentry>
<pt><varname>CMD</varname></pt>
<pd>(Required) The command to execute within the container or containers specified.</pd></plentry></parml>
<parml>
<plentry>
<pt><varname>CONTAINER</varname></pt>
<pd>(Required) A container name or ID.</pd></plentry></parml>
<parml>
<plentry>
<pt>-d , --detach </pt>
<pd>(Optional) Run the specified command in the background.</pd></plentry></parml>
<parml>
<plentry>
<pt>-it</pt>
<pd>(Optional) Interactive mode. Keep the standard input display. Type <userinput>exit</userinput>
to exit.</pd></plentry></parml>
<parml>
<plentry>
<pt>-u <varname>USER</varname>, --user <varname>USER</varname></pt>
<pd>(Optional) A user name.</pd></plentry></parml></dd></dlentry>
<dlentry>
<dt>Examples</dt>
<dd><ph id="exec_example_1">This example command runs an interactive bash terminal in the container
<varname>my_container</varname>.</ph></dd>
<dd><codeblock id="exec_example_1_code"><ph conref="container_conref.dita#links/command_prefix"></ph> exec -it <varname>my_container</varname> bash</codeblock></dd>
<dd><ph id="exec_example_2">This example command runs the date command in the container
<varname>my_container</varname>. </ph></dd>
<dd><codeblock id="exec_example_2_code"><ph conref="container_conref.dita#links/command_prefix"></ph> exec <varname>my_container</varname> date</codeblock></dd></dlentry></dl></section>
<section id="group_create"><title><ph id="group_create_cmdname"><ph conref="container_conref.dita#links/command_prefix"></ph> group create [--anti] [--auto] [-d DOMAIN] [--desired DESIRED] [-e ENV] [--env-file
ENVFILE] [--http_monitor_enabled] [--http_monitor_path] [--http_monitor_rc_list] [--ip
IP_ADDRESS] [-m MEMORY] [--max MAX] [--min MIN] [-n HOST] --name NAME [-p PORT] [--volume VOLUME:/DIRECTORY_PATH] IMAGE [CMD] </ph></title>
<dl>
<dlentry>
<dt>Purpose</dt>
<dd><ph id="group_create_purpose">Create a scaling group.</ph> By default, containers in <keyword conref="cloudoeconrefs.dita#cloudoeconrefs/bluemix_short"></keyword> run in detached mode.</dd></dlentry>
<dlentry>
<dt>Parameters</dt>
<dd id="group_create_param"><parml>
<plentry id="group_create_anti">
<pt>--anti</pt>
<pd>(Optional) Use anti-affinity to make your container group more highly available. The
<codeph>--anti</codeph> option forces every container instance in your group to be placed on a
separate physical compute node, which reduces the odds of all containers in a group crashing due to
a hardware failure. <ph id="group_create_anti_failure">You might not be able to use this option with
larger group sizes because each <keyword conref="cloudoeconrefs.dita#cloudoeconrefs/bluemix_short"></keyword>
region and organization has a limited set of compute nodes available for deployment. If your
deployment does not succeed, either reduce the number of container instances in the group or remove
the <codeph>--anti</codeph> option.</ph></pd></plentry>
<plentry id="group_create_auto">
<pt>--auto</pt>
<pd>(Optional) <ph conref="container_conref.dita#terms/autorecovery_definition"></ph> For more
information about the health check, see the <codeph>--http_monitor_enabled</codeph> option. <p conref="container_group_ui.dita#container_group_ui/autorecovery_unsuccessful"></p></pd></plentry>
<plentry>
<pt><varname>CMD</varname></pt>
<pd><ph id="group_create_cmd">(Optional) The command and arguments are passed to the container group
to execute. This command must be a long-running command. Do not use a short-lived command, for
example, <cmdname>/bin/date</cmdname>, because it might cause the container to crash.</ph><p>Example
long-running commands using the <option>ibmnode</option> image that is provided by <keyword conref="cloudoeconrefs.dita#cloudoeconrefs/containerlong"></keyword>:<codeblock><ph conref="container_conref.dita#links/command_prefix"></ph> group create --name <varname>my_container_group</varname> registry.<keyword conref="cloudoeconrefs.dita#cloudoeconrefs/domainname"></keyword>/<varname>ibmnode</varname> ping localhost</codeblock><codeblock><ph conref="container_conref.dita#links/command_prefix"></ph> group create --name <varname>my_container_group</varname> registry.<keyword conref="cloudoeconrefs.dita#cloudoeconrefs/domainname"></keyword>/<varname>ibmnode</varname> -- tail -f /dev/null</codeblock><note>The
CMD and its arguments must come at the end of the <codeph><ph conref="container_conref.dita#links/command_prefix"></ph> group create</codeph> command
line.</note></p></pd></plentry>
<plentry>
<pt>-d <varname>DOMAIN</varname>, --domain <varname>DOMAIN</varname></pt>
<pd>(Optional) The default system domain is <codeph><keyword conref="cloudoeconrefs.dita#cloudoeconrefs/Appdomainname"></keyword></codeph> and already provides a SSL
certificate, so you can access your container groups with HTTPS without any additional
configuration. To use a custom domain, you must register the custom domain on a public DNS server,
configure the custom domain in <keyword conref="cloudoeconrefs.dita#cloudoeconrefs/bluemix_short"></keyword>,
and then map the custom domain to the <keyword conref="cloudoeconrefs.dita#cloudoeconrefs/bluemix_short"></keyword> system domain on the public DNS server.
After your custom domain is mapped to the <keyword conref="cloudoeconrefs.dita#cloudoeconrefs/bluemix_short"></keyword> system domain, requests for your custom
domain are routed to your application in <keyword conref="cloudoeconrefs.dita#cloudoeconrefs/bluemix_short"></keyword>. When you create a custom domain, do not
include underscores (_) in the domain name. For more information about custom domains, see <xref href="../manageapps/updapps.html#domain" format="html" scope="peer">Creating and using a custom
domain</xref>. To make your custom domain secure, <xref href="../manageapps/secapps.html#ssl_certificate" format="html" scope="peer">upload a SSL
certificate</xref>, so your container groups can be accessed with HTTPS. <p>The host and the domain
combined form the full public route URL, such as <codeph>http://mycontainerhost.<keyword conref="cloudoeconrefs.dita#cloudoeconrefs/Appdomainname"></keyword></codeph> and must be unique within
<keyword conref="cloudoeconrefs.dita#cloudoeconrefs/bluemix_short"></keyword>. When you review the details of
a container group with the <codeph><ph conref="container_conref.dita#links/command_prefix"></ph> group
inspect</codeph> command, the host and the domain are listed together as the route.</p></pd></plentry>
<plentry id="group_create_desired">
<pt>--desired <varname>DESIRED</varname></pt>
<pd>(Optional) The number of instances in your group. The default is <option>2</option>. <ph conref="container_conref.dita#terms/instances_intro"></ph>
<ph conref="container_conref.dita#terms/instances_determine"></ph>
<ph conref="container_conref.dita#terms/instances_ha"></ph><note conref="container_conref.dita#links/group_instances"></note></pd></plentry>
<plentry>
<pt>-e <varname>ENV</varname>, --env <varname>ENV</varname></pt>
<pd><ph id="group_create_env">(Optional)<ph id="group_create_env_desc"> Set the environment variable
where <option>ENV</option> is a <codeph>key=value</codeph> pair. List multiple keys separately and
if you include quotation marks, include them around both the environment variable name and the
value. Example: <codeph>-e <q><varname>key1</varname>=<varname>value1</varname></q> -e
<q><varname>key2</varname>=<varname>value2a</varname>,<varname>value2b</varname></q> -e
<q><varname>key3</varname>=<varname>value3</varname></q></codeph></ph></ph><p><table id="env_keys">
<title>Suggested environment variables</title>
<tgroup cols="2">
<thead>
<row>
<entry>Environment variable</entry>
<entry>Description</entry></row></thead>
<tbody>
<row audience="blue">
<entry><lines><codeph>CCS_API_KEY=</codeph>
<codeph><varname>&lt;api_key&gt; </varname></codeph></lines>
<draft-comment>This row currently only displays in staging.</draft-comment></entry>
<entry>To include your API key, use <codeph>CCS_API_KEY</codeph>.</entry></row>
<row>
<entry><lines><codeph>CCS_BIND_APP=</codeph>
<codeph><varname>&lt;appname&gt;</varname></codeph></lines></entry>
<entry>Some <keyword conref="cloudoeconrefs.dita#cloudoeconrefs/bluemix_short"></keyword> services do not
support direct binding to a container. In this case, you need to create a Cloud Foundry app and bind
the <keyword conref="cloudoeconrefs.dita#cloudoeconrefs/bluemix_short"></keyword> service to it. Then, you
bind the app to your container by using <codeph>CCS_BIND_APP</codeph>. The Cloud Foundry app acts as
a bridge and allows <keyword conref="cloudoeconrefs.dita#cloudoeconrefs/bluemix_short"></keyword> to inject
your bridge app’s VCAP_SERVICES information into the running container instance. </entry></row>
<row>
<entry><lines><codeph>CCS_BIND_SRV=</codeph>
<codeph><varname>&lt;service_instance_name1&gt;,</varname></codeph>
<codeph><varname>&lt;service_instance_name2&gt;</varname></codeph></lines>
<note> When a service does not support the use of the <codeph>CCS_BIND_SRV=</codeph> environment
variable, use <codeph>CCS_BIND_APP=</codeph> instead.</note></entry>
<entry>To bind a <keyword conref="cloudoeconrefs.dita#cloudoeconrefs/bluemix_short"></keyword> service
directly to a container without using a bridge app, use <codeph>CCS_BIND_SRV</codeph>. This binding
allows <keyword conref="cloudoeconrefs.dita#cloudoeconrefs/bluemix_short"></keyword> to inject the
VCAP_SERVICES information into the running container instance. To list multiple <keyword conref="cloudoeconrefs.dita#cloudoeconrefs/bluemix_short"></keyword> services, include them as part of the
same environment variable.</entry></row>
<row>
<entry><lines>(Deprecated) <codeph>CCS_SSH_KEY=</codeph>
<codeph><varname>&lt;public_ssh_key&gt; </varname></codeph></lines></entry>
<entry><note type="other" othertype="This environment variable has been deprecated" props="status(deprecated)">Use <ph conref="container_conref.dita#links/command_prefix"></ph>
<codeph>exec</codeph> or <ph conref="container_conref.dita#links/command_prefix"></ph>
<codeph>attach</codeph> for external access to your containers instead. For more information, see
<xref href="troubleshoot/ts_cf_ic_exec.dita" format="dita" scope="local"></xref>.</note><ph>To add an SSH
key to a container when you create it, you can use <codeph>CCS_API_KEY</codeph>.</ph></entry></row>
<row>
<entry><lines><codeph>LOG_LOCATIONS=</codeph>
<codeph><varname>&lt;path_to_file&gt; </varname></codeph></lines></entry>
<entry><ph id="log_locations_desc">To add a log file to be monitored in the container, include the
<codeph>LOG_LOCATIONS</codeph> environment variable with a path to the log file.</ph></entry></row></tbody></tgroup></table>Example:<codeblock><ph conref="container_conref.dita#links/command_prefix"></ph> group create -e CCS_BIND_SRV=<varname>&lt;service_instance_name&gt;</varname> --name <varname>&lt;container_name&gt;</varname> registry.<keyword conref="cloudoeconrefs.dita#cloudoeconrefs/domainname"></keyword>/<varname>&lt;my_namespace&gt;</varname>/<varname>&lt;image_name&gt;</varname></codeblock></p></pd></plentry>
<plentry>
<pt>--env-file <varname>ENVFILE</varname></pt>
<pd>(Optional) Import environment variables from a file where <varname>ENVFILE</varname> is the path
to your file on your local directory. Every line in the file represents one
<codeph>key=value</codeph> pair. <p>Example</p><codeblock>KEY1=VALUE1
KEY2=VALUE2</codeblock></pd></plentry>
<plentry>
<pt>--http_monitor_enabled</pt>
<pd>(Optional) The default value is <codeph>true</codeph>. <ph conref="container_group_ui.dita#container_group_ui/autorecovery"></ph> Some apps might not require an
HTTP health check, such as an app that uses TCP for communication instead of HTTP. To disable the
HTTP monitor, set the option to <codeph>false</codeph>. Example:
<codeph>--http_monitor_enabled=false</codeph></pd></plentry>
<plentry>
<pt>--http_monitor_path</pt>
<pd>(Optional) The default value is <codeph>/</codeph>. When <codeph>--http_monitor_enabled</codeph>
is enabled, you can use this option to set a custom path for the health check, such as
<codeph>--http_monitor_path=<q>/health/path</q></codeph>.</pd></plentry>
<plentry>
<pt>--http_monitor_rc_list</pt>
<pd>(Optional) When <codeph>--http_monitor_enabled</codeph> is enabled, you can specify the list of
response codes for the health check. The default value includes the
<codeph>200,201,202,204,300,301,302,401,403,</codeph> and <codeph>404</codeph> codes. Any response
other than 200, 201, 202, 204, or 401 changes the container instance's state to
<codeph>INACTIVE</codeph> by the load balancer. An inactive container does not receive any load and
the state of the container group changes to <codeph>NETWORK_DEGRADED</codeph>.</pd></plentry>
<plentry>
<pt><varname>IMAGE</varname></pt>
<pd><ph id="group_create_image">(Required) The image to include in each container instance in the
container group. You can list commands after the image, but do not put any options after the image;
include all options before you specify an image.</ph><p>If you are using an image in your
organization's private <keyword conref="cloudoeconrefs.dita#cloudoeconrefs/bluemix_short"></keyword> images
registry, specify the image in the following format: <codeph>registry.<keyword conref="cloudoeconrefs.dita#cloudoeconrefs/domainname"></keyword>/<varname>NAMESPACE</varname>/<varname>IMAGE</varname></codeph></p><p>If you are using an image
that is provided by <keyword conref="cloudoeconrefs.dita#cloudoeconrefs/containerlong"></keyword>, do not
include your organization's namespace. Specify the image in the following format:
<codeph>registry.<keyword conref="cloudoeconrefs.dita#cloudoeconrefs/domainname"></keyword>/<varname>IMAGE</varname></codeph></p></pd></plentry>
<plentry>
<pt> --ip <varname>IP_ADDRESS</varname></pt>
<pd>(Optional) If you have an available IP address, bind a public IP address to your container
group. You must also expose the port with the <codeph>-p</codeph> flag. A container group can have
either a public route or a public IP address but not both. To unbind the IP address and return the
IP to the space's quota, remove the container group and recreate the group without the IP address.
To request an IP address prior to creating a container group, run <codeph><ph conref="container_conref.dita#links/command_prefix"></ph> ip request</codeph>.<note>Binding a public IP
address does not include a SSL certificate which encrypts the data that are sent to and from your
container group. If your app requires SSL encryption, you can either implement your own SSL solution
or map a public route to your container group instead of binding a public IP address. Public routes
already include a SSL certificate, so you can access your container group with HTTPS without any
additional configuration.</note></pd></plentry>
<plentry id="group_create_memory">
<pt>-m <varname>MEMORY</varname>, --memory <varname>MEMORY</varname></pt>
<pd>(Optional) <ph id="memory_desc">Enter a memory limit for your container in MB. The memory limit
is part of the container size that defines the maximum amount of memory and disk space a container
gets on the compute host during runtime. After a container size is assigned, the value cannot be
changed.</ph> Available sizes in <keyword conref="cloudoeconrefs.dita#cloudoeconrefs/containerlong"></keyword> are: <ul audience="yellow">
<li>Pico (64 MB memory, 4 GB disk space)</li>
<li>Nano (128 MB memory, 8 GB disk space)</li>
<li>Micro (256 MB memory, 16 GB disk space)</li>
<li>Tiny (512 MB memory, 32 GB disk space)</li>
<li>Small (1024 MB memory, 64 GB disk space)</li>
<li>Medium (2048 MB memory, 128 GB disk space)</li>
<li>Large (4096 MB memory, 256 GB disk space)</li>
<li>X-Large (8192 MB memory, 512 GB disk space)</li>
<li>2X-Large (16384 MB memory, 1 TB disk space) </li></ul><ul audience="blue">
<li>Pico (64 MB memory, 4 GB disk space, ¼ vCPU)</li>
<li>Nano (128 MB memory, 8 GB disk space, ¼ vCPU)</li>
<li>Micro (256 MB memory, 16 GB disk space, ¼ vCPU)</li>
<li>Tiny (512 MB memory, 32 GB disk space, ¼ vCPU)</li>
<li>Small (1024 MB memory, 64 GB disk space, ¼ vCPU)</li>
<li>Medium (2048 MB memory, 128 GB disk space, ½ vCPU)</li>
<li>Large (4096 MB memory, 256 GB disk space, 1 vCPU)</li>
<li>X-Large (8192 MB memory, 512 GB disk space, 2 vCPU)</li>
<li>2X-Large (16384 MB memory, 1 TB disk space, 4 vCPU) </li></ul>If you do not set a size for your container, each container instance is created with
<option>256</option> MB. <note type="important">Enter the container memory in MB without the unit
label. For example, if you want to create a pico container, enter <codeph>-m 64</codeph>.</note></pd></plentry>
<plentry id="group_create_max">
<pt>--max <varname>MAX</varname></pt>
<pd>(Optional) The maximum number of instances. The default is <option>2</option>.</pd></plentry>
<plentry id="group_create_min">
<pt>--min <varname>MIN</varname></pt>
<pd>(Optional) The minimum number of instances. The default is <option>1</option>.</pd></plentry>
<plentry>
<pt> -n <varname>HOST</varname>, --hostname <varname>HOST</varname></pt>
<pd>(Optional) The host name, such as <varname>mycontainerhost</varname>. Do not include underscores
(_) in the host name. The host and the domain combined form the full public route URL, such as
<codeph>http://mycontainerhost.<keyword conref="cloudoeconrefs.dita#cloudoeconrefs/Appdomainname"></keyword></codeph>. When you review the details of a container group with the <codeph><ph conref="container_conref.dita#links/command_prefix"></ph> group inspect</codeph> command, the host and
the domain are listed together as the route.</pd></plentry>
<plentry id="group_create_name">
<pt>--name <varname>NAME</varname></pt>
<pd>(Required) Assign a name to the group. <codeph>-n</codeph> is deprecated.<note type="tip" id="container_name">The container name must start with a letter, and then can include
uppercase letters, lowercase letters, numbers, periods (.), underscores (_), or hyphens
(-).</note></pd></plentry>
<plentry id="group_create_port">
<pt>-p <varname>PORT</varname>, --publish <varname>PORT</varname></pt>
<pd><p>(Required) Expose the port for HTTP and private network traffic. If you do not expose a port,
the container group runs, but the container group cannot be accessed through the group load balancer
on either the public or private network.</p><p>For container groups, you cannot include multiple
ports. If multiple ports are listed, only the last listed port is exposed. The other ports are
ignored by the command. </p><ph id="https">When you bind a route, containers in your group must
listen for HTTP traffic on the group's exposed port. Non-HTTP ports cannot be exposed publicly. When
HTTPS traffic arrives on the exposed port, the (Go)Router completes the HTTPS termination. Then, the
HTTP protocol is used on the private virtual network between the (Go)Router and the containers.</ph> When you bind an IP address, containers in your group can listen for HTTP or HTTPs traffic,
but you can still expose only one port.<p conref="container_single_ui.dita#container_single_ui/ports_p"></p></pd></plentry>
<plentry id="session_affinity">
<pt>--session_affinity</pt>
<pd><p>(Optional) The default value is <codeph>false</codeph>. When
<codeph>--http_monitor_enabled</codeph> is set to <userinput>true</userinput>, you can set the
<codeph>--session_affinity</codeph> option to <userinput>true</userinput> to allow <keyword conref="cloudoeconrefs.dita#cloudoeconrefs/containerlong"></keyword> to create and manage a session cookie on
behalf of the app. This option is not available if <codeph>--http_monitor_enabled</codeph> is set to
<userinput>false</userinput> or if you are using TCP for communication instead of HTTP. </p></pd></plentry>
<plentry id="group_create_volume">
<pt>--volume <varname>VOLUME</varname>:<varname>/DIRECTORY_PATH</varname>[:ro]</pt>
<pd>(Optional) Attach a volume to a container by specifying the details in the following format
<codeph>VOLUME:/DIRECTORY_PATH[:ro]</codeph>.<ul>
<li><varname>VOLUME</varname>: The volume ID or name.</li>
<li><varname>DIRECTORY_PATH</varname>: The absolute path to the directory in the container.</li>
<li><codeph>ro</codeph>: Optional. Specifying <codeph>ro</codeph> makes the volume read-only instead
of the default read/write.</li></ul></pd></plentry></parml></dd></dlentry>
<dlentry>
<dt>Example</dt>
<dd>The following example is a request to create a scaling group with a public
route.<codeblock><ph conref="container_conref.dita#links/command_prefix"></ph> group create --auto -d <keyword conref="cloudoeconrefs.dita#cloudoeconrefs/Appdomainname"></keyword> -n <varname>mycontainerhost</varname>  --name <varname>my_container_group</varname> -p <varname>9080</varname> registry.<keyword conref="cloudoeconrefs.dita#cloudoeconrefs/domainname"></keyword>/<varname>ibmliberty</varname></codeblock></dd>
<dd>The following example is a request to create a scaling group with a public IP
address.<codeblock><ph conref="container_conref.dita#links/command_prefix"></ph> group create --auto --ip <varname>198.51.100.27</varname>  --name <varname>my_container_group</varname> -p <varname>9080</varname> registry.<keyword conref="cloudoeconrefs.dita#cloudoeconrefs/domainname"></keyword>/<varname>ibmliberty</varname></codeblock></dd></dlentry></dl></section>
<section id="group_inspect"><title><ph id="group_inspect_cmdname"><ph conref="container_conref.dita#links/command_prefix"></ph> group inspect GROUP </ph></title>
<dl>
<dlentry>
<dt>Purpose</dt>
<dd id="group_inspect_purpose">See the detailed information that was specified for a container group
when it was created, such as the environment variables, ports, or memory.</dd></dlentry>
<dlentry>
<dt>Parameters</dt>
<dd><parml>
<plentry id="group_inspect_group">
<pt><varname>GROUP</varname></pt>
<pd>(Required) The group ID or name.</pd></plentry></parml></dd></dlentry>
<dlentry>
<dt>Example</dt>
<dd>The following example is a request to inspect the group
<varname>my_container_group</varname>.<codeblock><ph conref="container_conref.dita#links/command_prefix"></ph> group inspect <varname>my_container_group</varname></codeblock></dd></dlentry></dl></section>
<section id="group_instances"><title><ph id="group_instances_cmdname"><ph conref="container_conref.dita#links/command_prefix"></ph> group instances GROUP </ph></title>
<dl>
<dlentry>
<dt>Purpose</dt>
<dd id="group_instances_purpose">List all containers with their ID, name, IP address and public port
that are part of a container group.</dd></dlentry>
<dlentry>
<dt>Parameters</dt>
<dd><parml>
<plentry>
<pt><varname>GROUP</varname></pt>
<pd>(Required) The group ID or name.</pd></plentry></parml></dd></dlentry>
<dlentry>
<dt>Example</dt>
<dd>The following example is a request to retrieve all containers of the group
<varname>my_container_group</varname>.<codeblock><ph conref="container_conref.dita#links/command_prefix"></ph> group instances <varname>my_container_group</varname></codeblock></dd></dlentry></dl></section>
<section id="group_list"><title><ph id="group_list_cmdname"><ph conref="container_conref.dita#links/command_prefix"></ph> group list </ph></title>
<dl>
<dlentry>
<dt>Purpose</dt>
<dd id="group_list_purpose">List the container groups in a space.</dd></dlentry>
<dlentry>
<dt>Example</dt>
<dd><codeblock><ph conref="container_cli_reference_cfic.dita#container_cli_reference_cfic/group_list_cmdname"></ph></codeblock></dd></dlentry></dl></section>
<section id="group_rm"><title><ph id="group_remove_cmdname"><ph conref="container_conref.dita#links/command_prefix"></ph> group rm [-f] GROUP [GROUP]</ph></title>
<dl>
<dlentry>
<dt>Purpose</dt>
<dd id="group_rm_purpose">Remove one or more container groups from a space.</dd></dlentry>
<dlentry>
<dt>Parameters</dt>
<dd><parml>
<plentry id="group_rm_force">
<pt>-f, --force</pt>
<pd>(Optional) Forces the removal of a running or failed container.</pd></plentry></parml>
<parml>
<plentry id="group_rm_group">
<pt>GROUP</pt>
<pd>(Required) The group ID or name of at least one container group.</pd></plentry></parml></dd></dlentry>
<dlentry>
<dt>Example</dt>
<dd>The following example is a request to remove a container group, where
<varname>my_container_group</varname> is the name of the
group.<codeblock><ph conref="container_conref.dita#links/command_prefix"></ph> group rm <varname>my_container_group</varname></codeblock></dd></dlentry></dl></section>
<section id="group_update"><title><ph id="group_update_cmdname"><ph conref="container_conref.dita#links/command_prefix"></ph> group update [--desired DESIRED] [-e
<q><varname>KEY</varname>=<varname>VALUE</varname></q>]<ph> [--max MAX] [--min
MIN]</ph> GROUP </ph></title>
<dl>
<dlentry>
<dt>Purpose</dt>
<dd id="group_update_purpose">Use the <codeph><ph conref="container_conref.dita#links/command_prefix"></ph> group update</codeph> command to perform the
following updates on your group. <ul>
<li>Update the desired number of instances that run in your container group.</li>
<li>Add new environment variables to the group. </li>
<li>Update the value of an existing environment variable.</li></ul><note>You can perform one update at a time only.</note></dd>
<dd><note type="tip">To update the host name or domain for a container group, use <xref href="#container_cli_reference_cfic/route_map"></xref>.</note></dd></dlentry>
<dlentry>
<dt>Parameters</dt>
<dd><parml id="group_update_parameters">
<plentry>
<pt>--desired <varname>DESIRED</varname></pt>
<pd>(Optional) The number of instances that you require. The default is <option>2</option>.</pd></plentry>
<plentry>
<pt>-e <q><varname>KEY</varname>=<varname>VALUE</varname></q></pt>
<pd>(Optional) Add a new environment variable to the container group or change the value of an
existing environment variable. </pd></plentry>
<plentry>
<pt>--max <varname>MAX</varname></pt>
<pd>(Optional) The maximum number of instances. The default is <option>2</option>.</pd></plentry>
<plentry>
<pt>--min <varname>MIN</varname></pt>
<pd>(Optional) The minimum number of instances. The default is <option>1</option>.</pd></plentry></parml></dd></dlentry>
<dlentry>
<dt>Example</dt>
<dd>The following example is a request to update the desired number of container instances in a
container group named
<varname>my_container_group</varname>.<codeblock><ph conref="container_conref.dita#links/command_prefix"></ph> group update --desired <varname>5</varname> <varname>my_container_group</varname></codeblock></dd>
<dd>The following example is a request to add a new environment variable
<varname>environment</varname> with the value <varname>Linux</varname> to a container group that is
named
<varname>my_container_group</varname>.<codeblock><ph conref="container_conref.dita#links/command_prefix"></ph> group update -e <q><varname>environment</varname>=<varname>Linux</varname></q> <varname>my_container_group</varname></codeblock></dd></dlentry></dl></section>
<section id="images"><title><ph conref="container_conref.dita#links/command_prefix"></ph> images [-a]<ph audience="blue"> [--digests]</ph> [-f CONDITION] [--no-trunc] [q]</title>
<dl>
<dlentry>
<dt>Purpose</dt>
<dd>See a list of all the available images in the organization's private <keyword conref="cloudoeconrefs.dita#cloudoeconrefs/bluemix_short"></keyword> images registry. For more information,
see the <xref conref="container_cli_reference_native-docker.dita#container_cli_reference_native-docker/docker_images"></xref> command in the Docker help.</dd></dlentry>
<dlentry>
<dt>Parameters</dt>
<dd><parml>
<plentry>
<pt>-a, --all</pt>
<pd>(Optional) Includes all of the image layers for each image in your organization's registry, not
just the most recent layer.</pd></plentry></parml>
<parml audience="blue">
<plentry>
<pt>--digests</pt>
<pd>(Optional) Shows <xref href="https://docs.docker.com/engine/reference/commandline/images/#listing-image-digests" format="html" scope="external">digests</xref>.<draft-comment>Not supported currently? Digests are a v2 registry
thing. V2 registry hasn't been implemented yet. Only shows in staging
currently.</draft-comment></pd></plentry></parml>
<parml>
<plentry>
<pt>-f, --filter <varname>CONDITION</varname></pt>
<pd>(Optional) Filter the list of images by the condition provided.</pd></plentry></parml>
<parml>
<plentry>
<pt>--no-trunc</pt>
<pd>(Optional) Do not truncate the output.</pd></plentry></parml>
<parml>
<plentry>
<pt>-q, --quiet</pt>
<pd>(Optional) Display the numeric IDs only.</pd></plentry></parml></dd></dlentry>
<dlentry id="images_responses">
<dt>Responses</dt>
<dd>You receive a list of images that includes the image ID, the created date, and the image
name.</dd></dlentry>
<dlentry>
<dt>Example</dt>
<dd>The following example is a request to receive a list of available images for the
organization.<codeblock><ph conref="container_conref.dita#links/command_prefix"></ph> images</codeblock></dd></dlentry></dl></section>
<section id="info"><title><codeph><ph conref="container_conref.dita#links/command_prefix"></ph> info [--json]</codeph></title>
<dl>
<dlentry id="info_purpose">
<dt>Purpose</dt>
<dd>Receive a set of information that describes the state of the container cloud service
instance.</dd></dlentry>
<dlentry>
<dt>Parameters</dt>
<dd><parml>
<plentry>
<pt><varname>--json</varname></pt>
<pd>(Optional) Structure the output of the command in JSON format.</pd></plentry></parml></dd></dlentry>
<dlentry id="info_responses">
<dt>Responses</dt>
<dd>You receive a readout that includes information about the containers limit, containers usage,
containers that are running, memory limit, memory usage, floating IP limit, floating IP usage, CCS
host URL, registry host URL, and debug mode status.</dd></dlentry>
<dlentry>
<dt>Example</dt>
<dd>The following example is a request to receive information about the container cloud service
instance.<codeblock><ph conref="container_conref.dita#links/command_prefix"></ph> info</codeblock></dd></dlentry></dl></section>
<section id="init"><title><ph><ph conref="container_conref.dita#links/command_prefix"></ph> init </ph></title>
<dl>
<dlentry>
<dt>Purpose</dt>
<dd>Refresh the bearer token by running this command to log in to Cloud Foundry again and
reinitialize the CLI. Running <codeph><ph conref="container_conref.dita#links/command_prefix"></ph>
init</codeph> has the same effect as running <codeph><ph conref="container_conref.dita#links/command_prefix"></ph> login</codeph> again.</dd></dlentry>
<dlentry>
<dt>Example</dt>
<dd><codeblock><ph conref="container_conref.dita#links/command_prefix"></ph> init</codeblock></dd></dlentry></dl></section>
<section id="inspect"><title><ph id="inspect_cmdname"><ph conref="container_conref.dita#links/command_prefix"></ph> inspect [IMAGE | images | CONTAINER] </ph></title>
<dl>
<dlentry>
<dt>Purpose</dt>
<dd><ph id="inspect_purpose">Retrieve information about one or more containers or container
images.</ph> Only one of IMAGE, images, or CONTAINER options can be specified at a time. For more
information, see the <xref conref="container_cli_reference_native-docker.dita#container_cli_reference_native-docker/docker_inspect"></xref> command in the Docker help.</dd></dlentry>
<dlentry>
<dt>Parameters</dt>
<dd><parml>
<plentry id="inspect_container">
<pt><varname>CONTAINER</varname></pt>
<pd>(Required) Get detailed information about a specific container by specifying the container name
or ID. You can retrieve information for multiple containers by listing their names or IDs in the
command with a space in between. </pd></plentry></parml>
<parml>
<plentry>
<pt><varname>IMAGE</varname></pt>
<pd>(Required) Get detailed information about a specific image by specifying the full private
<keyword conref="cloudoeconrefs.dita#cloudoeconrefs/bluemix_short"></keyword> registry path to your image.
You can retrieve information for multiple images by listing each registry path in the command with a
space in between </pd></plentry></parml>
<parml>
<plentry>
<pt>images</pt>
<pd>(Required) Get detailed information about all of the images in your registry.</pd></plentry></parml></dd></dlentry>
<dlentry>
<dt>Example</dt>
<dd>The following example is a request to inspect a container that is named
<userinput>my_container</userinput>.<codeblock><ph conref="container_conref.dita#links/command_prefix"></ph> inspect <varname>my_container</varname></codeblock></dd></dlentry></dl></section>
<section id="ip_bind"><title><ph conref="container_conref.dita#links/command_prefix"></ph> ip bind ADDRESS CONTAINER </title>
<dl>
<dlentry id="bind_purpose">
<dt>Purpose</dt>
<dd>Bind an available floating IP address to a single container. <note>To bind a floating IP address
to a container group, use the <codeph>--ip</codeph> flag in the <xref href="#container_cli_reference_cfic/group_create" format="dita"><codeph><ph conref="container_conref.dita#links/command_prefix"></ph> group create</codeph></xref> command.</note></dd></dlentry>
<dlentry>
<dt>Parameters</dt>
<dd><parml>
<plentry id="bind_address">
<pt><varname>ADDRESS</varname></pt>
<pd>(Required) The IP address to bind to the single container.</pd></plentry>
<plentry id="bind_container">
<pt><varname>CONTAINER</varname></pt>
<pd>(Required) The container ID or name to bind to the IP address.</pd></plentry></parml></dd></dlentry>
<dlentry>
<dt>Example</dt>
<dd>The following example is a request to bind the IP address 192.0.2.23 to the container with name
<varname>my_container</varname>.<codeblock><ph conref="container_conref.dita#links/command_prefix"></ph> ip bind <varname>192.0.2.23</varname> <varname>my_container</varname></codeblock></dd></dlentry></dl></section>
<section id="ip_list"><title><ph conref="container_conref.dita#links/command_prefix"></ph> ip list [-q] </title>
<dl>
<dlentry id="ip_list_purpose">
<dt>Purpose</dt>
<dd>List the available floating IP addresses for the organization and the IDs for the single
containers or groups that are bound to those IP addresses.</dd></dlentry>
<dlentry>
<dt>Parameters</dt>
<dd><parml>
<plentry>
<pt>-q</pt>
<pd>(Optional) List only the IP addresses, without the IDs for the single containers or groups that
are bound to those IP addresses.</pd></plentry></parml></dd></dlentry>
<dlentry id="ip_list_responses">
<dt>Responses</dt>
<dd>You receive a list of IP addresses and the ID of the single container or container group they
are linked to. If the IP address is unused, no container ID is shown.</dd></dlentry>
<dlentry>
<dt>Example</dt>
<dd><ph id="ip_list_example">The following example is a request to receive a list of all IP
addresses for the organization, whether they are available to use or
not.</ph><codeblock><ph conref="container_conref.dita#links/command_prefix"></ph> ip list -a</codeblock></dd></dlentry></dl></section>
<section id="ip_release"><title><ph conref="container_conref.dita#links/command_prefix"></ph> ip release ADDRESS </title>
<dl>
<dlentry id="ip_release_purpose">
<dt>Purpose</dt>
<dd>Release a floating IP address. After a floating IP address is released, it cannot be bound to a
single container or container group in the space. </dd></dlentry>
<dlentry>
<dt>Parameters</dt>
<dd><parml>
<plentry id="ip_release_address">
<pt><varname>ADDRESS</varname></pt>
<pd>(Required) The IP address to release.</pd></plentry></parml></dd></dlentry>
<dlentry>
<dt>Example</dt>
<dd>The following example is a request to release the IP address
192.0.2.23<codeblock><ph conref="container_conref.dita#links/command_prefix"></ph> ip release <varname>192.0.2.23</varname></codeblock></dd></dlentry></dl></section>
<section id="ip_request"><title><ph conref="container_conref.dita#links/command_prefix"></ph> ip request [-q]</title>
<dl>
<dlentry id="ip_request_purpose">
<dt>Purpose</dt>
<dd>Request a new floating IP.</dd></dlentry>
<dlentry>
<dt>Parameters</dt>
<dd><parml>
<plentry>
<pt>-q</pt>
<pd>(Optional) Only the IP address is displayed in the command output. No message text is
included.</pd></plentry></parml></dd></dlentry>
<dlentry>
<dt>Example</dt>
<dd>The following example is a request for a new floating IP
address.<codeblock><ph conref="container_conref.dita#links/command_prefix"></ph> ip request</codeblock></dd></dlentry></dl></section>
<section id="ip_unbind"><title><ph conref="container_conref.dita#links/command_prefix"></ph> ip unbind ADDRESS CONTAINER </title>
<dl>
<dlentry id="ip_unbind_purpose">
<dt>Purpose</dt>
<dd>Unbind a floating IP address from a single container. <note>To unbind the IP address from a
container group, remove the container group and recreate the group without the IP address.</note><p id="reclaim">Public IP addresses are a limited resource in <keyword conref="cloudoeconrefs.dita#cloudoeconrefs/containerlong"></keyword>. As a result, public IP addresses that
are allocated to a space and not bound to a container are reclaimed weekly from free trial users.
Unbound public IP addresses are never reclaimed from pay as you go or subscription customers. For
information on quota limits, see <xref href="container_planning_quota.dita" format="dita" scope="local"></xref>.</p></dd></dlentry>
<dlentry>
<dt>Parameters</dt>
<dd><parml>
<plentry id="ip_unbind_address">
<pt><varname>ADDRESS</varname></pt>
<pd>(Required) The IP address that is being unbound.</pd></plentry>
<plentry id="ip_unbind_container">
<pt><varname>CONTAINER</varname></pt>
<pd>(Required) The container ID or name that is being unbound.</pd></plentry></parml></dd></dlentry>
<dlentry>
<dt>Example</dt>
<dd>The following example is a request to unbind the IP address 192.0.2.23 from the container with
name
<varname>my_container</varname>.<codeblock><ph conref="container_conref.dita#links/command_prefix"></ph> ip unbind <varname>192.0.2.23</varname> <varname>my_container</varname></codeblock></dd></dlentry></dl></section>
<section id="kill"><title><ph conref="container_conref.dita#links/command_prefix"></ph> kill [-s
CMD] CONTAINER [CONTAINER] </title>
<dl>
<dlentry>
<dt>Purpose</dt>
<dd>Stop a running process in one or more containers without stopping the container. For more
information, see the <xref conref="container_cli_reference_native-docker.dita#container_cli_reference_native-docker/docker_kill"></xref> command in the Docker help.</dd></dlentry>
<dlentry>
<dt>Parameters</dt>
<dd><parml>
<plentry>
<pt><varname>CONTAINER</varname></pt>
<pd>(Required) The container ID or name of at least one container. You can run this command with
multiple containers by listing their names or IDs in the command with a space in between.</pd></plentry>
<plentry>
<pt>-s, --signal <varname>CMD</varname></pt>
<pd>(Optional) Send any command to the process that is running in the container.</pd></plentry></parml></dd></dlentry>
<dlentry>
<dt>Example</dt>
<dd>The following example is a request to kill the process in a container that is named
<varname>my_container</varname>.<codeblock><ph conref="container_conref.dita#links/command_prefix"></ph> kill <varname>my_container</varname></codeblock></dd></dlentry></dl></section>
<section id="login"><title><ph conref="container_conref.dita#links/command_prefix"></ph> login </title>
<note id="login_prereq">Before logging in, you must ensure that the Cloud Foundry command tool (cf)
is installed, as well as the Docker CLI (docker), and that they are both configured in your
environment path.</note>
<dl>
<dlentry id="login_purpose">
<dt>Purpose</dt>
<dd>Log in to the CLI to use the full capabilities of the <keyword conref="cloudoeconrefs.dita#cloudoeconrefs/containerlong"></keyword>. <note type="tip" id="region">To
switch to another region, specify the API endpoint for that region when you log in to the Cloud
Foundry CLI, not the <keyword conref="cloudoeconrefs.dita#cloudoeconrefs/containerlong"></keyword> CLI.
<ul>
<li>US South:<codeblock>cf login -a api.ng.bluemix.net</codeblock></li>
<li>United Kingdom:<codeblock>cf login -a api.eu-gb.bluemix.net</codeblock></li>
<li audience="unknown">Sydney:<codeblock>cf login -a api.au-syd.bluemix.net</codeblock></li></ul></note></dd></dlentry>
<dlentry>
<dt>Example</dt>
<dd>The following example is a standard
login.<codeblock><ph conref="container_conref.dita#links/command_prefix"></ph> login</codeblock></dd></dlentry></dl></section>
<section id="logs"><title><ph conref="container_conref.dita#links/command_prefix"></ph> logs [-f | --since TIMESTAMP  | --tail
STRING | -t] CONTAINER </title>
<dl>
<dlentry>
<dt>Purpose</dt>
<dd><ph id="logs_purpose">Show the output or error logs for a running container.</ph> For more
information, see the <xref conref="container_cli_reference_native-docker.dita#container_cli_reference_native-docker/docker_logs"></xref> command in the Docker help.</dd></dlentry>
<dlentry>
<dt>Parameters</dt>
<dd><parml>
<plentry id="logs_container">
<pt><varname>CONTAINER</varname></pt>
<pd>(Required) The container name or ID.</pd></plentry>
<plentry audience="blue">
<pt>--details</pt>
<pd><p>(Optional)<draft-comment author="bpratt">Do we support log-opt on cf ic run? For now, leaving
this one out.</draft-comment></p></pd></plentry>
<plentry>
<pt>-f, --follow</pt>
<pd><p>(Optional) Include new output from the <codeph>STDOUT</codeph> and <codeph>STDERR</codeph> log
files for the container.</p></pd></plentry>
<plentry>
<pt>--since TIMESTAMP</pt>
<pd>(Optional) Show all logs since the timestamp. </pd></plentry>
<plentry>
<pt>--tail STRING</pt>
<pd>(Optional) Specify the number of the most recent lines of logs to show. The default is to show
all logs.</pd></plentry>
<plentry>
<pt>-t, --timestamps</pt>
<pd>(Optional) Display timestamps on the logs.</pd></plentry></parml></dd></dlentry>
<dlentry>
<dt>Example</dt>
<dd>The following example is a request to get the output log for a container that is named
<varname>my_container</varname>.<codeblock><ph conref="container_conref.dita#links/command_prefix"></ph> logs -o <varname>my_container</varname></codeblock></dd></dlentry></dl></section>
<section id="namespace"><title><ph conref="container_conref.dita#links/command_prefix"></ph> namespace [get | set NAME] </title>
<dl>
<dlentry id="namespace_purpose">
<dt>Purpose</dt>
<dd>Set or retrieve the name of the private <keyword conref="cloudoeconrefs.dita#cloudoeconrefs/bluemix_short"></keyword> image registry for the organization that
the user has logged in with. </dd></dlentry>
<dlentry>
<dt>Parameters</dt>
<dd><parml>
<plentry id="namespace_get">
<pt>get</pt>
<pd>(Optional) Request the namespace for your organization's private images registry.</pd></plentry>
<plentry id="namespace_set">
<pt>set <varname>NAME</varname></pt>
<pd>(Optional) A one-time only function to set the namespace for your organization's private image
registry, if it is not already set. After you set the namespace, log out and in to the <keyword conref="cloudoeconrefs.dita#cloudoeconrefs/containerlong"></keyword> CLI before you continue. <note type="restriction">You cannot use a hyphen (-) in the name of your registry namespace.</note></pd></plentry></parml></dd></dlentry>
<dlentry>
<dt>Example</dt>
<dd>The following example is a request to query the namespace for the organization that the user
logged in to.<codeblock><ph conref="container_conref.dita#links/command_prefix"></ph> namespace get</codeblock></dd></dlentry></dl></section>
<section id="network_create"><title><ph conref="container_conref.dita#links/command_prefix"></ph> network create [--gateway=GATEWAY] [--ip-range=IP-RANGE] --subnet=SUBNET default</title>
<dl>
<dlentry>
<dt>Purpose</dt>
<dd>Create your own private overlay network with a custom IP address range in your organization
space based on the <varname>ibm-containers</varname> driver. <note>This command is supported only to
replace the default overlay network in <keyword conref="cloudoeconrefs.dita#cloudoeconrefs/containerlong"></keyword>. Multiple networks in an organization
space are not supported. </note>For more information, see <xref href="container_cli_ips_byoip.dita" format="dita" scope="local"></xref>.</dd></dlentry>
<dlentry id="network_create_param">
<dt>Parameters</dt>
<dd id="gateway"><parml>
<plentry>
<pt><varname>--gateway=</varname>GATEWAY</pt>
<pd>(Optional) You can specify an IP address for your network gateway. A network gateway serves as
an internal router for your private network and is required to route messages from a container to
the public network (Internet). If you expose a container to the public and assign a public IP
address, outgoing traffic is sent to the gateway first before it is routed to the public network.
Incoming traffic is also sent to the gateway first, before it is routed to the exposed container. If
you want to configure a specific IP address for your gateway, you must use the <xref href="https://tools.ietf.org/html/rfc791" format="html" scope="external">IPv4 format</xref> and
define a subnet that specifies the corresponding network and host address by using the
<codeph>--subnet</codeph> option. If no IP address for your gateway is specified, but you specified
a subnet by using the <codeph>--subnet</codeph> option, <keyword conref="cloudoeconrefs.dita#cloudoeconrefs/containerlong"></keyword> automatically assigns the first
available IP address from your subnet to your network gateway.</pd></plentry></parml></dd>
<dd id="iprange"><parml>
<plentry>
<pt><varname>--ip-range=</varname>IP-RANGE</pt>
<pd>(Optional) When you want to use a certain IP address range from your subnet that can be assigned
to your containers, use the <codeph>--ip-range</codeph> option. All IP addresses in the range that
you choose must be part of the available host addresses that are determined by the subnet. To
specify an IP address range, use the <xref href="https://tools.ietf.org/html/rfc791" format="html" scope="external">IPv4 format</xref> and determine the first private IP address that you want to
assign to your container. Every IP address range is appended by a suffix indicating the number of
private IP addresses that are available to your containers in the range. As a consequence, the
suffix also determines the last available private IP address in your range. Once a network with
custom subnet and IP address range settings is created, you cannot alter it, which is why you must
plan the number of private IP addresses that you need in advance. <p>Review the sample network
configurations and the number of private IP addresses you can assign to your containers. </p><ul>
<li>Sample network configuration with 256 available private container IP
addresses.<codeblock><ph conref="container_conref.dita#links/command_prefix"></ph> network create --subnet=192.0.0.0/16 --ip-range=192.0.2.0/24 default</codeblock>As
every IPv4 IP address consists of 32 bits, the suffix <codeph>/24</codeph> in the
<codeph>--ip-range</codeph> option indicates that you want to use the 8 remaining bits to address
your containers. With this configuration, you can assign 256 (2^8) private IP addresses starting
with the IP address 192.0.2.0. The last available IP address would be 192.0.2.255. When you do not
specify a private IP address for your network gateway, the first available IP address 192.0.0.1 from
your subnet is automatically assigned to it.</li>
<li>Sample network configuration with 4 available private container IP addresses.
<codeblock><ph conref="container_conref.dita#links/command_prefix"></ph> network create --subnet=192.0.0.0/16 --ip-range=192.0.2.100/30 default</codeblock>As
every IPv4 IP address consists of 32 bits, the suffix <codeph>/30</codeph> in the
<codeph>--ip-range</codeph> option indicates that you want to use the 2 remaining bits to address
your containers. With this configuration, you can assign 4 (2^2) private IP addresses starting with
the IP address 192.0.2.100. The last available IP address would be 192.0.2.103. When you do not
specify a private IP address for your network gateway, the first available IP address 192.0.0.1 from
your subnet is automatically assigned to it.</li></ul></pd></plentry></parml></dd>
<dd id="subnet"><parml>
<plentry>
<pt><varname>--subnet=</varname>SUBNET</pt>
<pd>(Required) To customize your private network, you must specify a subnet. A subnet represents a
part of an organization network and usually bundles host machines that are located in the same
region, in the same building, or in the same local area network. In <keyword conref="cloudoeconrefs.dita#cloudoeconrefs/containerlong"></keyword>, a subnet determines the range of
private IP addresses that can be assigned to containers as host addresses. <p>To specify a subnet in
<keyword conref="cloudoeconrefs.dita#cloudoeconrefs/containerlong"></keyword>, you must use the <xref href="https://tools.ietf.org/html/rfc791" format="html" scope="external">IPv4 format</xref> that
presents an IP address as a 32-bit integer value. Every subnet is appended by a suffix that
indicates how many bits of the subnet IP address are used to address the network, and as a
consequence, are fixed for all IP addresses in the subnet. The suffix determines the number of
private IP addresses that can be assigned to your containers. After a custom network is created, you
cannot alter it, which is why you must plan the number of private IP addresses that you need in
advance. </p><p>Example</p><p>In this example, a private overlay network with custom subnet settings
is created in <keyword conref="cloudoeconrefs.dita#cloudoeconrefs/containerlong"></keyword>. This network
configuration does not include a custom private IP address range (<codeph>--ip-range</codeph>
option) and no specific private IP address for the network gateway (<codeph>--gateway</codeph>
option). As a consequence, the number of available private container IP addresses as well as the IP
address that is assigned to your network gateway, is taken from the subnet
settings.<codeblock><ph conref="container_conref.dita#links/command_prefix"></ph> network create --subnet=192.0.0.0/16 default</codeblock></p><p><ul>
<li>The suffix <codeph>/16</codeph> of the subnet indicates that the first 16 bits of the subnet IP
address are fix for all IP addresses that are assigned to your containers. As every IPv4 IP address
consists of 32 bits, you can use the last 16 bits to build individual IP addresses for your
containers. <p><image href="images/container_cli_ips_byoip.png" alt="Example IPv4 subnet breakdown" width="400" audience="blue"></image></p></li>
<li>Network Gateway IP address: 192.0.0.1<p>Because no private IP address for the network gateway is
specified, the first private IP address in your subnet is automatically assigned to the network
gateway.<note type="tip">To specify a custom private IP address for your gateway, use the
<codeph>--gateway</codeph> option in the <codeph><ph conref="container_conref.dita#links/command_prefix"></ph> network create</codeph>
command.</note></p></li>
<li>Available private container IP addresses: 192.0.0.2 - 192.0.255.254<p>The number of possible
private IP addresses depends on the suffix that is used in the subnet definition. The suffix
<codeph>/16</codeph> therefore means, that you can address 65536 (2^16) hosts in this network. As
the first IP address 192.0.0.1 is already assigned to the network gateway and the last IP address
192.0.255.255 is reserved as a broadcast address, the first container that is created in this
network is assigned the IP address 192.0.0.2. The last available IP address is 192.0.255.254. With
this configuration, you can address 65534 containers. <note type="tip">You can further narrow the
range of private IP addresses in your subnet that are assigned to your containers by using the
<codeph>--ip-range</codeph> option in the <codeph><ph conref="container_conref.dita#links/command_prefix"></ph> network create</codeph> command.</note></p></li></ul></p></pd></plentry></parml></dd></dlentry>
<dlentry>
<dt>Example</dt>
<dd>The following example is a request to replace the default <keyword conref="cloudoeconrefs.dita#cloudoeconrefs/containerlong"></keyword> network with a custom private network.
<codeblock><ph conref="container_conref.dita#links/command_prefix"></ph> network create --subnet=192.0.0.0/16 --gateway 192.0.2.254 --ip-range=192.0.2.100/30 default</codeblock></dd></dlentry></dl></section>
<section id="network_inspect"><title><ph conref="container_conref.dita#links/command_prefix"></ph> network inspect default</title>
<dl>
<dlentry>
<dt>Purpose</dt>
<dd>Retrieve detailed information about the <uicontrol>default</uicontrol> network in <keyword conref="cloudoeconrefs.dita#cloudoeconrefs/containerlong"></keyword>. </dd></dlentry>
<dlentry>
<dt>Example</dt>
<dd>The following example is a request to retrieve detailed information about the
<uicontrol>default</uicontrol> network in <keyword conref="cloudoeconrefs.dita#cloudoeconrefs/containerlong"></keyword>.
<codeblock><ph conref="container_conref.dita#links/command_prefix"></ph> network inspect default</codeblock></dd></dlentry></dl></section>
<section id="network_ls" audience="blue"><title><ph conref="container_conref.dita#links/command_prefix"></ph> network ls</title>
<draft-comment author="Nadine">This content is staging only. We do not want to expose this feature
to customers because we want to prevent them from creating multiple private networks. </draft-comment>
<dl>
<dlentry>
<dt>Purpose</dt>
<dd>Lists all networks that are available in your organization space. For more information, see the
<xref href="https://docs.docker.com/engine/reference/commandline/network_ls/" format="html" scope="external">network ls</xref> command in the Docker help.</dd></dlentry>
<dlentry>
<dt>Example</dt>
<dd>The following example is a request to list all networks that are available in your organization
space. <codeblock><ph conref="container_conref.dita#links/command_prefix"></ph> network ls</codeblock></dd></dlentry></dl></section>
<section id="network_rm" audience="blue"><title><ph conref="container_conref.dita#links/command_prefix"></ph> network rm NAME</title>
<draft-comment author="Nadine">This content is staging only. We do not want to expose this feature
to customers because we want to prevent them from creating multiple private networks. </draft-comment>
<dl>
<dlentry>
<dt>Purpose</dt>
<dd>Remove a network from your organization space. For more information, see the <xref href="https://docs.docker.com/engine/reference/commandline/network_rm/" format="html" scope="external">network rm</xref> command in the Docker help.</dd></dlentry>
<dlentry>
<dt>Parameters</dt>
<dd><parml>
<plentry>
<pt><varname>NAME</varname></pt>
<pd>(Required) The name of the network you want to remove.</pd></plentry></parml></dd></dlentry>
<dlentry>
<dt>Example</dt>
<dd>The following example is a request to remove a network that is named
<varname>my_network</varname> from your organization
space.<codeblock><ph conref="container_conref.dita#links/command_prefix"></ph> network rm <varname>my_network</varname></codeblock></dd></dlentry></dl></section>
<section id="pause"><title><ph conref="container_conref.dita#links/command_prefix"></ph> pause CONTAINER [CONTAINER] </title>
<dl>
<dlentry>
<dt>Purpose</dt>
<dd><ph id="pause_purpose">Pause all processes within one or more running containers.</ph> For more
information, see the <xref conref="container_cli_reference_native-docker.dita#container_cli_reference_native-docker/docker_pause"></xref> command in the Docker help. To start the container again, run the <xref href="#container_cli_reference_cfic/unpause" format="dita" scope="local">unpause</xref> command.</dd></dlentry>
<dlentry>
<dt>Parameters</dt>
<dd><parml>
<plentry id="pause_container">
<pt><varname>CONTAINER</varname></pt>
<pd>(Required) The container name or ID of at least one container. You can run this command with
multiple containers by listing their names or IDs in the command with a space in between.</pd></plentry></parml></dd></dlentry>
<dlentry>
<dt>Example</dt>
<dd>The following example is a request to pause a container that is named
<varname>my_container</varname>.<codeblock><ph conref="container_conref.dita#links/command_prefix"></ph> pause <varname>my_container</varname></codeblock></dd></dlentry></dl></section>
<section id="port"><title><ph id="port_cmdname"><ph conref="container_conref.dita#links/command_prefix"></ph> port
CONTAINER</ph> [PRIVATE_PORT[/PROTOCOL]]</title>
<dl>
<dlentry>
<dt>Purpose</dt>
<dd><ph id="port_purpose">List all port mappings for a container or retrieve the public port and IP
address that is mapped to your private port. </ph>For more information, see the <xref conref="container_cli_reference_native-docker.dita#container_cli_reference_native-docker/docker_port"></xref> command in the Docker help.</dd></dlentry></dl>
<dl>
<dlentry>
<dt>Parameters</dt>
<dd id="port_param"><parml>
<plentry>
<pt><varname>CONTAINER</varname></pt>
<pd>(Required) The container ID or name.</pd></plentry>
<plentry>
<pt><varname>PRIVATE PORT</varname></pt>
<pd>(Optional) The private port for which you want to look up the assigned public port and IP
address. </pd></plentry>
<plentry>
<pt><varname>PROTOCOL</varname></pt>
<pd>(Optional) The protocol that was assigned to your private port. It can be either
<varname>tcp</varname> or <varname>udp</varname>.</pd></plentry></parml></dd></dlentry></dl>
<dl>
<dlentry>
<dt>Example</dt>
<dd id="port_example">The following example is a request to list all port and IP mappings for a
container that is named
<varname>my_container</varname>.<codeblock><ph conref="container_conref.dita#links/command_prefix"></ph> port <varname>my_container</varname></codeblock></dd></dlentry>
<dlentry>
<dt>System Output</dt>
<dd><codeblock><systemoutput>9080/tcp -&gt; 192.0.2.25:9080</systemoutput></codeblock></dd>
<dd>In this example, <systemoutput>9080/tcp</systemoutput> is your private port that is using the
TCP/IP protocol. It is mapped to the public IP address <systemoutput>192.0.2.25</systemoutput> and
public port <systemoutput>9080</systemoutput>.</dd></dlentry></dl></section>
<section id="ps"><title><ph id="ps_cmdname"><ph conref="container_conref.dita#links/command_prefix"></ph> <ph id="ps_docker">ps [-a] [--filter
env=<varname>SEARCH_CRITERIA</varname>] [-l <varname>NUM</varname>] [-q] [-s]</ph></ph></title>
<dl>
<dlentry>
<dt>Purpose</dt>
<dd><ph id="ps_purpose">Retrieve a list of containers that are running in the space. By default,
only running containers are displayed.</ph> For more information, see the <xref conref="container_cli_reference_native-docker.dita#container_cli_reference_native-docker/docker_ps"></xref> command in the Docker help.</dd></dlentry>
<dlentry>
<dt>Parameters</dt>
<dd id="ps_param"><parml>
<plentry id="ps_all">
<pt>-a, --all</pt>
<pd>(Optional) Show all containers in the space, both running and stopped. </pd></plentry>
<plentry>
<pt>--filter env=<varname>SEARCH_CRITERIA</varname></pt>
<pd>(Optional) Search containers that have a specific environment variable value. You can filter
your containers by any environment variable key or value that is listed in the
<varname>Env</varname> section of your CLI response when you inspect a container. Replace
<varname>SEARCH_CRITERIA</varname> with the key or value you are looking for. Your search criteria
does not need to be an exact match. </pd></plentry>
<plentry id="ps_limit">
<pt>-l <varname>NUM</varname>, --limit <varname>NUM</varname></pt>
<pd>(Optional) List the most recently created containers, where <varname>NUM</varname> is the number
of the most recently created containers that you want to return. <p>For example, if you created
containers node1 through to node5 sequentially, the option <codeph>--limit 2</codeph> returns node4
and node5 because they are the last two containers that were created.</p></pd></plentry>
<plentry id="ps_quiet">
<pt>-q, --quiet</pt>
<pd>(Optional) Display only container IDs.</pd></plentry>
<plentry id="ps_size">
<pt>-s, --size</pt>
<pd>(Optional) List the sizes of the containers.</pd></plentry></parml></dd></dlentry>
<dlentry>
<dt>Examples</dt>
<dd><p>The following example is a request to see all running and stopped
containers.<codeblock><ph conref="container_conref.dita#links/command_prefix"></ph> ps -a</codeblock></p></dd></dlentry></dl></section>
<section id="rename"><title><ph conref="container_conref.dita#links/command_prefix"></ph> rename OLD_NAME NEW_NAME </title>
<dl>
<dlentry>
<dt>Purpose</dt>
<dd>Rename a container. For more information, see the <xref conref="container_cli_reference_native-docker.dita#container_cli_reference_native-docker/docker_rename"></xref> command in the Docker help.</dd></dlentry>
<dlentry>
<dt>Parameters</dt>
<dd><parml>
<plentry>
<pt><varname>NEW_NAME</varname></pt>
<pd>(Required) A new name for the container.</pd></plentry>
<plentry>
<pt><varname>OLD_NAME</varname></pt>
<pd>(Required) The old name of the container.</pd></plentry></parml></dd></dlentry>
<dlentry>
<dt>Example</dt>
<dd>The following example is a request to rename a container that is currently named
<varname>my_container</varname> to
<varname>container_renamed</varname>.<codeblock><ph conref="container_conref.dita#links/command_prefix"></ph> rename <varname>my_container</varname> <varname>container_renamed</varname></codeblock></dd></dlentry></dl></section>
<section id="reprovision"><title><ph conref="container_conref.dita#links/command_prefix"></ph> reprovision [-f]
[AVAILABILITY_ZONE]</title>
<dl>
<dlentry>
<dt>Purpose</dt>
<dd>Change the <keyword conref="cloudoeconrefs.dita#cloudoeconrefs/containerlong"></keyword> availability
zone for a space. The original quota for the space is maintained. By deploying your app in multiple
container groups in different availability zones, you are creating higher availability for your app
in case of hardware failures.<note type="attention">When you run this command, all of your single
containers and groups in this space will not be migrated to the new availability zone and will be
removed during the migration process. Images and volumes will not be affected.</note></dd></dlentry>
<dlentry>
<dt>Parameters</dt>
<dd><parml>
<plentry>
<pt>AVAILABILITY_ZONE</pt>
<pd>(Optional) The name of the <keyword conref="cloudoeconrefs.dita#cloudoeconrefs/containerlong"></keyword>
availability zone where your containers are deployed. If no <keyword conref="cloudoeconrefs.dita#cloudoeconrefs/containerlong"></keyword> availability zone is specified, the
default <keyword conref="cloudoeconrefs.dita#cloudoeconrefs/containerlong"></keyword> availability zone that
is set for the region is used.<note type="important">If an <keyword conref="cloudoeconrefs.dita#cloudoeconrefs/containerlong"></keyword> availability zone is included, the
<codeph>-f</codeph> option must also be included.</note><table id="table_rqx_h52_nx" conref="container_conref.dita#terms/table_azs">
<tgroup cols="2">
<tbody>
<row>
<entry></entry>
<entry></entry></row></tbody></tgroup></table></pd></plentry></parml>
<parml>
<plentry>
<pt>-f, --force</pt>
<pd>(Optional) Forces the re-creation of the <keyword conref="cloudoeconrefs.dita#cloudoeconrefs/containerlong"></keyword> in the <keyword conref="cloudoeconrefs.dita#cloudoeconrefs/bluemix_short"></keyword> space.</pd></plentry></parml></dd></dlentry>
<dlentry>
<dt>Example</dt>
<dd>The following example is a request to change the <keyword conref="cloudoeconrefs.dita#cloudoeconrefs/containerlong"></keyword> availability zone for the current space
to <userinput>dal09-02</userinput>.
<codeblock><ph conref="container_conref.dita#links/command_prefix"></ph> reprovision -f dal09-02</codeblock></dd></dlentry></dl></section>
<section id="restart"><title><ph conref="container_conref.dita#links/command_prefix"></ph> restart CONTAINER [CONTAINER] [-t SECS] </title>
<dl>
<dlentry>
<dt>Purpose</dt>
<dd><ph id="restart_purpose">Restart one or more containers.</ph> For more information, see the
<xref conref="container_cli_reference_native-docker.dita#container_cli_reference_native-docker/docker_restart"></xref> command in the Docker help.</dd></dlentry>
<dlentry>
<dt>Parameters</dt>
<dd><parml>
<plentry id="restart_container">
<pt><varname>CONTAINER</varname></pt>
<pd>(Required) The container name or ID of at least one container. You can run this command with
multiple containers by listing their names or IDs in the command with a space in between. </pd></plentry>
<plentry id="restart_secs">
<pt>-t <varname>SECS</varname>, --time <varname>SECS</varname></pt>
<pd>The number of seconds to wait before the container is restarted.</pd></plentry></parml></dd></dlentry>
<dlentry>
<dt>Example</dt>
<dd>The following example is a request to restart a container that is named
<varname>my_container</varname>.<codeblock><ph conref="container_conref.dita#links/command_prefix"></ph> restart <varname>my_container</varname></codeblock></dd></dlentry></dl></section>
<section id="rm"><title><ph id="container_rm_cmdname"><ph conref="container_conref.dita#links/command_prefix"></ph> rm [-f] CONTAINER [CONTAINER] </ph></title>
<dl>
<dlentry>
<dt>Purpose</dt>
<dd><ph id="rm_purpose">Remove one or more containers.</ph> For more information, see the <xref conref="container_cli_reference_native-docker.dita#container_cli_reference_native-docker/docker_rm"></xref> command in the Docker help.</dd></dlentry>
<dlentry>
<dt>Parameters</dt>
<dd id="container_rm_param"><parml>
<plentry id="rm_container">
<pt><varname>CONTAINER</varname></pt>
<pd>(Required) The container name or ID of at least one container. You can run this command with
multiple containers by listing their names or IDs in the command with a space in between.</pd></plentry></parml>
<parml>
<plentry id="rm_force">
<pt>-f, --force</pt>
<pd>(Optional) Forces the removal of a running or failed container.</pd></plentry></parml></dd></dlentry>
<dlentry>
<dt>Example</dt>
<dd>The following example is a request to remove a container that is named
<varname>my_container</varname>.<codeblock><ph conref="container_conref.dita#links/command_prefix"></ph> rm <varname>my_container</varname></codeblock></dd></dlentry></dl></section>
<section id="rmi"><title><ph conref="container_conref.dita#links/command_prefix"></ph> rmi [-R REGISTRY] IMAGE [IMAGE] </title>
<dl>
<dlentry>
<dt>Purpose</dt>
<dd><ph id="rmi_purpose">Remove one or more images from the logged-in organization's private
<keyword conref="cloudoeconrefs.dita#cloudoeconrefs/bluemix_short"></keyword> images registry.</ph> For more
information, see the <xref conref="container_cli_reference_native-docker.dita#container_cli_reference_native-docker/docker_rmi"></xref> command in the Docker help.</dd></dlentry>
<dlentry>
<dt>Parameters</dt>
<dd><parml>
<plentry id="rmi_image">
<pt><varname>IMAGE</varname></pt>
<pd>(Required) The full private <keyword conref="cloudoeconrefs.dita#cloudoeconrefs/bluemix_short"></keyword>
registry path to the image that you want to remove. If a tag is not specified in the image path, the
image tagged <codeph>latest</codeph> is deleted by default. You can run this command with multiple
images by listing each private <keyword conref="cloudoeconrefs.dita#cloudoeconrefs/bluemix_short"></keyword>
registry path in the command with a space in between. </pd></plentry>
<plentry id="rmi_registry">
<pt>-R <varname>REGISTRY</varname>, --registry <varname>REGISTRY</varname></pt>
<pd>(Optional) Change the registry host. The default is to use the registry that you used with the
<cmdname>login</cmdname> command.</pd></plentry></parml></dd></dlentry>
<dlentry>
<dt>Example</dt>
<dd>The following example is a request to remove the image
<codeph>mynamespace/myimage:latest</codeph>:<codeblock><ph conref="container_conref.dita#links/command_prefix"></ph> rmi registry.<keyword conref="cloudoeconrefs.dita#cloudoeconrefs/domainname"></keyword>/<varname>mynamespace</varname>/<varname>myimage</varname>:<varname>latest</varname></codeblock></dd></dlentry></dl></section>
<section id="route_map"><title><ph id="route_map_cmdname"><ph conref="container_conref.dita#links/command_prefix"></ph> route map [-d DOMAIN] [-n HOST] GROUP </ph></title>
<dl>
<dlentry>
<dt>Purpose</dt>
<dd><ph id="route_map_purpose">Establish the route for internet traffic to use to access a container
group. You can use this command to establish a new route or update an existing route. </ph></dd></dlentry>
<dlentry>
<dt>Parameters</dt>
<dd id="route_map_param"><parml>
<plentry id="route_map_domain">
<pt>-d <varname>DOMAIN</varname>, --domain <varname>DOMAIN</varname></pt>
<pd>(Optional) The domain name for the route, which is the second part of the full public route URL.
In most cases, the domain is <codeph><keyword conref="cloudoeconrefs.dita#cloudoeconrefs/Appdomainname"></keyword></codeph>. You can also use this
parameter to specify a custom domain. If you use a custom domain, do not include underscores (_) in
the domain name.</pd></plentry>
<plentry id="route_map_group">
<pt><varname>GROUP</varname></pt>
<pd>(Required) The group ID or name.</pd></plentry>
<plentry id="route_map_host">
<pt>-n <varname>HOST</varname>, --hostname <varname>HOST</varname></pt>
<pd>(Optional) The host name for the route. Do not include underscores (_) in the host name. The
host name is the first part of the full public route URL, such as <varname>mycontainerhost</varname>
in the URL <codeph><varname>mycontainerhost</varname>.<keyword conref="cloudoeconrefs.dita#cloudoeconrefs/Appdomainname"></keyword></codeph>.</pd></plentry></parml></dd></dlentry>
<dlentry>
<dt>Example</dt>
<dd>The following example is a request to map the route for a container group that is named
<codeph>my_container_group</codeph>. The host name is <codeph>my_host</codeph> and <codeph><keyword conref="cloudoeconrefs.dita#cloudoeconrefs/Appdomainname"></keyword></codeph> is the
domain.<codeblock><ph conref="container_conref.dita#links/command_prefix"></ph> route map -d <keyword conref="cloudoeconrefs.dita#cloudoeconrefs/Appdomainname"></keyword> -n <varname>my_host</varname> <varname>my_container_group</varname></codeblock></dd></dlentry></dl></section>
<section id="route_unmap"><title><ph id="route_unmap_cmdname"><ph conref="container_conref.dita#links/command_prefix"></ph> route unmap [-d DOMAIN] [-n HOST] GROUP </ph></title>
<dl>
<dlentry>
<dt>Purpose</dt>
<dd><ph id="route_unmap_purpose">Unmap the route from a container group. A group that does not have
a route is not accessible from the Internet.</ph></dd></dlentry>
<dlentry>
<dt>Parameters</dt>
<dd><parml>
<plentry id="route_unmap_domain">
<pt>-d <varname>DOMAIN</varname>, --domain <varname>DOMAIN</varname></pt>
<pd>(Optional) The domain name for the route.</pd></plentry>
<plentry id="route_unmap_group">
<pt><varname>GROUP</varname></pt>
<pd>(Required) The group ID or name.</pd></plentry>
<plentry id="route_unmap_host">
<pt>-n <varname>HOST</varname>, --hostname <varname>HOST</varname></pt>
<pd>(Optional) The host name for the route.</pd></plentry></parml></dd></dlentry>
<dlentry>
<dt>Example</dt>
<dd>The following example is a request to unmap the route for the group that is called
<codeph>my_container_group</codeph>, where <codeph>my_host</codeph> is the host name and
<codeph><keyword conref="cloudoeconrefs.dita#cloudoeconrefs/Appdomainname"></keyword></codeph> is the
domain.<codeblock><ph conref="container_conref.dita#links/command_prefix"></ph> route unmap -d <keyword conref="cloudoeconrefs.dita#cloudoeconrefs/Appdomainname"></keyword> -n <varname>my_host</varname> <varname>my_container_group</varname></codeblock></dd></dlentry></dl></section>
<section id="run"><title><ph id="run_cmdname"><ph conref="container_conref.dita#links/command_prefix"></ph><ph id="run_docker"> run [-p PORT] [-P] [-d] [-e ENV] [--env-file
ENVFILE] [-it] [--link NAME:ALIAS] [-m MEMORY] --name NAME<ph audience="blue"> <draft-comment author="Nadine">The --net option is staging only. We do not
want the customers to create multiple container networks because this is an expensive resource and
IBM wants to charge money for that in the future.</draft-comment>[--net=NETWORK]</ph> [--volume VOLUME:/DIRECTORY_PATH] IMAGE [CMD [CMD ...]] </ph></ph></title>
<dl>
<dlentry>
<dt>Purpose</dt>
<dd><ph id="run_purpose">Start a new container in the container cloud service from an image
name.</ph> By default, container in <keyword conref="cloudoeconrefs.dita#cloudoeconrefs/bluemix_short"></keyword> run in detached mode. For more
information, see the <xref conref="container_cli_reference_native-docker.dita#container_cli_reference_native-docker/docker_run"></xref> command in the Docker help.<note>You must ensure that the Cloud Foundry command tool is installed
and that you have a Cloud Foundry token. Successful login by using <codeph>cf login</codeph> and
<codeph><ph conref="container_conref.dita#links/command_prefix"></ph> login</codeph> generates the
required token. </note></dd></dlentry>
<dlentry>
<dt>Parameters</dt>
<dd id="run_param"><parml>
<plentry>
<pt><varname>CMD</varname></pt>
<pd>(Optional) The command and arguments are passed the container to execute. This command must be a
long-running command. Do not use a short-lived command, for example, <cmdname>/bin/date</cmdname>,
because it might cause the container to crash.<p>Example long-running commands, assuming that you
are using the <option>ibmnode</option> image that is provided in the <keyword conref="cloudoeconrefs.dita#cloudoeconrefs/containerlong"></keyword>
registry:<codeblock><ph conref="container_conref.dita#links/command_prefix"></ph> run --name <varname>my_container</varname> registry.<keyword conref="cloudoeconrefs.dita#cloudoeconrefs/domainname"></keyword>/<varname>ibmnode</varname> ping localhost</codeblock><codeblock><ph conref="container_conref.dita#links/command_prefix"></ph> run --name <varname>my_container</varname> registry.<keyword conref="cloudoeconrefs.dita#cloudoeconrefs/domainname"></keyword>/<varname>ibmnode</varname> -- tail -f /dev/null</codeblock><codeblock><ph conref="container_conref.dita#links/command_prefix"></ph> run --name <varname>my_container</varname> registry.<keyword conref="cloudoeconrefs.dita#cloudoeconrefs/domainname"></keyword>/<varname>ibmnode</varname> -- sh -c <q>while true; do date; sleep 20; done</q></codeblock><note>The
CMD and its arguments must come at the end of the <codeph><ph conref="container_conref.dita#links/command_prefix"></ph> group create </codeph> command
line.</note></p></pd></plentry>
<plentry>
<pt>-d</pt>
<pd>(Optional) Run the container in detached mode. Containers run in detached mode by default when
you use <codeph><ph conref="container_conref.dita#links/command_prefix"></ph> run</codeph>. In detached
mode, when the root process in the container exits, the container also exits. For example, when you
deploy a container from the ibmnode image, your container shuts down immediately after it is built
as no long running process exists. <note type="tip">If you choose to use <codeph>docker run</codeph>
instead of <codeph><ph conref="container_conref.dita#links/command_prefix"></ph> run</codeph>, the
<codeph>-d</codeph> option is required.</note></pd></plentry>
<plentry>
<pt>-e <varname>ENV</varname>, --env <varname>ENV</varname></pt>
<pd>(Optional) Set a number of environment variables where <option>ENV</option> is a
<codeph>key=value</codeph> pair. List multiple keys separately and if you include quotation marks,
include them around both the environment variable name and the value. <p>Example</p><codeph>-e
<q><varname>key1</varname>=<varname>value1</varname></q> -e
<q><varname>key2</varname>=<varname>value2</varname></q> -e
<q><varname>key3</varname>=<varname>value3</varname></q></codeph><p><table id="env_keys_group" conref="container_cli_reference_cfic.dita#container_cli_reference_cfic/env_keys">
<tgroup cols="2">
<tbody>
<row>
<entry></entry></row></tbody></tgroup></table></p></pd></plentry>
<plentry>
<pt>--env-file <varname>ENVFILE</varname></pt>
<pd>(Optional) Import environment variables from a file where <varname>ENVFILE</varname> is the path
to your file on your local directory. Every line in the file represents one
<codeph>key=value</codeph> pair. <p>Example</p><codeblock>KEY1=VALUE1
KEY2=VALUE2</codeblock></pd></plentry>
<plentry>
<pt><varname>IMAGE</varname></pt>
<pd>(Required) The image to include in the container. You can list commands after the image, but do
not put any options after the image; include all options before you specify an image.<p>If you are
using an image in your organization's private <keyword conref="cloudoeconrefs.dita#cloudoeconrefs/bluemix_short"></keyword> registry, specify the image in the
following format: <codeph>registry.<keyword conref="cloudoeconrefs.dita#cloudoeconrefs/domainname"></keyword>/<varname>NAMESPACE</varname>/<varname>IMAGE</varname></codeph></p><p>If you are using an image
that is provided by <keyword conref="cloudoeconrefs.dita#cloudoeconrefs/containerlong"></keyword>, specify
the image in the following format: <codeph>registry.<keyword conref="cloudoeconrefs.dita#cloudoeconrefs/domainname"></keyword>/<varname>IMAGE</varname></codeph></p></pd></plentry>
<plentry id="it">
<pt>-it</pt>
<pd>(Optional) Run the container in interactive mode. After the container is created, keep the
standard input display. Type <userinput>exit</userinput> to exit.<draft-comment>Need to find out how
to save the state of the container after you make changes in it.</draft-comment></pd></plentry>
<plentry>
<pt>--link <varname>NAME</varname>:<varname>ALIAS</varname></pt>
<pd>(Optional) Whenever you want a container to communicate with another container that is running,
you can address it using an alias for the host name. For more information, see <xref href="container_linking.dita" format="dita" scope="local"></xref>.</pd></plentry>
<plentry conref="container_cli_reference_cfic.dita#container_cli_reference_cfic/group_create_memory">
<pt></pt>
<pd></pd></plentry>
<plentry>
<pt>--name <varname>NAME</varname></pt>
<pd>(Required) Assign a name to the container. <note type="tip" conref="container_cli_reference_cfic.dita#container_cli_reference_cfic/container_name"></note></pd></plentry>
<plentry audience="blue">
<pt>--net=<varname>NETWORK</varname></pt>
<pd>(Optional) Assign an existing network to a container. To create a network, see the <xref href="container_cli_reference_cfic.dita#container_cli_reference_cfic/network_create"><ph conref="container_conref.dita#links/command_prefix_nocodeph"></ph> network create</xref> command. </pd></plentry>
<plentry>
<pt>-p <varname>PORT</varname>, --publish <varname>PORT</varname></pt>
<pd><p>(Optional) <ph id="port_desc">If you want to make your app accessible from the Internet, you need
to expose a public port. Include any ports that are specified in the Dockerfile for the image you
are using. You can choose between UDP and TCP to indicate the IP protocol that you want to use. If
you do not specify a protocol, your port is automatically exposed for TCP traffic. When you expose a
public port, you create a Public Network Security Group for your container that allows you to send
and receive public data on the exposed port only. All other public ports are closed and cannot be
used to access your app from the internet. You can include multiple ports with multiple
<option>-p</option> options. </ph> Ports cannot be mapped or forwarded. </p>
<p>If you do not expose a port, your container is accessible from the private container network
only. You can use the assigned private IP address to communicate with your container on the private
network. </p>
<p>Examples<ul>
<li><codeph>-p 9080</codeph></li>
<li><codeph>-p 9080/udp</codeph></li>
<li><codeph>-p 9080/udp -o 8000/tcp</codeph></li></ul></p>
<p>If you have an existing IP address in the space that you want to bind to the container, you can
specify the IP address with the port information. Include the IP address, the port, or the IP
address and the container port number, such as
<varname>&lt;ip-address&gt;</varname>:<varname>&lt;port_on_IP&gt;</varname>:<varname>&lt;container-port&gt;</varname>.
The port on the IP address must match the container port exposed in the Dockerfile. </p>
<p>Example<codeblock>192.0.2.23:9080:9080</codeblock></p>
<note id="ssl">Binding a public IP address does not include a SSL certificate which encrypts the
data that are sent to and from your single container. If your app requires SSL encryption, you can
either implement your own SSL solution or use a container group instead of a single container.
Container groups are bound to a public route that already includes a SSL certificate, so you can
access your container group with HTTPS without any additional configuration. For more information,
see <xref href="container_group_ui.dita#container_group_ui">Creating a container group with the
Bluemix GUI</xref>.</note>
<p conref="container_single_ui.dita#container_single_ui/ports_p"></p></pd></plentry>
<plentry>
<pt>-P</pt>
<pd>(Optional) Automatically expose the ports that are specified in the image's Dockerfile for HTTP
traffic.</pd></plentry>
<plentry id="volume_attach">
<pt>--volume <varname>VOLUME</varname>:<varname>/DIRECTORY_PATH</varname>[:ro]</pt>
<pd>(Optional) Attach a volume to a container by specifying the details in the following format
<codeph>VOLUME:/DIRECTORY_PATH[:ro]</codeph>.<ul>
<li><varname>VOLUME</varname> The volume ID or name.</li>
<li><varname>DIRECTORY_PATH</varname>: The absolute path to the directories in the container.</li>
<li><codeph>ro</codeph> Optional. Specifying <codeph>ro</codeph> makes the volume read-only instead
of the default read/write.</li></ul></pd></plentry></parml></dd></dlentry>
<dlentry>
<dt>Examples</dt>
<dd>The following example is a valid request to create and start a new container by using the
<filepath><varname>my_namespace</varname>/nginx</filepath> image, with the name
<varname>my_container</varname> and a 1024 MB memory limit, where <varname>my_namespace</varname> is
the logged in users associated
namespace.<codeblock><ph conref="container_conref.dita#links/command_prefix"></ph> run -m <varname>1024</varname> --name <varname>my_container</varname> registry.<keyword conref="cloudoeconrefs.dita#cloudoeconrefs/domainname"></keyword>/<varname>my_namespace</varname>/<varname>nginx</varname></codeblock><p>The
following example is a valid request to create and start a new container by using the
<filepath>my_namespace/blog</filepath> image, passing in some credentials as environment variables,
where <varname>my_namespace</varname> is the logged in users associated
namespace.<codeblock><ph conref="container_conref.dita#links/command_prefix"></ph> run -e <varname>USER</varname>=<varname>johnsmith</varname> -e <varname>PASS</varname>=<varname>password</varname> --name <varname>my_container</varname> registry.<keyword conref="cloudoeconrefs.dita#cloudoeconrefs/domainname"></keyword>/<varname>my_namespace</varname>/<varname>blog</varname></codeblock></p><p>The
following example is a valid request to add a volume to a container by using the
<filepath>my_namespace/blog</filepath> image, where <varname>my_namespace</varname> is the logged in
users associated
namespace.<codeblock><ph conref="container_conref.dita#links/command_prefix"></ph> run --name <varname>my_container</varname> --volume <varname>VolId1</varname>:<varname>/first/path</varname> --volume <varname>VolId2</varname>:<varname>/second/path</varname> registry.<keyword conref="cloudoeconrefs.dita#cloudoeconrefs/domainname"></keyword>/<varname>my_namespace</varname>/<varname>blog</varname></codeblock></p></dd></dlentry></dl></section>
<section id="start"><title><ph conref="container_conref.dita#links/command_prefix"></ph> start CONTAINER [CONTAINER] </title>
<dl>
<dlentry>
<dt>Purpose</dt>
<dd>Start one or more stopped containers. For more information, see the <xref scope="local" conref="container_cli_reference_native-docker.dita#container_cli_reference_native-docker/docker_start"></xref> command in the Docker help. To stop a container, see the <xref href="#container_cli_reference_cfic/stop" format="dita" scope="local">stop</xref> command.</dd></dlentry>
<dlentry>
<dt>Parameters</dt>
<dd><parml>
<plentry>
<pt><varname>CONTAINER</varname></pt>
<pd>(Required) The container name or ID of at least one container. You can run this command with
multiple containers by listing their names or IDs in the command with a space in between. </pd></plentry></parml></dd></dlentry>
<dlentry>
<dt>Example</dt>
<dd>The following example is a request to start a container that is named
<varname>my_container</varname>.<codeblock><ph conref="container_conref.dita#links/command_prefix"></ph> start <varname>my_container</varname></codeblock></dd></dlentry></dl></section>
<section id="stats"><title><ph conref="container_conref.dita#links/command_prefix"></ph> stats [--no-stream] CONTAINER [CONTAINER] </title>
<dl>
<dlentry>
<dt>Purpose</dt>
<dd>For one or more containers, view live usage statistics for the container resources. Data is
displayed as it is generated in real time. Use <userinput>CTRL+C</userinput> to exit. For more
information, see the <xref scope="local" conref="container_cli_reference_native-docker.dita#container_cli_reference_native-docker/docker_stats"></xref> command in the Docker help.</dd></dlentry>
<dlentry>
<dt>Parameters</dt>
<dd><parml>
<plentry>
<pt><varname>CONTAINER</varname></pt>
<pd>(Required) The container name or ID.</pd></plentry>
<plentry>
<pt>--no-stream</pt>
<pd>(Optional) Display the latest result only and do not include any information that follows
it.</pd></plentry></parml></dd></dlentry>
<dlentry>
<dt>Example</dt>
<dd>The following example is a request for the most recent statistics about a
container.<codeblock><ph conref="container_conref.dita#links/command_prefix"></ph> stats --no-stream <varname>my_container</varname></codeblock></dd></dlentry></dl></section>
<section id="stop"><title><ph conref="container_conref.dita#links/command_prefix"></ph> stop CONTAINER [CONTAINER] [-t SECS] </title>
<dl>
<dlentry>
<dt>Purpose</dt>
<dd>Stop one or more running containers. For more information, see the <xref scope="local" conref="container_cli_reference_native-docker.dita#container_cli_reference_native-docker/docker_stop"></xref> command in the Docker help. To start a container, see the <xref href="#container_cli_reference_cfic/start" format="dita" scope="local">start</xref> command.</dd></dlentry>
<dlentry>
<dt>Parameters</dt>
<dd><parml>
<plentry>
<pt><varname>CONTAINER</varname></pt>
<pd>(Required) The container name or ID of at least one container. You can run this command with
multiple containers by listing their names and IDs in the command with a space in between. </pd></plentry>
<plentry>
<pt>-t <varname>SECS</varname>, --time <varname>SECS</varname></pt>
<pd>The number of seconds to wait before the container is killed.</pd></plentry></parml></dd></dlentry>
<dlentry>
<dt>Example</dt>
<dd>The following example is a request to stop a container that is named
<varname>my_container</varname>.<codeblock><ph conref="container_conref.dita#links/command_prefix"></ph> stop <varname>my_container</varname></codeblock></dd></dlentry></dl></section>
<section id="top"><title><ph conref="container_conref.dita#links/command_prefix"></ph> top CONTAINER [CONTAINER] [<codeph>ps</codeph> options]</title>
<dl>
<dlentry>
<dt>Purpose</dt>
<dd>List the processes that are running in the container. <p>Other than the native
<codeph>top</codeph> command in Linux, the <codeph><ph conref="container_conref.dita#links/command_prefix"></ph> top</codeph> command displays the output of
the Linux <codeph>ps</codeph> command for the main processes that are running inside a container. As
a consequence, the memory and CPU usage is not updated in your CLI output when it changes for a
process. </p><note>If you need to see the output of the native Linux <codeph>top</codeph> command,
<xref href="#container_cli_reference_cfic/exec">exec</xref> in to your container and run the
<codeph>top</codeph> command.</note> For more information, see the <xref conref="container_cli_reference_native-docker.dita#container_cli_reference_native-docker/docker_top"></xref> command in the Docker help.</dd></dlentry>
<dlentry>
<dt>Parameters</dt>
<dd><parml>
<plentry>
<pt><varname>CONTAINER</varname></pt>
<pd>(Required) The container name or ID.</pd></plentry></parml></dd>
<dd><parml>
<plentry>
<pt><codeph><varname>ps</varname></codeph> options</pt>
<pd>(Optional) Use the options that are provided by the native Linux <codeph>ps</codeph> command to
further detail or filter the output of the <codeph><ph conref="container_conref.dita#links/command_prefix"></ph> top</codeph> command. </pd></plentry></parml></dd></dlentry>
<dlentry>
<dt>Example</dt>
<dd>The following example is a request to display detailed information for all current processes
that are running inside a container named
<varname>my_container</varname>.<codeblock><ph conref="container_conref.dita#links/command_prefix"></ph> top <varname>my_container</varname> -aux</codeblock></dd></dlentry></dl></section>
<section id="unbind-service"><title><codeph><ph conref="container_conref.dita#links/command_prefix"></ph> unbind-service</codeph> GROUP SERVICE_INSTANCE </title>
<dl>
<dlentry>
<dt>Purpose</dt>
<dd>Remove a service from a running container group. This command is only available to container
groups. Single containers must remove the container and create a new container without the service.
To bind a service, see the <xref href="#container_cli_reference_cfic/bind-service" format="dita">bind-service</xref> command.</dd></dlentry>
<dlentry>
<dt>Parameters</dt>
<dd><parml>
<plentry>
<pt><varname>GROUP</varname></pt>
<pd>(Required) The group ID or name.</pd></plentry>
<plentry>
<pt><varname>SERVICE_INSTANCE</varname></pt>
<pd>(Required) The name of the service instance to be removed from the container group.</pd></plentry></parml></dd></dlentry>
<dlentry>
<dt>Example</dt>
<dd>The following example is a request to unbind an instance of the Data Cache service named
MyDataCache from the container
<varname>my_container_group</varname>.<codeblock><ph conref="container_conref.dita#links/command_prefix"></ph> unbind-service <varname>my_container_group</varname> <varname>MyDataCache</varname></codeblock></dd></dlentry></dl></section>
<section id="unpause"><title><ph conref="container_conref.dita#links/command_prefix"></ph> unpause CONTAINER [CONTAINER] </title>
<dl>
<dlentry>
<dt>Purpose</dt>
<dd>Unpause all processes within one or more running containers. For more information, see the <xref scope="local" conref="container_cli_reference_native-docker.dita#container_cli_reference_native-docker/docker_unpause"></xref> command in the Docker help. To pause a container, see the <xref href="#container_cli_reference_cfic/pause" format="dita" scope="local">pause</xref> command.</dd></dlentry>
<dlentry>
<dt>Parameters</dt>
<dd><parml>
<plentry>
<pt><varname>CONTAINER</varname></pt>
<pd>(Required) The container name or ID of at least one container. You can run this command with
multiple containers by listing their names or IDs in the command with a space in between.</pd></plentry></parml></dd></dlentry>
<dlentry>
<dt>Example</dt>
<dd>The following example is a request to unpause a container that is named
<varname>my_container</varname>.<codeblock><ph conref="container_conref.dita#links/command_prefix"></ph> unpause <varname>my_container</varname></codeblock></dd></dlentry></dl></section>
<section id="unprovision"><title><ph conref="container_conref.dita#links/command_prefix"></ph> unprovision [-f]</title>
<dl>
<dlentry>
<dt>Purpose</dt>
<dd>Delete <keyword conref="cloudoeconrefs.dita#cloudoeconrefs/containerlong"></keyword> from the
<keyword conref="cloudoeconrefs.dita#cloudoeconrefs/bluemix_short"></keyword> space that you are logged into.
<note type="attention">When you run this command, all your single containers and container groups
are lost. Your space is still available in <keyword conref="cloudoeconrefs.dita#cloudoeconrefs/bluemix_short"></keyword>. To start using <keyword conref="cloudoeconrefs.dita#cloudoeconrefs/containerlong"></keyword> again, you must run <xref href="#container_cli_reference_cfic/login"></xref> to provision <keyword conref="cloudoeconrefs.dita#cloudoeconrefs/containerlong"></keyword> again.</note></dd></dlentry>
<dlentry>
<dt>Parameters</dt>
<dd><parml>
<plentry>
<pt>-f, --force</pt>
<pd>(Optional) Forces the deletion of the <keyword conref="cloudoeconrefs.dita#cloudoeconrefs/bluemix_short"></keyword> from the <keyword conref="cloudoeconrefs.dita#cloudoeconrefs/bluemix_short"></keyword> space.</pd></plentry></parml></dd></dlentry>
<dlentry>
<dt>Example</dt>
<dd>The following example is a request to delete the <keyword conref="cloudoeconrefs.dita#cloudoeconrefs/containerlong"></keyword> from the space.
<codeblock><ph conref="container_conref.dita#links/command_prefix"></ph> unprovision</codeblock></dd></dlentry></dl></section>
<section id="upgrade"><title><ph id="update_cmdname"><ph conref="container_conref.dita#links/command_prefix"></ph> update </ph></title>
<dl>
<dlentry>
<dt>Purpose</dt>
<dd>Check to see if there is a more recent version of the IBM Containers plug-in than the version
you have installed.</dd></dlentry>
<dlentry>
<dt>Example</dt>
<dd><codeblock><ph conref="container_cli_reference_cfic.dita#container_cli_reference_cfic/update_cmdname"></ph></codeblock></dd></dlentry></dl></section>
<section id="version"><title><ph id="version_cmdname"><ph conref="container_conref.dita#links/command_prefix"></ph> version </ph></title>
<dl>
<dlentry>
<dt>Purpose</dt>
<dd>Shows the version of Docker and the <keyword conref="cloudoeconrefs.dita#cloudoeconrefs/containerlong"></keyword> API. To see the version of the installed
Cloud Foundry plug-in for <keyword conref="cloudoeconrefs.dita#cloudoeconrefs/containerlong"></keyword>, run
<codeph>cf plugins</codeph> or <codeph><ph conref="container_conref.dita#links/command_prefix"></ph>
info</codeph>. For more information, see the <xref conref="container_cli_reference_native-docker.dita#container_cli_reference_native-docker/docker_version"></xref> command in the Docker help.</dd></dlentry>
<dlentry>
<dt>Example</dt>
<dd><codeblock><ph conref="container_cli_reference_cfic.dita#container_cli_reference_cfic/version_cmdname"></ph></codeblock></dd></dlentry></dl></section>
<section id="volume_create"><title><ph id="volume_create_cmdname"><ph conref="container_conref.dita#links/command_prefix"></ph> volume create VOLNAME [FSNAME] </ph></title>
<dl>
<dlentry>
<dt>Purpose</dt>
<dd>Create the volume.</dd></dlentry>
<dlentry>
<dt>Parameters</dt>
<dd id="volume_create_param"><parml>
<plentry>
<pt><varname>FSNAME</varname></pt>
<pd>(Optional) The file share name. If no file share is available or named the volume will be built
on the space's default file share.</pd></plentry></parml>
<parml>
<plentry>
<pt><varname>VOLNAME</varname></pt>
<pd>(Required) The volume name. <ph id="naming">The name can contain uppercase letters, lowercase
letters, numbers, underscores (_), and hyphens (-).</ph></pd></plentry></parml></dd></dlentry>
<dlentry>
<dt>Example</dt>
<dd>The following example is a request to create a
volume.<codeblock><ph conref="container_conref.dita#links/command_prefix"></ph> volume create <varname>my_volume</varname> <varname>my_fileshare</varname></codeblock></dd></dlentry></dl></section>
<section id="volume_fscreate"><title><ph id="volume_fscreate_cmdname"><ph conref="container_conref.dita#links/command_prefix"></ph> volume fs-create FSNAME FSSIZE FSIOPS </ph></title>
<dl>
<dlentry>
<dt>Purpose</dt>
<dd>Create a file share.</dd></dlentry>
<dlentry>
<dt>Parameters</dt>
<dd id="volume_fscreate_param"><parml>
<plentry>
<pt><varname>FSIOPS</varname></pt>
<pd>(Required) The file share IOPS. Valid values are 0.25, 2 or 4 IOPS per GB.</pd></plentry>
<plentry>
<pt><varname>FSNAME</varname></pt>
<pd>(Required) The file share name. <ph conref="container_cli_reference_cfic.dita#container_cli_reference_cfic/naming"></ph></pd></plentry>
<plentry>
<pt><varname>FSSIZE</varname></pt>
<pd>(Required) The file share system size in GB. Use <codeph><ph conref="container_conref.dita#links/command_prefix"></ph> volume fs-flavor-list</codeph> to list all
valid sizes</pd></plentry></parml></dd></dlentry>
<dlentry>
<dt>Example</dt>
<dd><codeblock><ph conref="container_conref.dita#links/command_prefix"></ph> volume fs-create <varname>my_fileshare</varname> <varname>20</varname> <varname>0.25</varname></codeblock></dd></dlentry></dl></section>
<section id="volume_fsflavorlist"><title><ph id="volume_fsflavorlist_cmd"><ph conref="container_conref.dita#links/command_prefix"></ph> volume fs-flavor-list </ph></title>
<dl>
<dlentry>
<dt>Purpose</dt>
<dd>Lists the file share sizes that are available to use.</dd></dlentry>
<dlentry>
<dt>Example</dt>
<dd><codeblock><ph conref="container_cli_reference_cfic.dita#container_cli_reference_cfic/volume_fsflavorlist_cmd"></ph></codeblock></dd></dlentry></dl></section>
<section id="volume_fsinspect"><title><ph id="volume_fsinspect_cmdname"><ph conref="container_conref.dita#links/command_prefix"></ph> volume fs-inspect FSNAME </ph></title>
<dl>
<dlentry>
<dt>Purpose</dt>
<dd>Inspect the file share.</dd></dlentry>
<dlentry>
<dt>Parameters</dt>
<dd><parml>
<plentry>
<pt><varname>FSNAME</varname></pt>
<pd>(Required) The file share name. </pd></plentry></parml></dd></dlentry>
<dlentry>
<dt>Example</dt>
<dd><codeblock><ph conref="container_conref.dita#links/command_prefix"></ph> volume fs-inspect <varname>my_fileshare</varname></codeblock></dd></dlentry></dl></section>
<section id="volume_fslist"><title><ph id="volume_fslist_cmdname"><ph conref="container_conref.dita#links/command_prefix"></ph> volume fs-list </ph></title>
<dl>
<dlentry>
<dt>Purpose</dt>
<dd>List the file shares in your organization.</dd></dlentry>
<dlentry>
<dt>Example</dt>
<dd><codeblock><ph conref="container_cli_reference_cfic.dita#container_cli_reference_cfic/volume_fslist_cmdname"></ph></codeblock></dd></dlentry></dl></section>
<section id="volume_fsrm"><title><ph id="volume_fsrm_cmdname"><ph conref="container_conref.dita#links/command_prefix"></ph> volume fs-rm FSNAME </ph></title>
<dl>
<dlentry>
<dt>Purpose</dt>
<dd>Remove a file share.</dd></dlentry>
<dlentry>
<dt>Parameters</dt>
<dd><parml>
<plentry>
<pt><varname>FSNAME</varname></pt>
<pd>(Required) The file share name. </pd></plentry></parml></dd></dlentry>
<dlentry>
<dt>Example</dt>
<dd><codeblock><ph conref="container_conref.dita#links/command_prefix"></ph> volume fs-rm <varname>my_fileshare</varname></codeblock></dd></dlentry></dl></section>
<section id="volume_inspect"><title><ph id="vol_inspect_cmdname"><ph conref="container_conref.dita#links/command_prefix"></ph> volume inspect VOLNAME </ph></title>
<dl>
<dlentry>
<dt>Purpose</dt>
<dd>Inspect the volume.</dd></dlentry>
<dlentry>
<dt>Parameters</dt>
<dd><parml>
<plentry>
<pt><varname>VOLNAME</varname></pt>
<pd>(Required) The volume name.</pd></plentry></parml></dd></dlentry>
<dlentry>
<dt>Example</dt>
<dd>The following example is a request to inspect the volume, where <varname>my_volume</varname> is
the name of the
volume.<codeblock><ph conref="container_conref.dita#links/command_prefix"></ph> volume inspect <varname>my_volume</varname></codeblock></dd></dlentry></dl></section>
<section id="volume_list"><title><ph id="volume_list_cmdname"><ph conref="container_conref.dita#links/command_prefix"></ph> volume list [--table]</ph></title>
<dl>
<dlentry>
<dt>Purpose</dt>
<dd>List the volumes.</dd></dlentry>
<dlentry>
<dt>Parameters</dt>
<dd><parml>
<plentry>
<pt>--table</pt>
<pd>(Optional) Structures the list output in a table format.</pd></plentry></parml></dd></dlentry>
<dlentry>
<dt>Example</dt>
<dd>The following example is a request to list all the
volumes.<codeblock><ph conref="container_cli_reference_cfic.dita#container_cli_reference_cfic/volume_list_cmdname"></ph></codeblock></dd></dlentry></dl></section>
<section id="volume_space-add" audience="blue"><title><ph id="volume_space-add_cmdname"><ph conref="container_conref.dita#links/command_prefix"></ph> volume space-add VOLNAME SPACE [SPACE]</ph></title>
<draft-comment author="Nadine">This content is staging only. We do not want to expose this feature
to customers because it was built to the specific needs of one IBM Containers customer. </draft-comment>
<dl>
<dlentry>
<dt>Purpose</dt>
<dd>Allow a volume to be accessible in an additional space within an organization.</dd></dlentry>
<dlentry>
<dt>Parameters</dt>
<dd><parml>
<plentry>
<pt><varname>SPACE</varname></pt>
<pd>(Required) The space name.</pd></plentry></parml></dd>
<dd><parml>
<plentry>
<pt><varname>VOLNAME</varname></pt>
<pd>(Required) The volume name.</pd></plentry></parml></dd></dlentry>
<dlentry>
<dt>Example</dt>
<dd>The following example is a request to add a space to a volume, where
<varname>my_volume</varname> is the name of the volume and <varname>my_space</varname> is the name
of the
space.<codeblock><ph conref="container_conref.dita#links/command_prefix"></ph> volume space-add <varname>my_volume</varname> <varname>my_space</varname></codeblock></dd></dlentry></dl></section>
<section id="volume_space-rm" audience="blue"><title><ph id="volume_space-rm_cmdname"><ph conref="container_conref.dita#links/command_prefix"></ph> volume space-rm VOLNAME SPACE [SPACE]</ph></title>
<draft-comment author="Nadine">This content is staging only. We do not want to expose this feature
to customers because it was built to the specific needs of one IBM Containers customer. </draft-comment>
<dl>
<dlentry>
<dt>Purpose</dt>
<dd>Remove the accessibility of a secondary space to a volume.</dd></dlentry>
<dlentry>
<dt>Parameters</dt>
<dd><parml>
<plentry>
<pt><varname>SPACE</varname></pt>
<pd>(Required) The space name.</pd></plentry></parml></dd>
<dd><parml>
<plentry>
<pt><varname>VOLNAME</varname></pt>
<pd>(Required) The volume name.</pd></plentry></parml></dd></dlentry>
<dlentry>
<dt>Example</dt>
<dd>The following example is a request to remove a space from a volume, where
<varname>my_volume</varname> is the name of the volume and <varname>my_space</varname> is the name
of the
space.<codeblock><ph conref="container_conref.dita#links/command_prefix"></ph> volume space-rm <varname>my_volume</varname> <varname>my_space</varname></codeblock></dd></dlentry></dl></section>
<section id="volume_rm"><title><ph id="volume_rm_cmdname"><ph conref="container_conref.dita#links/command_prefix"></ph> volume rm VOLNAME </ph></title>
<dl>
<dlentry>
<dt>Purpose</dt>
<dd>Remove the volume.</dd></dlentry>
<dlentry>
<dt>Parameters</dt>
<dd id="volume_rm_param"><parml>
<plentry>
<pt><varname>VOLNAME</varname></pt>
<pd>(Required) The volume name.</pd></plentry></parml></dd></dlentry>
<dlentry>
<dt>Example</dt>
<dd>The following example is a request to remove the volume, where <varname>my_volume</varname> is
the name of the
volume.<codeblock><ph conref="container_conref.dita#links/command_prefix"></ph> volume rm <varname>my_volume</varname></codeblock></dd></dlentry></dl></section>
<section id="wait"><title><ph conref="container_conref.dita#links/command_prefix"></ph> wait CONTAINER [CONTAINER] </title>
<dl>
<dlentry>
<dt>Purpose</dt>
<dd>Wait for a container to exit. During this waiting time your command line does not return and you
cannot enter commands. As soon as the container exits or stops, the exit code is printed in the CLI
output. For more information, see the <xref conref="container_cli_reference_native-docker.dita#container_cli_reference_native-docker/docker_wait"></xref> command in the Docker help.</dd></dlentry>
<dlentry>
<dt>Parameters</dt>
<dd><parml>
<plentry>
<pt><varname>CONTAINER</varname></pt>
<pd>(Required) The container name or ID.</pd></plentry></parml></dd></dlentry>
<dlentry>
<dt>Example</dt>
<dd>The following example is a request to wait for a container that is called
<varname>my_container</varname> to exit. As soon as it exits, the exit code is printed in the CLI.
<codeblock><ph conref="container_conref.dita#links/command_prefix"></ph> wait <varname>my_container</varname></codeblock></dd></dlentry></dl></section>
<section id="wait-status"><title><ph conref="container_conref.dita#links/command_prefix"></ph> wait-status CONTAINER</title>
<dl>
<dlentry>
<dt>Purpose</dt>
<dd>Wait for a single container or container group to reach a non-transient state. During this
waiting time your command line does not return and you cannot enter commands. As soon as the
container reaches a non-transient state, an <uicontrol>OK</uicontrol> message is displayed. For
single containers, the non-transient states include <codeph>Running</codeph>,
<codeph>Shutdown</codeph>, <codeph>Crashed</codeph>, <codeph>Paused</codeph>, or
<codeph>Suspended</codeph>. For container groups, the non-transient states include
<codeph>CREATE_COMPLETE</codeph>, <codeph>UPDATE_COMPLETE</codeph>, or <codeph>FAILED</codeph>.
<draft-comment>Confirm that this list of complete and failed statuses is
exhaustive.</draft-comment></dd></dlentry>
<dlentry>
<dt>Parameters</dt>
<dd><parml>
<plentry>
<pt><varname>CONTAINER</varname></pt>
<pd>(Required) The container or group name or ID.</pd></plentry></parml></dd></dlentry>
<dlentry>
<dt>Example</dt>
<dd>The following example is a request to wait for a container that is called
<varname>my_container</varname> until it reaches a non-transient state.
<codeblock><ph conref="container_conref.dita#links/command_prefix"></ph> wait-status <varname>my_container</varname></codeblock></dd></dlentry></dl></section></refbody><?tm 1435623321 0?></reference>

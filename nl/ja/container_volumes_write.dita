<?xml version="1.0" encoding="UTF-8"?>
<!--Arbortext, Inc., 1988-2011, v.4002-->
<!DOCTYPE task PUBLIC "-//IBM//DTD DITA IBM Task//EN"
 "ibm-task.dtd">
<task id="container_volumes_write" xml:lang="ja-jp">
<title>コマンド・ライン・インターフェース (CLI) を使用した非 root ユーザーのボリューム・アクセス権限の追加</title>
<titlealts>
<navtitle>CLI を使用した非 root ユーザーのボリューム・アクセス権限の追加</navtitle>
<searchtitle><keyword conref="cloudoeconrefs.dita#cloudoeconrefs/containerlong"></keyword> での非 root ユーザーのボリューム・アクセス権限の追加</searchtitle></titlealts>
<shortdesc>非 root ユーザーには、ボリューム・マウント・パスに対する書き込み権限がありません。
書き込み権限を付与するには、イメージの Dockerfile を編集して、適切な権限を設定したディレクトリーをマウント・パス上に作成する必要があります。
</shortdesc>
<prolog>
<metadata>
<keywords><indexterm>IBM Containers</indexterm><indexterm>コンテナー</indexterm><indexterm>永続ストレージ</indexterm><indexterm>ボリューム</indexterm><indexterm>書き込み</indexterm></keywords></metadata></prolog>
<taskbody>
<context><p><keyword conref="cloudoeconrefs.dita#cloudoeconrefs/containerlong"></keyword> では、Docker Engine 用に ユーザー名前空間機能が使用可能に設定されています。ユーザー名前空間には、コンテナーの root ユーザーが他のコンテナーや計算ホストにアクセスできないように分離する効果があります。
ただし、ボリュームは、コンテナーの計算ホストの外部の NFS ファイル共有上にあります。
ボリュームはコンテナー内の root ユーザーを認識するようにセットアップされますが、ボリュームはコンテナーの外部にあるため、ユーザー名前空間を認識しません。
</p><p>一部のアプリケーションでは、コンテナー内のユーザーだけが root ユーザーになります。しかし、多くのアプリケーションでは、コンテナー・マウント・パスに書き込む非 root ユーザーを指定します。ボリュームに対する書き込み権限を必要とする非 root ユーザーを指定するアプリケーションを設計する場合は、Dockerfile とエントリー・ポイント・スクリプトに、次の処理を追加する必要があります。
</p><ul>
<li>非 root ユーザーを作成する。</li>
<li>そのユーザーを一時的に root グループに追加する。</li>
<li>ボリューム・マウント・パスにディレクトリーを作成して、適切なユーザー権限を設定する。
</li></ul><ph id="nonroot_image" audience="blue">IBM は、ボリューム上に保管されているファイルとフォルダーの非 root ユーザーの書き込み権限を許可するように変更した<xref href="https://github.com/IBM-Bluemix/containers-nonroot-images" format="html" scope="external">サンプル Dockerfile</xref> を用意しています。これらの Dockerfiles を使用して、ご使用のプライベート <keyword conref="cloudoeconrefs.dita#cloudoeconrefs/bluemix_short"></keyword> レジストリーでイメージを作成し、マウントされたボリュームに正常に永続データが保管できるようにします。</ph><p><ph audience="blue">使用するイメージが IBM 修正イメージに含まれていない場合は、以下の手順に従って適切な非 root 権限で Dockerfile を作成します。Dockerfile の作成手順については、<xref href="container_images_building.dita" format="dita" scope="local"></xref>を参照してください。</ph>
</p></context>
<steps>
<step>
<cmd>ローカル・ディレクトリーに Dockerfile を作成します。
</cmd>
<info>この Dockerfile 例では、<varname>myguest</varname> という非 root ユーザーを作成します。
</info>
<info>
<codeblock>FROM registry.<varname props="keyref(DomainName)">domain_name</varname>/ibmnode:latest

# Create group and user with GID &amp; UID <varname>1010</varname>.
# In this case your are creating a group and user named <varname>myguest</varname>. 
# The GUID and UID <varname>1010</varname> is unlikely to create a conflict with any existing user GUIDs or UIDs in the image.
# The GUID and UID must be between 0 and 65536. Otherwise, container creation fails.
RUN groupadd --gid <varname>1010</varname> <varname>myguest</varname>
RUN useradd --uid <varname>1010</varname> --gid <varname>1010</varname> -m --shell /bin/bash <varname>myguest</varname>

ENV MY_USER=myguest

COPY entrypoint.sh /sbin/entrypoint.sh
RUN chmod 755 /sbin/entrypoint.sh

EXPOSE 22
ENTRYPOINT ["/sbin/entrypoint.sh"]</codeblock></info></step>
<step>
<cmd>Dockerfile と同じローカル・フォルダーに、エントリー・ポイント・スクリプトを作成します。
</cmd>
<info> このエントリー・ポイント・スクリプト例では、ボリューム・マウント・パスとして <filepath><varname>/mnt/myvol</varname></filepath> を指定します。
<codeblock>#!/bin/bash
set -e

# This is the mount point for the shared volume.
# Use this mount point with the <ph conref="container_conref.dita#links/command_prefix"></ph> run command.
# By default the mount point is owned by the root user.
MOUNTPATH="/<filepath>mnt</filepath>/<filepath>myvol</filepath>"
MY_USER=${MY_USER:-"myguest"}

# This function creates a subdirectory that is owned by 
# the non-root user under the shared volume mount path.
create_data_dir() {
  #Add the non-root user to primary group of root user.
  usermod -aG root $MY_USER

  # Provide read-write-execute permission to the group for the shared volume mount path.
  chmod 775 $MOUNTPATH

  # Create a directory under the shared path owned by non-root user <varname>myguest</varname>.
  su -c "mkdir -p ${MOUNTPATH}/mydata" -l $MY_USER
  su -c "chmod 700 ${MOUNTPATH}/mydata" -l $MY_USER
  ls -al ${MOUNTPATH}

  # For security, remove the non-root user from root user group.
  deluser $MY_USER root

  # Change the shared volume mount path back to its original read-write-execute permission.
  chmod 755 $MOUNTPATH
  echo "Created Data directory..."
}

create_data_dir

# This command creates a long-running process for the purpose of this example.
tail -F /dev/null</codeblock></info></step>
<step>
<cmd><keyword conref="cloudoeconrefs.dita#cloudoeconrefs/bluemix"></keyword> にログインします。</cmd>
<info>
<codeblock>bx login [-a api.<keyword conref="cloudoeconrefs.dita#cloudoeconrefs/domainname"></keyword>] [-sso]</codeblock>
<ph conref="container_conref.dita#sso/sso"></ph></info><substeps conref="container_conref.dita#sso/no_sso">
<substep>
<cmd></cmd></substep></substeps></step>
<step>
<cmd><keyword conref="cloudoeconrefs.dita#cloudoeconrefs/containerlong"></keyword> CLI を初期化します。</cmd>
<info>
<codeblock><ph conref="container_conref.dita#links/command_prefix_nocodeph">cc</ph> init</codeblock></info></step>
<step>
<cmd>Bluemix レジストリーにイメージを追加します。*</cmd>
<info><varname>&lt;my_namespace&gt;</varname> を、プライベート・イメージ・レジストリーの名前空間に必ず置き換えてください。名前空間を調べる必要がある場合は、<codeph><ph conref="container_conref.dita#links/command_prefix_nocodeph">cc</ph> namespace-get</codeph> を実行します。
</info>
<info>
<codeblock><ph conref="container_conref.dita#links/command_prefix_nocodeph">cc</ph> build -t registry.<varname props="keyref(DomainName)">domain_name</varname>/&lt;my_namespace&gt;/nonroot .</codeblock>

<note conref="container_conref.dita#links/docker_note"></note></info></step>
<step>
<cmd>ボリュームを
作成します。</cmd>
<info>
<codeblock><ph conref="container_conref.dita#links/command_prefix_nocodeph">cc</ph> volume-create <varname>my_volume</varname></codeblock></info></step>
<step>
<cmd>ボリュームをマウントし、<varname>nonroot</varname> イメージからコンテナーを実行します。*</cmd>
<info> ボリューム・マウント・パス <codeph>/<filepath>mnt</filepath>/<filepath>myvol</filepath></codeph> は、Dockerfile で指定されたマウント・パスと一致します。
<codeblock><ph conref="container_conref.dita#links/command_prefix_nocodeph">cc</ph> run --name <varname>my_container</varname> --volume <varname>my_volume</varname>:/<filepath>mnt</filepath>/<filepath>myvol</filepath> registry.ng.bluemix.net/&lt;my_namespace&gt;/nonroot</codeblock></info></step>
<step>
<cmd><varname>my_container</varname> が実行中であることを確認します。*</cmd>
<info>コンテナーの状況が <codeph>BUILDING</codeph> である場合は、まだそこにログインできません。
</info>
<info>
<codeblock><ph conref="container_conref.dita#links/command_prefix"></ph> ps</codeblock>

<screen>$ <ph conref="container_conref.dita#links/command_prefix"></ph> ps
CONTAINER ID        IMAGE                                         COMMAND             CREATED             STATUS                    PORTS      NAMES
d92ee43d-2af        registry.<varname props="keyref(DomainName)">domain_name</varname>/<varname>&lt;my_namespace&gt;</varname>/<varname>nonroot</varname>:latest   ""                  41 seconds ago      Running 29 seconds ago               <varname>my_container</varname></screen></info></step>
<step>
<cmd>コンテナーが実行されたら、コンテナーにログインします。*</cmd>
<info>
<codeblock><ph conref="container_conref.dita#links/command_prefix"></ph> exec -it <varname>my_container</varname> /bin/bash</codeblock></info></step>
<step>
<cmd>ボリューム・マウント・パスの許可を表示します。
</cmd>
<info>
<codeblock>ls -al <filepath>/mnt/myvol/</filepath></codeblock>

<screen>root@instance-006ff76b:/# ls -al /mnt/myvol/                                                                                                                                                             
total 12
drwxr-xr-x 3 root    root    4096 Jul 13 19:03 .
drwxr-xr-x 3 root    root    4096 Jul 13 19:03 ..
drwx------ 2 myguest myguest 4096 Jul 13 19:03 mydata</screen>

<p>この出力が示すように、root にはボリューム・マウント・パス <varname>mnt/myvol/</varname> に対する読み取り/書き込み/実行権限があり、非 root の <varname>myguest</varname> ユーザーには、<varname>mnt/myvol/mydata</varname> フォルダーに対する読み取り/書き込み権限があります。このように権限が更新されたことにより、非 root ユーザーは永続ボリュームにデータを書き込めるようになりました。
</p></info></step></steps></taskbody><?tm 1435623320 0?></task>

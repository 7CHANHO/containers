<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE tutorialLesson PUBLIC "-//IBM//DTD DITA Tutorial Lesson//EN"
 "tutorialLesson.dtd">
<tutorialLesson id="cs_apps_tutorial_lesson1" xml:lang="ja-jp" class="- topic/topic task/task tutorialLesson/tutorialLesson ">
<title>レッスン 1: アプリの 1 つのインスタンスを Kubernetes クラスターにデプロイする</title>
<titlealts>
<navtitle>レッスン 1: アプリの 1 つのインスタンスをクラスターにデプロイする</navtitle>
<searchtitle>チュートリアルのレッスン 1: <keyword conref="cloudoeconrefs.dita#cloudoeconrefs/containerlong"></keyword> でアプリの 1 つのインスタンスを Kubernetes クラスターにデプロイする</searchtitle></titlealts>
<shortdesc>このレッスンでは、Hello World アプリの 1 つのインスタンスをクラスターにデプロイします。
</shortdesc>
<prolog>
<metadata>
<keywords><indexterm>コンテナー</indexterm><indexterm>チュートリアル</indexterm><indexterm>cli</indexterm><indexterm>インストール</indexterm></keywords></metadata></prolog>
<taskbody>
<context><p><xref href="../api/content/containers/images/cs_app_tutorial_components1.png" format="png" scope="external">
<desc>レッスン 1: デプロイメントのセットアップ</desc>
<image href="images/cs_app_tutorial_components1.png" alt="デプロイメントのセットアップ" align="left" placement="break"></image></xref></p></context>
<steps>
<step conref="cs_cli_configure.dita#cs_cli_configure/bx_login">
<cmd></cmd></step>
<step>
<cmd><ph conref="cs_conref.dita#links/bx_cs_plugin_name"></ph> を初期化します。</cmd>
<info>
<codeblock><ph conref="cs_conref.dita#links/bx_cs">)</ph> init</codeblock></info></step>
<step>
<cmd>CLI でクラスターのコンテキストを設定します。</cmd><substeps conref="cs_cluster_tutorial_lesson2.dita#cs_cluster_tutorial_lesson2/kubeconfig">
<substep>
<cmd></cmd></substep></substeps></step>
<step>
<cmd>Docker を開始します。
</cmd>
<info>
<ul>
<li>Docker CE を使用している場合は、何の操作も必要ありません。</li>
<li>Linux を使用している場合は、<xref href="https://docs.docker.com/engine/admin/" format="html" scope="external">Docker の資料</xref>を調べて、ご使用の Linux ディストリビューションに応じた Docker の開始方法についての説明を確認してください。
</li>
<li>Windows や OSX で Docker Toolbox を使用している場合は、Docker Quickstart Terminal を使用できます。その場合は、Docker が自動的に開始します。
その後のいくつかの手順でも Docker Quickstart Terminal から Docker コマンドを実行し、それから KUBECONFIG セッション変数の設定時に使用した CLI に切り替えてください。
<ul>
<li>Docker QuickStart Terminal を使用している場合は、<keyword conref="cloudoeconrefs.dita#cloudoeconrefs/bluemix_short">c</keyword> CLI ログイン・コマンドを再び実行します。
<codeblock>bx login</codeblock></li></ul></li></ul></info></step>
<step>
<cmd>IBM Bluemix Container Registry CLI にログインします。</cmd>
<info>
<codeblock>bx cr login</codeblock>

<ul id="ul_q32_4px_3z">
<li><ph conref="cs_conref.dita#links/registry_name"></ph> の名前空間を忘れた場合は、以下のコマンドを実行します。
<codeblock>bx cr namespace-list</codeblock></li></ul></info></step>
<step>
<cmd><xref href="https://github.com/IBM/container-service-getting-started-wt" format="html" scope="external">Hello World アプリ</xref>のソース・コードをユーザー・ホーム・ディレクトリーに複製するか、ダウンロードします。
</cmd>
<info>
<codeblock>git clone https://github.com/IBM/container-service-getting-started-wt.git</codeblock></info>
<info>リポジトリーをダウンロードした場合は、圧縮ファイルを解凍します。
<p>例:<ul>
<li>Windows:
<filepath>C:&#xa5;Users&#xa5;<varname>my_username</varname>&#xa5;container-service-getting-started-wt</filepath></li>
<li>OS X:
<filepath>/Users/<varname>my_username</varname>/container-service-getting-started-wt</filepath></li></ul></p>このリポジトリーでは、同じアプリの 3 つのバージョンが、Stage1、Stage2、Stage3 という名前のフォルダーにそれぞれ入っています。
各バージョンに以下のファイルがあります。
<ul>
<li><filepath>Dockerfile</filepath>: イメージのビルド定義</li>
<li><filepath>app.js</filepath>: Hello World アプリ</li>
<li><filepath>package.json</filepath>: アプリに関するメタデータ</li></ul></info></step>
<step>
<cmd>最初のアプリのディレクトリー <filepath>Stage1</filepath> に移動します。
</cmd>
<info>
<codeblock>cd <varname>&lt;username_home_directory&gt;</varname>/container-service-getting-started-wt/Stage1</codeblock></info></step>
<step>
<cmd>Stage1 ディレクトリーのアプリ・ファイルを組み込んだ Docker イメージをビルドします。
</cmd>
<info>後日アプリを変更しなければならなくなった場合は、この手順を繰り返して別バージョンのイメージを作成します。
</info><substeps>
<substep>
<cmd>ローカル環境でイメージをビルドして、その名前、任意のタグ、および前のチュートリアルの <ph conref="cs_conref.dita#links/registry_name"></ph>で作成した名前空間をタグとして付けます。
</cmd>
<info>名前空間の情報でイメージにタグを付けておけば、後の手順でイメージをプッシュする時に、Docker がプッシュ先の場所を判別できるようになります。イメージ名には小文字の英数字または下線 (_) のみを使用してください。コマンドの末尾にピリオド (<codeph>.</codeph>) をつけることを忘れないようにしてください。このピリオドは、イメージをビルドするための Dockerfile とビルド成果物を、現行ディレクトリー内で探すよう Docker に指示するものです。
</info>
<info>
<codeblock>docker build -t registry.<keyword conref="cloudoeconrefs.dita#cloudoeconrefs/domainname"></keyword>/<varname>&lt;namespace&gt;</varname>/hello-world:1 .</codeblock>ビルドが完了したら、正常終了のメッセージを確認してください。
<screen>Successfully built <varname>&lt;image_id&gt;</varname></screen></info></substep>
<substep>
<cmd>イメージをレジストリー名前空間にプッシュします。</cmd>
<info>
<codeblock>docker push registry.<keyword conref="cloudoeconrefs.dita#cloudoeconrefs/domainname"></keyword>/<varname>&lt;namespace&gt;</varname>/hello-world:1</codeblock>出力:
<screen>The push refers to a repository [registry.<keyword conref="cloudoeconrefs.dita#cloudoeconrefs/domainname"></keyword>/<varname>&lt;namespace&gt;</varname>/hello-world]
ea2ded433ac8: Pushed
894eb973f4d3: Pushed
788906ca2c7e: Pushed
381c97ba7dc3: Pushed
604c78617f34: Pushed
fa18e5ffd316: Pushed
0a5e2b2ddeaa: Pushed
53c779688d06: Pushed
60a0858edcd5: Pushed
b6ca02dfe5e6: Pushed
1: digest: sha256:0d90cb73288113bde441ae9b8901204c212c8980d6283fbc2ae5d7cf652405
43 size: 2398</screen></info>
<info>イメージがプッシュされるのを待ってから、次の手順に進みます。
</info></substep>
<substep>
<cmd id="quickstart_switch">Docker Quickstart Terminal を使用している場合は、<codeph>KUBECONFIG</codeph> セッション変数の設定時に使用した CLI に切り替えます。
</cmd></substep>
<substep>
<cmd>イメージが名前空間に正常に追加されたことを確認します。</cmd>
<info>
<codeblock>bx cr images</codeblock>出力:
<screen>Listing images...

REPOSITORY                                  NAMESPACE   TAG       DIGEST         CREATED        SIZE     VULNERABILITY STATUS
registry.<keyword conref="cloudoeconrefs.dita#cloudoeconrefs/domainname"></keyword>/<varname>namespace</varname>/hello-world   <varname>namespace</varname>   1   0d90cb732881   1 minute ago   264 MB   OK</screen></info></substep></substeps></step>
<step>
<cmd><varname>hello-world-deployment</varname> という名前の Kubernetes デプロイメントを作成して、クラスター内のポッドにアプリをデプロイします。
</cmd>
<info>ポッドはデプロイメントを使用して管理され、コンテナー化されたアプリ・インスタンスを格納するために使用されます。
以下のデプロイメントでは、アプリを 1 つのポッドにデプロイします。
</info>
<info>
<codeblock>kubectl run <varname>hello-world-deployment</varname> --image=registry.<keyword conref="cloudoeconrefs.dita#cloudoeconrefs/domainname"></keyword>/<varname>&lt;namespace&gt;</varname>/hello-world:1</codeblock>
出力:
<screen>deployment "<varname>hello-world-deployment</varname>" created</screen>このデプロイメントではアプリのインスタンスを 1 つしか作成しないので、この後のレッスンでアプリのインスタンスを複数作成する場合より処理時間が短くてすみます。
</info></step>
<step>
<cmd>デプロイメントを NodePort サービスとして公開することによって、だれでもアプリにアクセスできるようにします。
</cmd>
<info>サービスによってアプリのネットワーキングが適用されます。
このクラスターにはワーカー・ノードが 1 つしかないので、ワーカー・ノード間のロード・バランシングは不要です。
したがって、1 つの NodePort を使用するだけで、ユーザーは外部からアプリにアクセスできるようになります。
Cloud Foundry アプリのポートを公開する場合と同じく、ここで公開する NodePort は、そのワーカー・ノードがトラフィックを listen するポートです。
この後の手順で、サービスにランダムに割り当てられた NodePort を確認します。
</info>
<info>
<codeblock>kubectl expose deployment/<varname>hello-world-deployment</varname> --type=NodePort --port=8080 --name=hello-world-service --target-port=8080</codeblock>
出力:
<screen>service "<varname>hello-world-service</varname>" exposed</screen>
<table frame="all" colsep="1" rowsep="1" id="table_lqp_hkm_2v">
<title>公開コマンドのパラメーターに関する詳細
</title>
<desc>
<p outputclass="summary">コマンドのパラメーターに関する詳細
</p></desc>
<tgroup cols="2"><colspec colnum="1" colname="c1" colwidth="150pt"></colspec><colspec colnum="2" colname="c2"></colspec>
<thead>
<row>
<entry namest="c1" nameend="c2"><ph conref="container_conref.dita#images/more_info"></ph>公開パラメーターに関する詳細
</entry></row></thead>
<tbody>
<row>
<entry><p><codeph>expose</codeph></p></entry>
<entry><p>リソースを Kubernetes サービスとして公開し、一般のユーザーが利用できるようにします。</p></entry></row>
<row>
<entry><p><codeph>deployment/<varname>hello-world-deployment</varname></codeph></p></entry>
<entry><p>このサービスを使用して公開するリソース・タイプとリソースの名前。</p></entry></row>
<row>
<entry><p><codeph>--name=<varname>hello-world-service</varname></codeph></p></entry>
<entry><p>サービスの名前。</p></entry></row>
<row>
<entry><p><codeph>--port=<varname>8080</varname></codeph></p></entry>
<entry><p>サービスが使用するポート。</p></entry></row>
<row>
<entry><p><codeph>--type=NodePort</codeph></p></entry>
<entry><p>作成するサービス・タイプ。</p></entry></row>
<row>
<entry><p><codeph>--target-port=<varname>8080</varname></codeph></p></entry>
<entry><p> サービスがトラフィックを誘導するポート。この例では、target-port が port と同じですが、作成する他のアプリでは異なる場合があります。
</p></entry></row></tbody></tgroup></table>デプロイメントの作業がすべて完了したので、動作を確認できます。
</info></step>
<step>
<cmd>ブラウザーでアプリをテストするために、URL を作成するための詳細情報を取得します。
</cmd><substeps>
<substep>
<cmd>サービスに関する情報を取得して、割り当てられた NodePort を確認します。
</cmd>
<info>
<codeblock>kubectl describe service <varname>hello-world-service</varname></codeblock>
出力:
<screen>Name:                   <varname>hello-world-service</varname>
Namespace:              default
Labels:                 run=<varname>hello-world-deployment</varname>
Selector:               run=<varname>hello-world-deployment</varname>
Type:                   NodePort
IP:                     10.10.10.8
Port:                   &lt;unset&gt; 8080/TCP
NodePort:               &lt;unset&gt; 30872/TCP
Endpoints:              172.30.171.87:8080
Session Affinity:       None
No events.</screen><codeph>expose</codeph> コマンドで NodePort を生成すると、30000 から 32767 の範囲でランダムに値が割り当てられます。
この例では、NodePort は <codeph>30872</codeph> です。</info></substep>
<substep>
<cmd>クラスター内のワーカー・ノードのパブリック IP アドレスを取得します。
</cmd>
<info>
<codeblock>bx cs workers <varname>pr_firm_cluster</varname></codeblock>
出力:
<screen>Listing cluster workers...
OK
ID                                            Public IP        Private IP      Machine Type   State      Status
dal10-pa10c8f571c84d4ac3b52acbf50fd11788-w1   169.47.227.138   10.171.53.188   free           <ph conref="cs_conref.dita#links/state"></ph>    <ph conref="cs_conref.dita#links/status"></ph></screen></info></substep></substeps></step>
<step>
<cmd>ブラウザーを開き、<filepath>http://<varname>&lt;IP_address&gt;</varname>:<varname>&lt;NodePort&gt;</varname></filepath> という形式の URL でアプリを確認します。
</cmd>
<info>この例の値を使用した場合、URL は <filepath>http://<varname>169.47.227.138</varname>:<varname>30872</varname></filepath> になります。
その URL をブラウザーに入力すると、以下のテキストが表示されます。
<screen>Hello world! Your app is up and running in a cluster!</screen>その URL を同僚に伝えて試してもらうか、自分のスマートフォンなどのブラウザーにそれを入力することによって、だれでも Hello World アプリを利用できることを確認できます。
</info></step>
<step conref="cs_apps_dashboard.dita#cs_cli_dashboard/kube_dashboard">
<cmd></cmd></step>
<step>
<cmd><uicontrol>「ワークロード」</uicontrol>タブで、作成したリソースを表示します。
</cmd>
<info>Kubernetes ダッシュボードでの検討作業が完了したら、<userinput>CTRL+C</userinput> を使用して <codeph>proxy</codeph> コマンドを終了します。
</info></step></steps>
<result><p>
最初のバージョンのアプリをデプロイできました。</p>
<p>このレッスンで実行したコマンドの数が多すぎると思うなら、一部の処理を自動化するために構成スクリプトを使用できます。
第 2 バージョンのアプリでは構成スクリプトを使用します。また、アプリのインスタンスを複数デプロイして可用性を高めます。その方法を学ぶために次のレッスンに進みましょう。
</p></result></taskbody></tutorialLesson>

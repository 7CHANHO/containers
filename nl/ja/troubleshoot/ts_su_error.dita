<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE tsTroubleshooting PUBLIC "-//IBM//DTD DITA Troubleshooting//EN"
 "troubleshooting.dtd">
<tsTroubleshooting id="su_error" xml:lang="ja-jp" class="- topic/topic tsTroubleshooting/tsTroubleshooting ">
<title><codeph>su</codeph> コマンドでの <codeph>Cannot create child process</codeph></title>
<titlealts>
<searchtitle><keyword conref="cloudoeconrefs.dita#cloudoeconrefs/containerlong"></keyword> の <codeph>su</codeph> コマンドでの <codeph>Cannot create child process</codeph></searchtitle></titlealts>
<shortdesc></shortdesc>
<tsBody class="- topic/body tsTroubleshooting/tsBody ">
<tsSymptoms class="- topic/section tsTroubleshooting/tsSymptoms "><p>コンテナーのユーザーを編集するのに代替ユーザー (<codeph>su</codeph>) Linux コマンドを使用している場合、<codeph>su</codeph> コマンドがローカル Docker 環境で動作しているにもかかわらず、<codeph>su: cannot create child process: Resource temporarily unavailable</codeph> というメッセージが表示されます。
コンテナーにログインするとき、または <codeph>su</codeph> コマンドをコンテナー内のスクリプトの一部として実行するときに、この問題が生じることがあります。
</p><p>例:</p><codeblock><ph conref="container_conref.dita#links/command_prefix"></ph> exec -it <varname>my_container</varname> bash</codeblock><codeblock>adduser <varname>user</varname></codeblock><codeblock>su - <varname>user</varname></codeblock>結果:<codeblock>su: cannot create child process: Resource temporarily unavailable</codeblock></tsSymptoms>
<tsCauses class="- topic/section tsTroubleshooting/tsCauses "><p>この問題は Centos 7 イメージでビルドされたコンテナーで多く発生しますが、他のイメージ・タイプでも発生することがあります。
</p></tsCauses>
<tsResolve class="- topic/section tsTroubleshooting/tsResolve ">Dockerfile を編集してイメージを再作成するか、または実行中のコンテナーにログインすることによって、この問題を解決できます。
<p>Dockerfile を編集して問題を解決するには、以下のようにします。
<ol>
<li>イメージを作成しているローカル・ディレクトリーで、<filepath>etc</filepath> フォルダーがまだ存在しなければ、それを作成します。
<codeblock>mkdir etc</codeblock></li>
<li><codeph>etc</codeph> ディレクトリーに移動します。
<codeblock>cd etc</codeblock></li>
<li><filepath>etc</filepath> フォルダーに、<filepath>pam.d</filepath> ディレクトリーを作成します。
<codeblock>mkdir pam.d</codeblock></li>
<li><codeph>pam.d</codeph> ディレクトリーに移動します。
<codeblock>cd pam.d</codeblock></li>
<li><filepath>pam.d</filepath> ディレクトリーで <filepath>su</filepath> という名前のファイルを作成し、それをテキスト・エディターで開きます。
</li>
<li><filepath>su</filepath> ファイルの中で、すべての <codeph>session</codeph> 変数が <codeph>optional</codeph> に設定されている以下のテキストをコピーして、変更内容をファイルに保存します。
<codeblock>#%PAM-1.0
auth            sufficient      pam_rootok.so
# Uncomment the following line to implicitly trust users in the "wheel" group.
#auth           sufficient      pam_wheel.so trust use_uid
# Uncomment the following line to require a user to be in the "wheel" group.
#auth           required        pam_wheel.so use_uid
auth            substack        system-auth
auth            include         postlogin
account         sufficient      pam_succeed_if.so uid = 0 use_uid quiet
account         include         system-auth
password        include         system-auth
session         optional        system-auth
session         optional        postlogin
session         optional        pam_xauth.so</codeblock></li>
<li>イメージの Dockerfile に、以下の情報を含めます。
<codeblock>RUN sed -i 's/session.*include/session        optional/' /etc/pam.d/su</codeblock></li>
<li>イメージを再作成します。
詳細については、<xref href="../container_images_building.dita" format="dita" scope="local">イメージのビルド</xref>を参照してください。</li>
<li>単一コンテナーまたはコンテナー・グループを再作成します。
詳しくは、<xref href="../container_single_cli.dita" format="dita" scope="local">単一のコンテナーの作成</xref>または<xref href="../container_group_cli.dita" format="dita" scope="local">コンテナー・グループの作成</xref>を参照してください。
</li>
<li>確認するために、以下のコマンドを実行します。
<codeblock><ph conref="container_conref.dita#links/command_prefix_nocodeph">cc</ph> logs <varname>container_name</varname></codeblock>結果:<codeblock>%Changing password for user <varname>user_name</varname>.
passwd: all authentication tokens updated successfully.</codeblock></li></ol></p><p>実行中のコンテナーにログインして問題を解決するには、以下のようにします。
<ol>
<li>コンテナーを作成します。
</li>
<li>コンテナーにログインします。
<codeblock><ph conref="container_conref.dita#links/command_prefix"></ph> exec -it <varname>my_container</varname> bash</codeblock></li>
<li><codeph>etc</codeph> ディレクトリーに移動します。
<codeblock>cd etc</codeblock></li>
<li><codeph>pam.d</codeph> ディレクトリーに移動します。
<codeblock>cd pam.d</codeblock></li>
<li>Linux <codeph>vi</codeph> コマンドを使用して、ビジュアル・エディターを開きます。
<codeblock>vi su</codeblock></li>
<li><filepath>su</filepath> ファイルの中で、セッション変数をすべて <codeph>optional</codeph> に変更し、変更内容をファイルに保存します。
<codeph>vi</codeph> エディターの使用方法について詳しくは、<xref href="https://www.washington.edu/computing/unix/vi.html" format="html" scope="external">How to Use the vi Editor</xref> を参照してください。
<codeblock>#%PAM-1.0
auth            sufficient      pam_rootok.so
# Uncomment the following line to implicitly trust users in the "wheel" group.
#auth           sufficient      pam_wheel.so trust use_uid
# Uncomment the following line to require a user to be in the "wheel" group.
#auth           required        pam_wheel.so use_uid
auth            substack        system-auth
auth            include         postlogin
account         sufficient      pam_succeed_if.so uid = 0 use_uid quiet
account         include         system-auth
password        include         system-auth
session         optional        system-auth
session         optional        postlogin
session         optional        pam_xauth.so</codeblock></li>
<li>ユーザーとしてログインします。
<codeblock>su - <varname>user</varname></codeblock></li>
<li><codeph>id</codeph> Linux コマンドを実行して、ユーザーの構成情報を表示します。
<codeblock>id</codeblock>結果:<codeblock>uid=1000(<varname>user</varname>) gid=1000(<varname>user</varname>) groups=1000(<varname>user</varname>)</codeblock></li></ol></p></tsResolve></tsBody></tsTroubleshooting>

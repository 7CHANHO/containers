<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//IBM//DTD DITA IBM Concept//EN" "ibm-concept.dtd">
<concept id="cs_ov" xml:lang="ja-jp">
<title>Kubernetes クラスターと <keyword conref="cloudoeconrefs.dita#cloudoeconrefs/containerlong"></keyword> について <ph conref="cs_conref.dita#links/release"></ph></title>
<titlealts>
<navtitle>サービスについて</navtitle>
<searchtitle>Kubernetes クラスターと <keyword conref="cloudoeconrefs.dita#cloudoeconrefs/containerlong"></keyword> について</searchtitle></titlealts>
<shortdesc><keyword conref="cloudoeconrefs.dita#cloudoeconrefs/containerlong"></keyword> は、Docker と Kubernetes を結合させて、強力なツール、直観的なユーザー・エクスペリエンス、標準装備のセキュリティーと分離機能を提供します。Kubernetes API を使用することによって、独立したコンピュート・ホストから成るクラスター上でのコンテナー化アプリのデプロイメント、操作、スケーリング、モニタリングを自動化することができます。
</shortdesc>
<prolog>
<metadata>
<keywords><indexterm>Kubernetes</indexterm><indexterm>クラスター</indexterm><indexterm>API</indexterm><indexterm>シークレット</indexterm><indexterm>コンテナー</indexterm><indexterm>Docker</indexterm><indexterm>IBM Bluemix Container Service</indexterm></keywords></metadata></prolog>
<conbody>
<note type="attention" audience="unknown">
<ul>
<li>ベータ機能として Kubernetes クラスター管理を使用することができます。この機能は、変更されたりオファーから除去されたりする可能性もあります。</li>
<li><ph conref="cs_conref.dita#links/region2_ph"></ph></li></ul></note>
<p>Kubernetes は Google によって Borg プロジェクトの一部として開発され、2014 年にオープン・ソース・コミュニティーに引き渡されました。Kubernetes は、Google が 15 年以上にわたって続けてきた、コンテナー化されたインフラストラクチャーを実動ワークロード、オープン・ソース・コントリビューション、Docker コンテナー管理ツールと結合させて実行するための調査活動の結果として生まれました。これは機密保護機能のある分離したアプリ・プラットフォームであり、ポータブルで拡張可能性に優れ、フェイルオーバー時の自己修復機能を備えています。
</p>
<p>ここでは、次の概念について解説し、Kubernetes の基本的な動作を説明します。<xref href="../api/content/containers/images/cs_app_tutorial_components1.png" format="png" scope="external">
<desc>最小限のデプロイメント・セットアップ</desc>
<image href="images/cs_app_tutorial_components1.png" alt="デプロイメント・セットアップ" align="left" placement="break" id="image_nk3_zf2_sz"></image></xref><dl>
<dlentry>
<dt>クラスター</dt>
<dd><p>Kubernetes クラスターは、ワーカー・ノードと呼ばれる 1 つ以上の仮想マシンから成ります。
各ワーカー・ノードは、コンテナー化アプリをデプロイ、実行、管理できる場所であるコンピュート・ホストを表します。
ワーカー・ノードは、クラスター内のすべての Kubernetes リソースを一元的に制御してモニターする Kubernetes マスターによって管理されます。
コンテナー化アプリをデプロイする際、Kubernetes マスターは、デプロイメント要件とクラスターの使用可能容量を考慮に入れて、どこにアプリをデプロイするかを決定します。
</p></dd></dlentry>
<dlentry>
<dt>ポッド</dt>
<dd>Kubernetes クラスターにデプロイされる各コンテナー化アプリは、ポッドによってデプロイ、実行、管理されます。
ポッドは Kubernetes クラスター内のデプロイ可能な最小のユニットを表し、単一のユニットとして処理される必要があるコンテナーをグループ化するのに使用します。ほとんどの場合、各コンテナーはそのコンテナー独自のポッドにデプロイされます。ただしアプリでは、コンテナーとその他のヘルパー・コンテナーを 1 つのポッドにデプロイすることによって、同じプライベート IP アドレスを使用してそれらのコンテナーをアドレス指定できるようにする必要がある場合もあります。</dd></dlentry>
<dlentry>
<dt>デプロイメント</dt>
<dd>デプロイメントは Kubernetes リソースであり、デプロイメントの中でコンテナーと、アプリの実行に必要な他の Kubernetes リソース (永続ストレージ、サービス、アノテーションなど) が指定されます。 デプロイメントは Kubernetes デプロイメント・スクリプトで文書化されます。デプロイメントを実行するときは、
Kubernetes マスターが、クラスターのワーカー・ノードで使用可能な容量を考慮しながら、指定されたコンテナーをポッドにデプロイします。
他の Kubernetes リソースは、デプロイメント・スクリプトの指定どおりに作成され、構成されます。
<p>デプロイメントを使用して、ローリング更新中に追加するポッドの数や、1 度に使用不可にできるポッドの数など、アプリの更新戦略を定義できます。
ローリング更新の実行時には、デプロイメントによって、リビジョンが動作しているかどうかが確認され、障害が検出されるとロールアウトが停止されます。
</p></dd></dlentry>
<dlentry>
<dt>サービス</dt>
<dd>Kubernetes サービスによってポッドのセットをグループ化し、クラスター内の他のサービスからそれらのポッドにアクセスするためのネットワーク接続を提供します。そうすれば、各ポッドの実際のプライベート IP アドレスを公開する必要はありません。
サービスを使用することにより、アプリをクラスター内または公開インターネットで使用可能にできます。
</dd></dlentry></dl></p></conbody></concept>

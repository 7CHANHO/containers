<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE tutorialLesson PUBLIC "-//IBM//DTD DITA Tutorial Lesson//EN"
 "tutorialLesson.dtd">
<tutorialLesson id="container_compose_config" xml:lang="ja-jp" class="- topic/topic task/task tutorialLesson/tutorialLesson ">
<title>レッスン 1: マルチコンテナー・デプロイメントを構成する</title>
<titlealts>
<navtitle>マルチコンテナー・デプロイメントの構成</navtitle>
<searchtitle>チュートリアル・レッスン 1: Docker Compose と <keyword conref="cloudoeconrefs.dita#cloudoeconrefs/containerlong"></keyword> を使用してマルチコンテナー・デプロイメントを構成する</searchtitle></titlealts>
<shortdesc>まず、<filepath>docker-compose.yml</filepath> という名前の YAML ファイルの中で、マルチコンテナー・デプロイメントの各サービスを構成します。サービスごとに、イメージ、公開するポート、そしてシステム内の他のサービスへのリンクを指定します。
</shortdesc>
<prolog>
<metadata>
<keywords><indexterm>コンテナー</indexterm><indexterm>cli</indexterm><indexterm>Docker Compose</indexterm><indexterm>マルチコンテナー・アプリ</indexterm><indexterm>マルチコンテナー・デプロイメント</indexterm><indexterm>IBM Containers</indexterm><indexterm>docker-compose.yml</indexterm></keywords></metadata></prolog>
<taskbody>
<prereq>始める前に、以下の手順を検討してください。<ul>
<li><codeph><ph conref="container_conref.dita#links/command_prefix"></ph> namespace-get</codeph> を実行することにより、名前空間情報を取り出し、その情報を <varname>$your_namespace</varname> という名前の環境変数に格納します。<codeblock><varname>$your_namespace</varname>=&lt;my_namespace_information&gt;</codeblock></li>
<li>プライベート <keyword conref="cloudoeconrefs.dita#cloudoeconrefs/bluemix_short"></keyword> イメージ・レジストリー中に <xref href="container_gettingstarted_tutorial_lesson2.dita" format="dita" scope="local">Lets-Chat と MongoDB コンテナーのイメージ</xref>をビルドします。</li></ul></prereq>
<steps>
<step>
<cmd>コンピューター上に <varname>composetutorial</varname> という名前の Docker Compose プロジェクト・ディレクトリー (ここに Docker Compose 構成ファイルを保存できる) を作成し、このディレクトリーにナビゲートします。
</cmd>
<info>Docker Compose コマンドの実行時には、構成ファイルが見つかるように、このディレクトリー内で実行する必要があります。
そうでないと、Docker Daemon からエラー・メッセージが出されます。実行時にはすべてのファイルが Docker Daemon に送信されるため、デプロイメントの時間を短縮するため、サブディレクトリーが含まれたディレクトリーは選択しないようにしてください。
<codeblock>mkdir <varname>composetutorial</varname> &amp;&amp; cd <varname>composetutorial</varname></codeblock></info></step>
<step>
<cmd><filepath>docker-compose.yml</filepath> ファイルを作成します。</cmd>
<info>コンピューター上の任意の CLI エディターまたはテキスト・エディターを使用して、構成ファイルを作成できます。次の例は、<xref href="http://www.nano-editor.org/dist/v2.2/nano.html" format="html" scope="external">nano editor</xref> を使用して <filepath>docker-compose.yml</filepath> ファイルを作成する方法を示しています。
<ol>
<li>nano エディターを開いて、ファイル名として <filepath>docker-compose.yml</filepath> を入力します。
<codeblock>nano <filepath>docker-compose.yml</filepath></codeblock></li>
<li>Lets-Chat アプリを実行するマルチコンテナー・デプロイメントのサービスを定義します。<varname>#</varname> を使用するとコメントを入力できます。
<codeblock>#Name of your Lets-Chat service. 
#The first container that is started for this service is named:
#<filepath>composetutorial_lets-chat_1</filepath>
lets-chat: 
  #Container image that is used to run the lets-chat service. 
  #Use the full path to your private Bluemix images registry.
  image: registry.<keyword conref="cloudoeconrefs.dita#cloudoeconrefs/domainname"></keyword>/<varname>$your_namespace</varname>/lets-chat  
  #Enter a public IP address and port 8080. Run <codeph><ph conref="container_conref.dita#links/command_prefix"></ph> ips</codeph>
  #to list available public IP addresses in your space. 
  #Option 1: If you do not have a public IP address 
  #that you can use, you can request a new one as follows: 
  #ports:
  #- "request:8080:8080". 
  #Option 2: If you want to bind a public IP address after your Lets-Chat container
  #is created by using the <codeph><ph conref="container_conref.dita#links/command_prefix"></ph> ip-bind</codeph> command, enter the following:
  #ports:
  #- "8080"
  #Option 3: Bind a public IP address directly to your Lets-Chat container
  #ports: 
  #- "<varname>YOUR_PUBLIC_IP_ADDRESS</varname>:8080:8080"
  #Choose one of the port options described. 
  ports:
   - "<varname>SELECT_YOUR_PORT_OPTION</varname>"
  #lets-chat service is linked to the mongo service. 
  links: 
    - mongo
#Name of your Mongo database service. 
#The first container that is started for this service is named:
#<filepath>composetutorial_mongo_1</filepath>
mongo:
  #Container image that is used to run the mongo service. 
  #Use the full path to your private Bluemix images registry.
  image: registry.<keyword conref="cloudoeconrefs.dita#cloudoeconrefs/domainname"></keyword>/<varname>$your_namespace</varname>/mongo
  #Container port 27017 is published within your private container network. 
  #If a container instance wants to send messages to a mongo container, 
  #requests need to be sent to this port. 
  expose:
    - "27017"</codeblock><note type="tip"> 独自の <filepath>docker-compose.yml</filepath> ファイルを作成する際は、少なくとも 1 つのサービス名と、使用するコンテナー・イメージへのリンクを追加して、<codeph>docker-compose up</codeph> コマンドが構成ファイルからコンテナーをビルドできるようにしてください。</note><note><keyword conref="cloudoeconrefs.dita#cloudoeconrefs/containerlong"></keyword> は、<filepath>docker-compose.yml</filepath> ファイル形式のバージョン 1 のみサポートしています。バージョン 2 は現在サポートされていません。<xref href="https://docs.docker.com/compose/compose-file/compose-file-v1/" format="html" scope="external">Docker 構成ファイル・バージョン 1 リファレンス</xref>に、<filepath>docker-compose.yml</filepath> ファイルの作成方法について、他にも例を記載しています。
</note></li>
<li><uicontrol>Ctrl + o</uicontrol> を押して、変更を保存します。<uicontrol>ENTER</uicontrol> を押して、変更を確認します。</li>
<li><uicontrol>ctrl + x</uicontrol> を押して、nano エディターを終了します。
</li></ol></info></step></steps>
<result>
これで、<keyword conref="cloudoeconrefs.dita#cloudoeconrefs/containerlong"></keyword> と Docker Compose に、<xref href="container_compose_lesson_run.dita#container_compose_run" format="dita">Lets-Chat アプリを実行するマルチコンテナー・デプロイメントをデプロイする</xref>用意ができました。</result></taskbody></tutorialLesson>

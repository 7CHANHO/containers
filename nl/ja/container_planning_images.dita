<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE task PUBLIC "-//IBM//DTD DITA IBM Task//EN"
 "ibm-task.dtd">
<task id="container_planning_images">
<title>IBM パブリック・イメージ、Docker Hub のイメージ、プライベート・イメージ</title>
<titlealts>
<navtitle>コンテナー・イメージ</navtitle>
<searchtitle><keyword conref="cloudoeconrefs.dita#cloudoeconrefs/containerlong"></keyword> のコンテナーのイメージの計画</searchtitle></titlealts>
<shortdesc><ph id="image_def" conref="container_conref.dita#terms/image_definition">A container
image is the basis for every container that you create. The image is a read-only file that holds the
operating system, the app and all of its dependencies, and describes how a container is configured.
Think of a container image as an executable app file (<filepath>.exe</filepath> or
<filepath>.bin</filepath>). As soon as you run the executable app file, you create an instance of
your app. When you run a container, you create a container instance from the image. </ph><ph conref="container_conref.dita#terms/image_storage"></ph></shortdesc>
<prolog>
<metadata>
<keywords><indexterm>計画</indexterm><indexterm>IBM Containers</indexterm><indexterm>プライベート・イメージ</indexterm><indexterm>ローカル・イメージ</indexterm><indexterm>コンテナー</indexterm><indexterm>イメージ</indexterm><indexterm>Docker ハブ</indexterm></keywords></metadata></prolog>
<taskbody>
<context><keyword conref="cloudoeconrefs.dita#cloudoeconrefs/containerlong"></keyword> の使用を計画するときには、使用するコンテナー・イメージについて決定する必要があります。
プライベート <keyword conref="cloudoeconrefs.dita#cloudoeconrefs/bluemix_short"></keyword> レジストリーにイメージを作成し、ビルドして使用するには、いくつかの方法があります。<note type="important" id="max_size"><keyword conref="cloudoeconrefs.dita#cloudoeconrefs/containerlong"></keyword> で単一コンテナーまたはスケーラブルなコンテナー・グループとして実行できる各イメージの最大サイズは 10 GB です。
</note><dl id="available_images">
<dlentry>
<dt>IBM パブリック・イメージ</dt>
<dd>手始めに、IBM Liberty や IBM Node のイメージなどの、<keyword conref="cloudoeconrefs.dita#cloudoeconrefs/containerlong"></keyword> に用意されている <xref href="container_images.dita" format="dita">IBM パブリック・イメージ</xref>のいずれかを使用して、<keyword conref="cloudoeconrefs.dita#cloudoeconrefs/containerlong"></keyword> の機能をテストします。
そして、それらのイメージのいずれかを親イメージとして使用し、Dockerfile を変更し、独自のアプリ・コードを使用して、親イメージの上に独自のイメージをビルドできます。
</dd></dlentry>
<dlentry>
<dt>Docker Hub のイメージ</dt>
<dd><xref href="container_images_copying.dita" format="dita">イメージを Docker Hub から直接</xref>プライベート <keyword conref="cloudoeconrefs.dita#cloudoeconrefs/bluemix_short"></keyword> レジストリーにコピーするか、または<xref href="container_images_pulling.dita" format="dita">イメージを Docker Hub からプル</xref>し、ローカルで変更を加えた後、レジストリー内で直接ビルドします。</dd></dlentry>
<dlentry>
<dt>独自イメージの作成</dt>
<dd>ローカル Docker 環境で既に使用しているコンテナー・イメージがある場合は、それらを <keyword conref="cloudoeconrefs.dita#cloudoeconrefs/containerlong"></keyword> で使用するために、<xref href="container_images_pulling.dita" format="dita">それらをプライベート <keyword conref="cloudoeconrefs.dita#cloudoeconrefs/bluemix_short"></keyword> レジストリーにプッシュ</xref>することができます。また、独自の Dockerfile をローカルに作成し、ビルドし、テストした後、プライベート・イメージ・レジストリーにプッシュすることもできます。</dd></dlentry></dl></context></taskbody>
<task id="viewing_images">
<title>プライベート・イメージ・レジストリー内のイメージの表示</title>
<titlealts>
<searchtitle><keyword conref="cloudoeconrefs.dita#cloudoeconrefs/bluemix_short"></keyword> プライベート・レジストリー内のイメージの表示</searchtitle></titlealts>
<shortdesc><keyword conref="cloudoeconrefs.dita#cloudoeconrefs/bluemix_short"></keyword> GUI または CLI を使用して、プライベート <keyword conref="cloudoeconrefs.dita#cloudoeconrefs/bluemix_short"></keyword> イメージ・レジストリー内にある使用可能なすべてのコンテナー・イメージを表示できます。</shortdesc>
<prolog>
<metadata>
<keywords><indexterm>イメージの表示</indexterm><indexterm>IBM Containers</indexterm><indexterm>レジストリー</indexterm><indexterm>GUI</indexterm><indexterm>CLI</indexterm></keywords></metadata></prolog>
<taskbody>
<steps>
<step>
<cmd>IBM 提供のイメージと、ユーザーがプライベート・レジストリーにプッシュしたイメージを表示します。</cmd><choices>
<choice><keyword conref="cloudoeconrefs.dita#cloudoeconrefs/bluemix_short"></keyword> GUI で、カタログを選択してから<uicontrol>「コンテナー」</uicontrol>を選択します。
IBM 提供のイメージと、ユーザーが <keyword conref="cloudoeconrefs.dita#cloudoeconrefs/bluemix_short"></keyword> プライベート・レジストリーにプッシュしたイメージが表示されます。</choice>
<choice>CLI から、<codeph><ph conref="container_conref.dita#links/command_prefix"></ph> images</codeph> を実行します。</choice></choices></step></steps></taskbody></task>
<task id="vulnerability_advisor">
<title>イメージ脆弱性の検討</title>
<titlealts>
<searchtitle><keyword conref="cloudoeconrefs.dita#cloudoeconrefs/bluemix_short"></keyword> プライベート・レジストリー内のイメージの脆弱性の確認</searchtitle></titlealts>
<shortdesc>プライベート <keyword conref="cloudoeconrefs.dita#cloudoeconrefs/bluemix_short"></keyword> レジストリーにイメージを追加すると、Vulnerability Advisor によって自動的にイメージがスキャンされ、組織管理者が設定した標準ポリシーおよび Ubuntu の既知の問題のデータベースとの照合が行われます。Vulnerability Advisor は、インベントリー・パッケージ、構成、開かれているポート、および Docker メタデータを検査します。
スキャンが完了したら、イメージをコンテナー内で使用する前に、潜在的な脆弱性のリストを検討し、必要に応じて対処できます。組織管理者が設定したポリシーに応じて、そのイメージからのコンテナーのデプロイメントを禁止したり、ユーザーに警告を表示したりできます。
</shortdesc>
<prolog>
<metadata>
<keywords><indexterm>脆弱性</indexterm><indexterm>IBM Containers</indexterm><indexterm>レジストリー</indexterm><indexterm>イメージ</indexterm></keywords></metadata></prolog>
<taskbody>
<context><p><ul>
<li>イメージの脆弱性をリストする場合は、<xref href="va/va_index.html#va_reviewing" format="html" scope="peer">イメージ・レポートの検討</xref>を参照してください。
</li>
<li>組織内でカスタム・ポリシーをセットアップする場合は、<xref href="va/va_index.html#va_managing_policy" format="html" scope="peer">組織ポリシーの検討</xref>を参照してください。
</li></ul></p></context></taskbody></task>
<task id="tips">
<title>コンテナーのシャットダウンを回避するための Dockerfile のヒント</title>
<titlealts>
<searchtitle>コンテナーの異常終了を回避するための Dockerfile のヒント</searchtitle></titlealts>
<shortdesc><keyword conref="cloudoeconrefs.dita#cloudoeconrefs/containerlong"></keyword> には、ユーザーのためにコンテナーを安全に保ち、クラウド・リソースを管理する多くの機能が備わっています。
アプリによっては、<keyword conref="cloudoeconrefs.dita#cloudoeconrefs/bluemix_short"></keyword> でローカル・コンテナーを正常に実行するために、Dockerfile に構成を追加する必要がある場合があります。</shortdesc>
<prolog>
<metadata>
<keywords><indexterm>ネットワーク遅延</indexterm><indexterm>Dockerfile</indexterm><indexterm>ヒント</indexterm><indexterm>異常終了</indexterm><indexterm>シャットダウン</indexterm></keywords></metadata></prolog>
<taskbody>
<context><dl>
<dlentry>
<dt>ネットワーク遅延のための準備</dt>
<dd>コンテナーが開始されると、<keyword conref="cloudoeconrefs.dita#cloudoeconrefs/containerlong"></keyword> はプライベート・コンテナー・ネットワークをセットアップし、コンテナーにプライベート IP アドレスを割り当てます。
この処理には数秒かかる場合があります。
開始時にアクティブなネットワーク接続が必要なアプリの場合は、Dockerfile にスリープ・コマンドを追加して、<xref href="container_planning_private_network.dita#network_delay"><keyword conref="cloudoeconrefs.dita#cloudoeconrefs/containerlong"></keyword> ネットワーキングが先に完了するようにしてください</xref>。</dd></dlentry>
<dlentry>
<dt>長期実行コマンドの使用</dt>
<dd>コンテナーを稼働中の状態に保つには、少なくとも 1 つの長期実行プロセスをコンテナー・イメージに含める必要があります。
例えば、<codeph>echo "Hello world"</codeph> は短期実行プロセスです。
イメージの中に他のコマンドが指定されていない場合、コンテナーは、このコマンドの実行後にシャットダウンされます。
<codeph>echo "Hello world"</codeph> コマンドを長期実行プロセスに変換するには、例えば、何度もループ実行したり、<codeph>echo</codeph> コマンドをアプリ内の別の長期実行プロセスの中に含めたりします。
</dd></dlentry></dl></context></taskbody></task></task>
